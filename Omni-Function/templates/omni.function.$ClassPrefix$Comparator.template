#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
package omni.function;
import java.util.Comparator;
@FunctionalInterface
public interface $ClassPrefix$Comparator extends Comparator<$BoxedType$>
{
  public abstract int compare(final $exposedType$ val1,final $exposedType$ val2);
  public default int compare(final $BoxedType$ val1,final $BoxedType$ val2){
    return compare(($exposedType$)val1,($exposedType$)val2);
  }
  public static int descendingCompare($exposedType$ val1,$exposedType$ val2){
#IF OfBoolean
    if(val1==val2){
      return 0;
    }else if(val1){
      return -1;
    }
    return 1;
#ELSEIF OfByte,OfChar,OfShort
    return val2-val1;
#ELSE
    if(val1>val2){
      return -1;
    }else if(val1<val2){
      return 1;
    }
  #IF OfFloat,OfDouble
    #IF OfFloat
    final int thisBits,thatBits;
    if((thisBits=Float.floatToIntBits(val1))==(thatBits=Float.floatToIntBits(val2))){
    #ELSE
    final long thisBits,thatBits;
    if((thisBits=Double.doubleToLongBits(val1))>(thatBits=Double.doubleToLongBits(val2))){
    #ENDIF
      return 0;
    }else if(thisBits<thatBits){
      return -1;
    }
    return 1;
  #ELSE
    return 0;
  #ENDIF
#ENDIF
  }

  

  
  
  //TODO override reversed()
  //TODO override thenComparing(Comparator<? super T> other)
  //TODO override thenComparing(Function<? super T,? extends U> keyExtractor,Comparator<? super U> keyComparator);
  //TODO override thenComparing(Function<? super T,? extends U> keyExtractor);
  //TODO override thenComparingInt(ToIntFunction<? super T> keyExtractor);
  //TODO override thenComparingLong(ToLongFunction<? super T> keyExtractor);
  //TODO override thenComparingDouble(ToDoubleFunction<? super T> keyExtractor);
  //TODO static methods
}
