#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl;
import omni.util.TypeConversionUtil;
import omni.api.OmniCollection;
import omni.api.OmniList;
import omni.api.OmniStack;
import omni.api.OmniQueue;
import omni.api.OmniDeque;
import omni.api.OmniIterator;
import omni.api.OmniListIterator;
import omni.util.OmniArray;
import omni.util.PeekAndPollIfc;

import org.junit.jupiter.api.Assertions;
#IF OfRef
@SuppressWarnings({"rawtypes"}) 
#ENDIF
public enum $ClassPrefix$OutputTestArgType{
  #MACRO OutputTestArgTypeImpl<ARRAY_TYPE>($ArrayType$,$TypeNameModifier$,$defaultVal$,OmniArray.Of$ClassPrefix$.DEFAULT_ARR,$elementMethod$)
#IFNOT OfRef
  ,
  #MACRO OutputTestArgTypeImpl<BOXED_TYPE>($BoxedType$,,null,OmniArray.Of$ClassPrefix$.DEFAULT_BOXED_ARR,element)
  #IFNOT OfDouble
  ,
  #MACRO OutputTestArgTypeImpl<DOUBLE>(double,Double,Double.NaN,OmniArray.OfDouble.DEFAULT_ARR,doubleElement)
    #IFNOT OfFloat
  ,
  #MACRO OutputTestArgTypeImpl<FLOAT>(float,Float,Float.NaN,OmniArray.OfFloat.DEFAULT_ARR,floatElement)
      #IFNOT OfLong
  ,
  #MACRO OutputTestArgTypeImpl<LONG>(long,Long,Long.MIN_VALUE,OmniArray.OfLong.DEFAULT_ARR,longElement)
        #IFNOT OfInt
  ,
  #MACRO OutputTestArgTypeImpl<INT>(int,Int,Integer.MIN_VALUE,OmniArray.OfInt.DEFAULT_ARR,intElement)
          #IFNOT OfShort,OfChar
  ,
  #MACRO OutputTestArgTypeImpl<SHORT>(short,Short,Short.MIN_VALUE,OmniArray.OfShort.DEFAULT_ARR,shortElement)
            #IFNOT OfByte
  ,
  #MACRO OutputTestArgTypeImpl<BYTE>(byte,Byte,Byte.MIN_VALUE,OmniArray.OfByte.DEFAULT_ARR,byteElement)
  ,
  #MACRO OutputTestArgTypeImpl<CHAR>(char,Char,Character.MIN_VALUE,OmniArray.OfChar.DEFAULT_ARR,charElement)
            #ENDIF
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF
  ;
#MACRODEF OutputTestArgTypeImpl<VALUE_NAME>(OUTPUTTYPE,TYPENAMEMODIFIER,DEFAULT_VAL,DEFAULTARR,ELEMENTMETHOD)
VALUE_NAME{
  @Override public void verifyItrPrevious(OmniIterator.Of$ClassPrefix$ itr,int valToConvert){
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE,BOXED_TYPE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(valToConvert),((OmniListIterator.Of$ClassPrefix$)itr).previousTYPENAMEMODIFIER());
  #ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(valToConvert),((OmniListIterator.Of$ClassPrefix$)itr).previousTYPENAMEMODIFIER());
  #ENDIF
#ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(valToConvert),((OmniListIterator.Of$ClassPrefix$)itr).previousTYPENAMEMODIFIER());
#ENDIF
  }
  @Override public void verifyItrNext(OmniIterator.Of$ClassPrefix$ itr,int valToConvert){
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE,BOXED_TYPE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(valToConvert),itr.nextTYPENAMEMODIFIER());
  #ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(valToConvert),itr.nextTYPENAMEMODIFIER());
  #ENDIF
#ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(valToConvert),itr.nextTYPENAMEMODIFIER());
#ENDIF
  }
  @Override public void verifyListRemoveAt(OmniCollection.Of$ClassPrefix$ col,int index,int valToConvert){
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(valToConvert),((OmniList.Of$ClassPrefix$)col).removeTYPENAMEMODIFIERAt(index));
  #ELSEIFSWITCH VALUE_NAME==BOXED_TYPE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(valToConvert),((OmniList.Of$ClassPrefix$)col).remove(index));
  #ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(valToConvert),((OmniList.Of$ClassPrefix$)col).removeTYPENAMEMODIFIERAt(index));
  #ENDIF
#ELSEIF OfRef
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(valToConvert),((OmniList.Of$ClassPrefix$)col).remove(index));
#ELSE
  #IFSWITCH VALUE_NAME==BOXED_TYPE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(valToConvert),((OmniList.Of$ClassPrefix$)col).remove(index));
  #ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(valToConvert),((OmniList.Of$ClassPrefix$)col).removeTYPENAMEMODIFIERAt(index));
  #ENDIF
#ENDIF
  }
  @Override public void verifyListGet(OmniCollection.Of$ClassPrefix$ col,int index,int valToConvert){
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE,BOXED_TYPE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(valToConvert),((OmniList.Of$ClassPrefix$)col).getTYPENAMEMODIFIER(index));
  #ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(valToConvert),((OmniList.Of$ClassPrefix$)col).getTYPENAMEMODIFIER(index));
  #ENDIF
#ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(valToConvert),((OmniList.Of$ClassPrefix$)col).getTYPENAMEMODIFIER(index));
#ENDIF
  }
  @Override public void verifyToArray(OmniCollection.Of$ClassPrefix$ col,int expectedSize){
    var arr=col.toTYPENAMEMODIFIERArray();
    if(expectedSize==0){
      Assertions.assertSame(DEFAULTARR,arr);
    }else{
      Assertions.assertEquals(expectedSize,arr.length);
      var itr=col.iterator();
      for(int i=0;i<expectedSize;++i){
#IF OfRef
        Assertions.assertSame(itr.next(),arr[i]);
#ELSE
        Assertions.assertEquals(itr.nextTYPENAMEMODIFIER(),arr[i]);
#ENDIF
      }
    }
  }
  @Override public void verifyPoll(OmniCollection.Of$ClassPrefix$ col,int expectedSize,int expectedVal){
    if(expectedSize==0){
      #IF OfRef
      Assertions.assertEquals(DEFAULT_VAL,((PeekAndPollIfc<?>)col).poll());
      #ELSE
        #IFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertNull(((PeekAndPollIfc<?>)col).poll());
        #ELSE
      Assertions.assertEquals(DEFAULT_VAL,((PeekAndPollIfc.TYPENAMEMODIFIEROutput<?>)col).pollTYPENAMEMODIFIER());
        #ENDIF
      #ENDIF
    }else{
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((PeekAndPollIfc.TYPENAMEMODIFIEROutput<?>)col).pollTYPENAMEMODIFIER());
  #ELSEIFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((PeekAndPollIfc<?>)col).poll());
  #ELSE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(expectedVal),((PeekAndPollIfc.TYPENAMEMODIFIEROutput<?>)col).pollTYPENAMEMODIFIER());
  #ENDIF
#ELSEIF OfRef
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((PeekAndPollIfc<?>)col).poll());
#ELSE
  #IFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((PeekAndPollIfc<?>)col).poll());
  #ELSE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((PeekAndPollIfc.TYPENAMEMODIFIEROutput<?>)col).pollTYPENAMEMODIFIER());
  #ENDIF
      
#ENDIF
    }
  }
  @Override public void verifyPeek(OmniCollection.Of$ClassPrefix$ col,int expectedSize,int expectedVal){
    if(expectedSize==0){
      #IF OfRef
      Assertions.assertEquals(DEFAULT_VAL,((PeekAndPollIfc<?>)col).peek());
      #ELSE
        #IFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertNull(((PeekAndPollIfc<?>)col).peek());
        #ELSE
      Assertions.assertEquals(DEFAULT_VAL,((PeekAndPollIfc.TYPENAMEMODIFIEROutput<?>)col).peekTYPENAMEMODIFIER());
        #ENDIF
      #ENDIF
    }else{
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((PeekAndPollIfc.TYPENAMEMODIFIEROutput<?>)col).peekTYPENAMEMODIFIER());
  #ELSEIFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((PeekAndPollIfc<?>)col).peek());
  #ELSE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(expectedVal),((PeekAndPollIfc.TYPENAMEMODIFIEROutput<?>)col).peekTYPENAMEMODIFIER());
  #ENDIF
#ELSEIF OfRef
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((PeekAndPollIfc<?>)col).peek());
#ELSE
  #IFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((PeekAndPollIfc<?>)col).peek());
  #ELSE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((PeekAndPollIfc.TYPENAMEMODIFIEROutput<?>)col).peekTYPENAMEMODIFIER());
  #ENDIF
#ENDIF
    }
  }
  @Override public void verifyDequePollLast(OmniCollection.Of$ClassPrefix$ col,int expectedSize,int expectedVal){
    if(expectedSize==0){
      #IF OfRef
      Assertions.assertEquals(DEFAULT_VAL,((OmniDeque.Of$ClassPrefix$<?>)col).pollLast());
      #ELSE
        #IFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertNull(((OmniDeque.Of$ClassPrefix$)col).pollLast());
        #ELSE
      Assertions.assertEquals(DEFAULT_VAL,((OmniDeque.Of$ClassPrefix$)col).pollLastTYPENAMEMODIFIER());
        #ENDIF
      #ENDIF
    }else{
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).pollLastTYPENAMEMODIFIER());
  #ELSEIFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).pollLast());
  #ELSE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(expectedVal),((OmniDeque.Of$ClassPrefix$)col).pollLastTYPENAMEMODIFIER());
  #ENDIF
#ELSEIF OfRef
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$<?>)col).pollLast());
#ELSE
  #IFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).pollLast());
  #ELSE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).pollLastTYPENAMEMODIFIER());
  #ENDIF
#ENDIF
    }
  }
  @Override public void verifyDequePollFirst(OmniCollection.Of$ClassPrefix$ col,int expectedSize,int expectedVal){
    if(expectedSize==0){
      #IF OfRef
      Assertions.assertEquals(DEFAULT_VAL,((OmniDeque.Of$ClassPrefix$<?>)col).pollFirst());
      #ELSE
        #IFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertNull(((OmniDeque.Of$ClassPrefix$)col).pollFirst());
        #ELSE
      Assertions.assertEquals(DEFAULT_VAL,((OmniDeque.Of$ClassPrefix$)col).pollFirstTYPENAMEMODIFIER());
        #ENDIF
      #ENDIF
    }else{
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).pollFirstTYPENAMEMODIFIER());
  #ELSEIFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).pollFirst());
  #ELSE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(expectedVal),((OmniDeque.Of$ClassPrefix$)col).pollFirstTYPENAMEMODIFIER());
  #ENDIF
#ELSEIF OfRef
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$<?>)col).pollFirst());
#ELSE
  #IFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).pollFirst());
  #ELSE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).pollFirstTYPENAMEMODIFIER());
  #ENDIF
#ENDIF
    }
  }
  @Override public void verifyDequePeekLast(OmniCollection.Of$ClassPrefix$ col,int expectedSize,int expectedVal){
    if(expectedSize==0){
      #IF OfRef
      Assertions.assertEquals(DEFAULT_VAL,((OmniDeque.Of$ClassPrefix$<?>)col).peekLast());
      #ELSE
        #IFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertNull(((OmniDeque.Of$ClassPrefix$)col).peekLast());
        #ELSE
      Assertions.assertEquals(DEFAULT_VAL,((OmniDeque.Of$ClassPrefix$)col).peekLastTYPENAMEMODIFIER());
        #ENDIF
      #ENDIF
    }else{
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).peekLastTYPENAMEMODIFIER());
  #ELSEIFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).peekLast());
  #ELSE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(expectedVal),((OmniDeque.Of$ClassPrefix$)col).peekLastTYPENAMEMODIFIER());
  #ENDIF
#ELSEIF OfRef
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$<?>)col).peekLast());
#ELSE
  #IFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).peekLast());
  #ELSE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).peekLastTYPENAMEMODIFIER());
  #ENDIF
#ENDIF
    }
  }
  @Override public void verifyDequePeekFirst(OmniCollection.Of$ClassPrefix$ col,int expectedSize,int expectedVal){
    if(expectedSize==0){
      #IF OfRef
      Assertions.assertEquals(DEFAULT_VAL,((OmniDeque.Of$ClassPrefix$<?>)col).peekFirst());
      #ELSE
        #IFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertNull(((OmniDeque.Of$ClassPrefix$)col).peekFirst());
        #ELSE
      Assertions.assertEquals(DEFAULT_VAL,((OmniDeque.Of$ClassPrefix$)col).peekFirstTYPENAMEMODIFIER());
        #ENDIF
      #ENDIF
    }else{
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).peekFirstTYPENAMEMODIFIER());
  #ELSEIFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).peekFirst());
  #ELSE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(expectedVal),((OmniDeque.Of$ClassPrefix$)col).peekFirstTYPENAMEMODIFIER());
  #ENDIF
#ELSEIF OfRef
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$<?>)col).peekFirst());
#ELSE
  #IFSWITCH VALUE_NAME==BOXED_TYPE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).peekFirst());
  #ELSE
      Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).peekFirstTYPENAMEMODIFIER());
  #ENDIF
#ENDIF
    }
  }
  @Override public void verifyStackPop(OmniCollection.Of$ClassPrefix$ col,int expectedVal){
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE,BOXED_TYPE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniStack.Of$ClassPrefix$)col).popTYPENAMEMODIFIER());
  #ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(expectedVal),((OmniStack.Of$ClassPrefix$)col).popTYPENAMEMODIFIER());
  #ENDIF
#ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniStack.Of$ClassPrefix$)col).popTYPENAMEMODIFIER());
#ENDIF
  }
  @Override public void verifyQueueElement(OmniCollection.Of$ClassPrefix$ col,int expectedVal){
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE,BOXED_TYPE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniQueue.Of$ClassPrefix$)col).ELEMENTMETHOD());
  #ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(expectedVal),((OmniQueue.Of$ClassPrefix$)col).ELEMENTMETHOD());
  #ENDIF
#ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniQueue.Of$ClassPrefix$)col).ELEMENTMETHOD());
#ENDIF
  }
  @Override public void verifyQueueRemove(OmniCollection.Of$ClassPrefix$ col,int expectedVal){
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE,BOXED_TYPE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniQueue.Of$ClassPrefix$)col).removeTYPENAMEMODIFIER());
  #ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(expectedVal),((OmniQueue.Of$ClassPrefix$)col).removeTYPENAMEMODIFIER());
  #ENDIF
#ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniQueue.Of$ClassPrefix$)col).removeTYPENAMEMODIFIER());
#ENDIF
  }
  @Override public void verifyDequeRemoveFirst(OmniCollection.Of$ClassPrefix$ col,int expectedVal){
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE,BOXED_TYPE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).removeFirstTYPENAMEMODIFIER());
  #ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(expectedVal),((OmniDeque.Of$ClassPrefix$)col).removeFirstTYPENAMEMODIFIER());
  #ENDIF
#ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).removeFirstTYPENAMEMODIFIER());
#ENDIF
  }
  @Override public void verifyDequeRemoveLast(OmniCollection.Of$ClassPrefix$ col,int expectedVal){
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE,BOXED_TYPE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).removeLastTYPENAMEMODIFIER());
  #ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(expectedVal),((OmniDeque.Of$ClassPrefix$)col).removeLastTYPENAMEMODIFIER());
  #ENDIF
#ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).removeLastTYPENAMEMODIFIER());
#ENDIF
  }
  @Override public void verifyDequeGetFirst(OmniCollection.Of$ClassPrefix$ col,int expectedVal){
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE,BOXED_TYPE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).getFirstTYPENAMEMODIFIER());
  #ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(expectedVal),((OmniDeque.Of$ClassPrefix$)col).getFirstTYPENAMEMODIFIER());
  #ENDIF
#ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).getFirstTYPENAMEMODIFIER());
#ENDIF
  }
  @Override public void verifyDequeGetLast(OmniCollection.Of$ClassPrefix$ col,int expectedVal){
#IF OfBoolean,OfByte,OfChar,OfShort
  #IFSWITCH VALUE_NAME==ARRAY_TYPE,BOXED_TYPE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).getLastTYPENAMEMODIFIER());
  #ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE$exposedType$(expectedVal),((OmniDeque.Of$ClassPrefix$)col).getLastTYPENAMEMODIFIER());
  #ENDIF
#ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedVal),((OmniDeque.Of$ClassPrefix$)col).getLastTYPENAMEMODIFIER());
#ENDIF
  }
}
#ENDDEF

  public abstract void verifyDequePeekLast(OmniCollection.Of$ClassPrefix$ col,int expectedSize,int expectedVal);
  public abstract void verifyDequePollLast(OmniCollection.Of$ClassPrefix$ col,int expectedSize,int expectedVal);
  public abstract void verifyDequePeekFirst(OmniCollection.Of$ClassPrefix$ col,int expectedSize,int expectedVal);
  public abstract void verifyDequePollFirst(OmniCollection.Of$ClassPrefix$ col,int expectedSize,int expectedVal);
  public abstract void verifyDequeRemoveLast(OmniCollection.Of$ClassPrefix$ col,int expectedVal);
  public abstract void verifyDequeRemoveFirst(OmniCollection.Of$ClassPrefix$ col,int expectedVal);
  public abstract void verifyDequeGetLast(OmniCollection.Of$ClassPrefix$ col,int expectedVal);
  public abstract void verifyDequeGetFirst(OmniCollection.Of$ClassPrefix$ col,int expectedVal);
  public abstract void verifyItrPrevious(OmniIterator.Of$ClassPrefix$ itr,int valToConvert);
  public abstract void verifyItrNext(OmniIterator.Of$ClassPrefix$ itr,int valToConvert);
  public abstract void verifyListRemoveAt(OmniCollection.Of$ClassPrefix$ col,int index,int valToConvert);
  public abstract void verifyListGet(OmniCollection.Of$ClassPrefix$ col,int index,int valToConvert);
  public abstract void verifyToArray(OmniCollection.Of$ClassPrefix$ col,int expectedSize);
  public abstract void verifyPoll(OmniCollection.Of$ClassPrefix$ col,int expectedSize,int expectedVal);
  public abstract void verifyStackPop(OmniCollection.Of$ClassPrefix$ col,int expectedVal);
  public abstract void verifyQueueRemove(OmniCollection.Of$ClassPrefix$ col,int expectedVal);
  public abstract void verifyQueueElement(OmniCollection.Of$ClassPrefix$ col,int expectedVal);
  public abstract void verifyPeek(OmniCollection.Of$ClassPrefix$ col,int expectedSize,int expectedVal);
}
