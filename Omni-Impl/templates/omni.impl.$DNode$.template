#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl;
#IF OfRef
import java.util.function.Predicate;
#ENDIF
#IF OfRef,OfDouble,OfLong,OfInt
import java.util.function.$TypeNameModifier$Consumer;
#ELSE
import omni.function.$TypeNameModifier$Consumer;
#ENDIF
#IF OfBoolean
import omni.util.TypeUtil;
#ENDIF
#IF OfRef,OfDouble,OfLong,OfInt
import java.util.function.$UnaryOperator$;
#ELSE
import omni.function.$UnaryOperator$;
#ENDIF
#IFNOT OfRef,OfDouble,OfChar
import omni.util.ToStringUtil;
#ENDIF
#IF OfDouble,OfFloat
import omni.util.HashUtil;
#ENDIF
#IF OfRef
import java.util.Objects;
#ENDIF
public class $DNode$$<E>$ implements Comparable<$DNode$$<E>$>
{
  public transient $DNode$$<E>$ prev;
  public transient $exposedType$ val;
  public transient $DNode$$<E>$ next;
  public $DNode$($exposedType$ val)
  {
    this.val=val;
  }
  public $DNode$($DNode$$<E>$ prev,$exposedType$ val)
  {
    this.prev=prev;
    this.val=val;
  }
  public $DNode$($exposedType$ val,$DNode$$<E>$ next)
  {
    this.val=val;
    this.next=next;
  }
  public $DNode$($DNode$$<E>$ prev,$exposedType$ val,$DNode$$<E>$ next)
  {
    this.prev=prev;
    this.val=val;
    this.next=next;
  }
  //TODO example this implementation to other array types
  #IF OfRef
  @SuppressWarnings("unchecked")
  #ENDIF
  public static $<E>$ void uncheckedCopyFrom($ArrayType$[] src,int length,$DNode$$<E>$ dst){
    for(;;dst=dst.prev)
    {
      dst.val=($exposedType$)src[--length];
      if(length==0)
      {
        return;
      }
    }
  }
  
  
#IF OfRef,OfDouble
  #IF OfRef
  public static $<E>$ void uncheckedToString($DNode$$<E>$ curr,int size,StringBuilder builder){
    for(builder.append(curr.val);--size!=0;builder.append(',').append(' ').append((curr=curr.next).val)){}
  }
  #ENDIF
  public static $<E>$ void uncheckedToString($DNode$$<E>$ curr,$DNode$$<E>$ tail,StringBuilder builder){
    for(;;curr=curr.next,builder.append(',').append(' ')){
      builder.append(curr.val);
      if(curr==tail){
        return;
      }
    }
  }
#ELSEIF OfChar
  public static $<E>$ void uncheckedToString($DNode$$<E>$ curr,$DNode$$<E>$ tail,char[] buffer){
    int bufferOffset=1;
    for(;;curr=curr.next,buffer[++bufferOffset]=',',buffer[++bufferOffset]=' ',++bufferOffset){
      buffer[bufferOffset]=curr.val;
      if(curr==tail){
        return;
      }
    }
  }
#ELSE
  public static $<E>$ int uncheckedToString($DNode$$<E>$ curr,$DNode$$<E>$ tail,byte[] buffer){
    int bufferOffset=1;
    for(;;curr=curr.next,buffer[bufferOffset]=(byte)',',buffer[++bufferOffset]=(byte)' ',++bufferOffset){
#IF OfByte
      bufferOffset=ToStringUtil.getStringShort(curr.val,buffer,bufferOffset);
#ELSE
      bufferOffset=ToStringUtil.getString$TypeNameModifier$(curr.val,buffer,bufferOffset);
#ENDIF
      if(curr==tail){
        return bufferOffset;
      }
    }
  }
  public static $<E>$ void uncheckedToString($DNode$$<E>$ curr,$DNode$$<E>$ tail,ToStringUtil.OmniStringBuilderByte builder){
    for(;;curr=curr.next,builder.uncheckedAppendCommaAndSpace()){
#IF OfByte
      builder.uncheckedAppendShort(curr.val);
#ELSE
      builder.uncheckedAppend$TypeNameModifier$(curr.val);
#ENDIF
      if(curr==tail){
        return;
      }
    }
  }
#ENDIF
  public static $<E>$ int uncheckedHashCode($DNode$$<E>$ curr,$DNode$$<E>$ tail){
    int hash=31+$hashCodeMethod$(curr.val);
    while(curr!=tail){
      hash=(hash*31)+$hashCodeMethod$((curr=curr.next).val);
    }
    return hash;
  }
#IF OfRef
  public static $<E>$ int uncheckedHashCode($DNode$$<E>$ curr,int size){
    int hash=31+$hashCodeMethod$(curr.val);
    while(--size!=0){
      hash=(hash*31)+$hashCodeMethod$((curr=curr.next).val);
    }
    return hash;
  }
#ENDIF
  public static $<E>$ void uncheckedForEachAscending($DNode$$<E>$ node,int size,$TypeNameModifier$Consumer$<? super E>$ action){
    for(;;node=node.next){
      action.accept(node.val);
      if(--size==0){
        return;
      }
    }
  }
  public static $<E>$ void uncheckedReplaceAll($DNode$$<E>$ node,int size,$UnaryOperator$$<E>$ operator){
    for(;;node=node.next){
      node.val=operator.$applyMethod$(node.val);
      if(--size==0){
        return;
      }
    }
  }
  public static $<E>$ void uncheckedForEachAscending($DNode$$<E>$ node,$TypeNameModifier$Consumer$<? super E>$ action){
    for(;;){
      action.accept(node.val);
      if((node=node.next)==null){
        return;
      }
    }
  }
  public static $<E>$ void uncheckedForEachAscending($DNode$$<E>$ node,$DNode$$<E>$ tail,$TypeNameModifier$Consumer$<? super E>$ action){
    for(;;node=node.next){
      action.accept(node.val);
      if(node==tail){
        return;
      }
    }
  }
  public static $<E>$ void uncheckedReplaceAll($DNode$$<E>$ node,$DNode$$<E>$ tail,$UnaryOperator$$<E>$ operator){
    for(;;node=node.next){
      node.val=operator.$applyMethod$(node.val);
      if(node==tail){
        return;
      }
    }
  }
  public static $<E>$ void uncheckedForEachDescending($DNode$$<E>$ node,$TypeNameModifier$Consumer$<? super E>$ action){
    for(;;){
      action.accept(node.val);
      if((node=node.prev)==null){
        return;
      }
    }
  }
  public static $<E>$ void uncheckedForEachDescending($DNode$$<E>$ node,int size,$TypeNameModifier$Consumer$<? super E>$ action){
    for(;;node=node.prev){
      action.accept(node.val);
      if(--size==0){
        return;
      }
    }
  }
  public static $<E>$ void eraseNode($DNode$$<E>$ node){
    $DNode$$<E>$ next,prev;
    (next=node.next).prev=(prev=node.prev);
    prev.next=next;
  }
  public static $<E>$ $DNode$$<E>$ iterateAscending($DNode$$<E>$ node,int length){
    if(length!=0){
      do{
        node=node.next;
      }while(--length!=0);
    }
    return node;
  }
  public static $<E>$ $DNode$$<E>$ iterateDescending($DNode$$<E>$ node,int length){
    if(length!=0){
      do{
        node=node.prev;
      }while(--length!=0);
    }
    return node;
  }
  public static $<E>$ $DNode$$<E>$ uncheckedIterateAscending($DNode$$<E>$ node,int length){
    do{
      node=node.next;
    }while(--length!=0);
    return node;
  }
  public static $<E>$ $DNode$$<E>$ uncheckedIterateDescending($DNode$$<E>$ node,int length){
    do{
      node=node.prev;
    }while(--length!=0);
    return node;
  }
#IF OfRef
  public static $<E>$ boolean uncheckedcontainsNonNull($DNode$$<E>$ head,int size,Object nonNull){
    for(;!nonNull.equals(head.val);head=head.next){if(--size==0){return false;}}
    return true;
  }
  public static $<E>$ int uncheckedsearchNonNull($DNode$$<E>$ head,int size,Object nonNull){
    int index=1;
    for(;!nonNull.equals(head.val);++index,head=head.next){if(--size==0){return -1;}}
    return index;
  }
  public static $<E>$ int uncheckedindexOfNonNull($DNode$$<E>$ head,int size,Object nonNull){
    int index=0;
    for(;!nonNull.equals(head.val);++index,head=head.next){if(--size==0){return -1;}}
    return index;
  }
  #MACRO NodeQuery<NonNull>(!nonNull.equals)
  #MACRO NodeQuery<Null>(null!=)
  #MACRO NodeQuery< >(!pred.test)
#ELSEIF OfDouble,OfFloat
  #MACRO NodeQuery<Bits>(bits!=$convertToBits$)
  #MACRO NodeQuery<0>(0!=)
  #MACRO NodeQuery<NaN>(!$BoxedType$.isNaN)
#ELSE
  #MACRO NodeQuery< >(val!=)
#ENDIF
  #MACRO UncheckedCopyInto($ArrayType$,)
#IFNOT OfRef
  #MACRO UncheckedCopyInto($BoxedType$,)
  #MACRO UncheckedCopyInto(Object,)
  #IFNOT OfDouble
  #MACRO UncheckedCopyInto(double,$castToDouble$)
    #IFNOT OfFloat
  #MACRO UncheckedCopyInto(float,$castToFloat$)
      #IFNOT OfLong
  #MACRO UncheckedCopyInto(long,$castToLong$)
        #IFNOT OfInt
  #MACRO UncheckedCopyInto(int,$castToInt$)
          #IFNOT OfShort,OfChar
  #MACRO UncheckedCopyInto(short,$castToShort$)
            #IFNOT OfByte
  #MACRO UncheckedCopyInto(byte,$castToByte$)
  #MACRO UncheckedCopyInto(char,$castToChar$)
            #ENDIF
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF
#IF OfRef
  @SuppressWarnings("unchecked")
#ENDIF
  @Override
  public int compareTo($DNode$$<E>$ that){
    if(this!=that){
      #IF OfBoolean
      if(this.val){
        if(!that.val){
          return 1;
        }
      }else if(that.val){
        return -1;
      }
      #ELSEIF OfByte,OfShort,OfChar
      return this.val-that.val;
      #ELSEIF OfInt,OfLong
      $exposedType$ thisVal,thatVal;
      if((thisVal=this.val)<(thatVal=that.val)){
        return -1;
      }else if(thisVal>thatVal){
        return 1;
      }
      #ELSEIF OfFloat,OfDouble
      return $BoxedType$.compare(this.val,that.val);
      #ELSE
      return ((Comparable$<E>$)this.val).compareTo(that.val);
      #ENDIF
    }
    return 0;
  }
}
#MACRODEF NodeQuery<SUFFIX>(TEST)
public static $<E>$ boolean uncheckedcontainsSUFFIX($DNode$$<E>$ head,$DNode$$<E>$ tail
#MACRO UncheckedQueryParam()
){
  for(;TEST(head.val);head=head.next){if(head==tail){return false;}}
  return true;
}
public static $<E>$ int uncheckedsearchSUFFIX($DNode$$<E>$ head
#MACRO UncheckedQueryParam()
){
  int index=1;
  for(;TEST(head.val);++index){if((head=head.next)==null){return -1;}}
  return index;
}
public static $<E>$ int uncheckedindexOfSUFFIX($DNode$$<E>$ head,$DNode$$<E>$ tail
#MACRO UncheckedQueryParam()
){
  int index=0;
  for(;TEST(head.val);++index,head=head.next){if(head==tail){return -1;}}
  return index;
}
public static $<E>$ int uncheckedlastIndexOfSUFFIX(int length,$DNode$$<E>$ tail
#MACRO UncheckedQueryParam()
){
  for(;TEST(tail.val);tail=tail.prev){if(--length==0){return -1;}}
  return length-1;
}
#ENDDEF
#MACRODEF UncheckedCopyInto(DSTTYPE,CAST)
public static $<E>$ void uncheckedCopyInto(DSTTYPE[] dst,$DNode$$<E>$ curr,int length){
  for(;;curr=curr.prev){
    dst[--length]=CAST(curr.val);
    if(length==0){
      return;
    }
  }
}
#ENDDEF
#MACRODEF UncheckedQueryParam()
#IFSWITCH SUFFIX==NonNull
,Object nonNull
#ELSEIFSWITCH SUFFIX==Bits
,$queryParameterType$ bits
#ELSEIFSWITCH SUFFIX==Null,0,NaN
#ELSE
  #IF OfRef
,$TypeNameModifier$Predicate$<? super E>$ pred
  #ELSE
,$queryParameterType$ val
  #ENDIF
#ENDIF
#ENDDEF