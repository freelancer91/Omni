#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl;

public class $DNode$$<E>$ implements Comparable<$DNode$$<E>$>
{
  public transient $DNode$$<E>$ prev;
  public transient $exposedType$ val;
  public transient $DNode$$<E>$ next;
  public $DNode$($exposedType$ val)
  {
    this.val=val;
  }
  public $DNode$($DNode$$<E>$ prev,$exposedType$ val)
  {
    this.prev=prev;
    this.val=val;
  }
  public $DNode$($exposedType$ val,$DNode$$<E>$ next)
  {
    this.val=val;
    this.next=next;
  }
  public $DNode$($DNode$$<E>$ prev,$exposedType$ val,$DNode$$<E>$ next)
  {
    this.prev=prev;
    this.val=val;
    this.next=next;
  }
 
  #IF OfRef
  @SuppressWarnings("unchecked")
  #ENDIF
  @Override
  public int compareTo($DNode$$<E>$ that)
  {
    if(this!=that)
    {
      #IF OfBoolean
      if(this.val)
      {
        if(!that.val)
        {
          return 1;
        }
      }else if(that.val)
      {
        return -1;
      }
      #ELSEIF OfByte,OfShort,OfChar
      return this.val-that.val;
      #ELSEIF OfInt,OfLong
      $exposedType$ thisVal,thatVal;
      if((thisVal=this.val)<(thatVal=that.val))
      {
        return -1;
      }
      if(thisVal>thatVal)
      {
        return 1;
      }
      #ELSEIF OfFloat,OfDouble
      return $BoxedType$.compare(this.val,that.val);
      #ELSE
      return ((Comparable$<E>$)this.val).compareTo(that.val);
      #ENDIF
    }
    return 0;
  }
}