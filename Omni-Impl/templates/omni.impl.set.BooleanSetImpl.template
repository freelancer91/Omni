#TYPEDEF OfBoolean
package omni.impl.set;
import omni.api.OmniNavigableSet;
import java.io.Serializable;
import java.util.Collection;
import omni.api.OmniCollection;
import omni.function.BooleanComparator;
import omni.function.BooleanConsumer;
import java.util.function.Consumer;
import omni.function.BooleanPredicate;
import java.util.function.Predicate;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.IOException;
import java.util.function.IntFunction;
import omni.util.OmniArray;
import omni.api.OmniIterator;
import java.util.Set;
import omni.api.OmniSet;
import java.util.NoSuchElementException;
import omni.impl.AbstractBooleanItr;
import java.util.ConcurrentModificationException;
public abstract class BooleanSetImpl extends AbstractBooleanSet implementsSerializable,Cloneable{
  transient int state;
  #MACRO Constructors<BooleanSetImpl>()
  @Override public void clear(){
    this.state=0b00;
  }
  @Override public boolean isEmpty(){
    return this.state==0b00;
  }
  @Override public int size(){
    switch(this.state){
      case 0b00:
        return 0;
      case 0b01:
      case 0b10:
        return 1;
      default:
        return 2;
    }
  }
  @Override public int hashCode(){
    switch(this.state){
      case 0b00:
        return 0;
      case 0b01:
        return 1237;
      case 0b10:
        return 1231:
      default:
        return 1231+1237;
    }
  }
  @Override public boolean equals(Object val){
    if(val==this){
      return true;
    }
    if(val instanceof Set){
      switch(this.state){
        case 0b00:
          return ((Set<?>)val).isEmpty();
        case 0b01:
          return equalsFalseState((Set<?>)val);
        case 0b10:
          return equalsTrueState((Set<?>)val);
        default:
          return equalsFullState((Set<?>)val);
      }
    }
    return false;
  }
  private static boolean equalsFullState(Set<?> val){
    //TODO optimize
    if(val.size()==2){
      if(val instanceof OmniSet){
        if(val instanceof AbstractBooleanSet){
          return true;
        }else if(val instanceof OmniSet.OfRef){
          final OmniSet.OfRef<?> that;
          return (that=(OmniSet.OfRef<?>)val).contains(false) && that.contains(true);
        }
      }else{
        return val.contains(Boolean.FALSE) && val.contains(Boolean.TRUE);
      }
    }
    return false;
  }
  private static boolean equalsTrueState(Set<?> val){
    //TODO optimize
    if(val.size()==1){
      if(val instanceof OmniSet){
        if(val instanceof AbstractBooleanSet){
          return ((AbstractBooleanSet)val).containsTrue();
        }else if(val instanceof OmniSet.OfRef){
          return ((OmniSet.OfRef<?>)val).contains(true);
        }
      }else{
        return val.contains(Boolean.TRUE);
      }
    }
    return false;
  }
  private static boolean equalsFalseState(Set<?> val){
    //TODO optimize
    if(val.size()==1){
      if(val instanceof OmniSet){
        if(val instanceof AbstractBooleanSet){
          return ((AbstractBooleanSet)val).containsFalse();
        }else if(val instanceof OmniSet.OfRef){
          return ((OmniSet.OfRef<?>)val).contains(false);
        }
      }else{
        return val.contains(Boolean.FALSE);
      }
    }
    return false;
  }
  
  
 
}

#MACRODEF Constructors<NAME>()
private static final long serialVersionUID=1L;
public NAME(){
  super();
}
public NAME(BooleanSetImpl that){
#IFSWITCH NAME==BooleanSetImpl
  this.state=that.state;
#ELSE
  super(that);
#ENDIF
}
public NAME(OmniCollection.OfBoolean that){
#IFSWITCH NAME==BooleanSetImpl
  super();
  //TODO optimize
  this.addAll(that);
#ELSE
  super(that);
#ENDIF
}
public NAME(OmniCollection.OfRef<? extends Boolean> that){
#IFSWITCH NAME==BooleanSetImpl
  super();
  //TODO optimize
  this.addAll(that);
#ELSE
  super(that);
#ENDIF
}
public NAME(Collection<? extends Boolean> that){
#IFSWITCH NAME==BooleanSetImpl
  super();
  //TODO optimize
  this.addAll(that);
#ELSE
  super(that);
#ENDIF
}
NAME(int state){
#IFSWITCH NAME==BooleanSetImpl
  super();
  this.state=state;
#ELSE
  super(state);
#ENDIF
}
@Override public Object clone(){
  return new NAME(this.state);
}
#ENDDEF
