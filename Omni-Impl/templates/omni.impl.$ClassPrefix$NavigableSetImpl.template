#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfComparable
package omni.impl;
import omni.api.OmniNavigableSet;
import omni.util.ArrCopy;
import omni.api.OmniIterator;
#IF OfChar,OfFloat,OfDouble,OfComparable
import omni.util.OmniArray;
#ENDIF
#IF OfComparable
import java.util.Collections;
import java.util.Comparator;
#ELSE
import omni.function.$TypeNameModifier$Comparator;
#ENDIF
#IF OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
import omni.util.TypeUtil;
#ENDIF
#IF OfLong,OfDouble,OfComparable
import java.util.function.$TypeNameModifier$ToIntFunction;
#ENDIF
#IF OfFloat
import omni.function.$TypeNameModifier$ToIntFunction;
#ENDIF
#IF OfShort,OfInt,OfChar
import java.util.function.IntUnaryOperator;
#ENDIF
#IF OfComparable
public abstract class $ClassPrefix$NavigableSetImpl<E extends Comparable<E>>
  extends $ClassPrefix$UntetheredArrSeq$<E>$ implements OmniNavigableSet.OfRef$<E>$
#ELSE
public abstract class $ClassPrefix$NavigableSetImpl
  extends $ClassPrefix$UntetheredArrSeq$<E>$ implements OmniNavigableSet.Of$ClassPrefix$$<E>$
#ENDIF
  
{
  $ClassPrefix$NavigableSetImpl(int head,$ArrayType$[] arr,int tail){
    super(head,arr,tail);
  }
  $ClassPrefix$NavigableSetImpl(){
    super();
  }
#IF OfComparable
  private static <E extends Comparable<E>> int privateCompare($exposedType$ key1,$exposedType$ key2){
#ELSEIF OfChar,OfShort
  private static int privateCompare(int key1,int key2){
#ELSE
  private static int privateCompare($exposedType$ key1,$exposedType$ key2){
#ENDIF
#IF OfShort,OfChar
    return Integer.signum(key1-key2);
#ELSE
  #IF OfComparable
    if(key2!=null){
      return Integer.signum(-key2.compareTo(key1));
    }
  #ELSE
    if(key1==key2){
      return 0;
    }
    if(key1>key2){
      return 1;
    }
  #ENDIF
    return -1;
#ENDIF
  }
#IF OfChar
  private boolean uncheckedAdd0(int tail){
    $ArrayType$[] arr;
    int head;
    if((arr=this.arr)[head=this.head]!=0){
      int newHead;
      switch(Integer.signum(tail-(newHead=head-1))){
        case 0:
          //fragmented must grow
          final $ArrayType$[] tmp;
          int arrLength;
          ArrCopy.uncheckedCopy(arr,0,tmp=$NewArray$[tail=OmniArray.growBy50Pct(arrLength=arr.length)],0,head);
          ArrCopy.uncheckedCopy(arr,head,tmp,newHead=tail-(arrLength-=head),arrLength);
          this.arr=tmp;
          this.head=newHead-1;
          return true;
        default:
          //nonfragmented
          if(newHead==-1 && tail==(newHead=arr.length-1)){
            //must grow
            this.tail=(newHead=OmniArray.growBy50Pct(++tail))-1;
            ArrCopy.uncheckedCopy(arr,0,arr=$NewArray$[newHead],newHead-=(tail),tail);
            this.arr=arr;
            this.head=newHead-1;
            return true;
          }
        case -1:
          //fragmented
      }
      arr[newHead]=0;
      this.head=newHead;
      return true;
    }
    return false;
  }
#ENDIF
#IF OfFloat,OfDouble
  private static int comparePos0($exposedType$ key){
    if(key<0){
      return 1;
    }
#IF OfFloat
    switch(Float.floatToRawIntBits(key)){
      case 0:
        return 0;
      case Integer.MIN_VALUE:
        return 1;
      default:
    }
#ELSE
    final long bits;
    if((bits=Double.doubleToRawLongBits(key))==0){
      return 0;
    }else if(bits==Long.MIN_VALUE){
      return 1;
    }
#ENDIF
    return -1;
  }
  private static int compareNeg0($exposedType$ key){
    if(key<0){
      return 1;
    }
#IF OfFloat
    if(Float.floatToRawIntBits(key)==Integer.MIN_VALUE){
#ELSE
    if(Double.doubleToRawLongBits(key)==Long.MIN_VALUE){
#ENDIF
      return 0;
    }
    return -1;
  }
  private boolean uncheckedAddNegInf(int tail){
    final $ArrayType$[] arr;
    final int head;
    if((arr=this.arr)[head=this.head]!=$BoxedType$.NEGATIVE_INFINITY){
      super.insertAtHead(arr,$BoxedType$.NEGATIVE_INFINITY,head,tail);
      return true;
    }
    return false;
  }
#ENDIF
#IF OfDouble,OfFloat,OfComparable
  #IF OfComparable
  @SuppressWarnings("unchecked")
  #ENDIF
  private boolean uncheckedAddUndefined(int tail){
    $ArrayType$[] arr;
  #IF OfComparable
    if((arr=this.arr)[tail]!=null){
  #ELSE
    if(!$BoxedType$.isNaN((arr=this.arr)[tail])){
  #ENDIF
      int head;
      switch(Integer.signum((++tail)-(head=this.head))){
        case 0:
          //fragmented must grow
          final $ArrayType$[] tmp;
          int arrLength;
          ArrCopy.uncheckedCopy(arr,0,tmp=$NewArray$[head=OmniArray.growBy50Pct(arrLength=arr.length)],0,tail);
          ArrCopy.uncheckedCopy(arr,tail,tmp,head-=(arrLength-=tail),arrLength);
          this.head=head;
  #IF OfComparable
          this.arr=tmp;
  #ELSE
          this.arr=arr=tmp;
  #ENDIF
          break;
        default:
          //nonfragmented
          if(tail==arr.length){
            if(head==0){
              //must grow
              ArrCopy.uncheckedCopy(arr,0,arr=$NewArray$[OmniArray.growBy50Pct(tail)],0,tail);
              this.arr=arr;
            }else{
              tail=0;
            }
          }
        case -1:
          //fragmented
      }
  #IF OfDouble,OfFloat
      arr[tail]=$BoxedType$.NaN;
  #ENDIF
      this.tail=tail;
      return true;
    }
    return false;
  }
#ENDIF
  @Override public boolean add($exposedType$ key){
    int tail;
    if((tail=this.tail)!=-1){
#IF OfComparable,OfDouble,OfFloat,OfChar
  #IF OfComparable
      if(key!=null){
  #ELSEIF OfFloat,OfDouble
      if(key==key){
  #ELSE
      if(key!=0){
  #ENDIF
  #IF OfFloat
        final FloatToIntFunction compareFunc;
        switch(Float.floatToRawIntBits(key)){
          default:
            return super.uncheckedAdd(tail,key,$ClassPrefix$NavigableSetImpl::privateCompare);
          case 0xff800000:
            return this.uncheckedAddNegInf(tail);
          case 0:
            compareFunc=$ClassPrefix$NavigableSetImpl::comparePos0;
            break;
          case Integer.MIN_VALUE:
            compareFunc=$ClassPrefix$NavigableSetImpl::compareNeg0;
        }
        return super.uncheckedAdd(tail,key,compareFunc);
  #ELSEIF OfDouble
        final DoubleToIntFunction compareFunc;
        final long bits;
        if((bits=Double.doubleToRawLongBits(key))==0){
          compareFunc=$ClassPrefix$NavigableSetImpl::comparePos0;
        }else if(bits==Long.MIN_VALUE){
          compareFunc=$ClassPrefix$NavigableSetImpl::compareNeg0;
        }else{
          return super.uncheckedAdd(tail,key,$ClassPrefix$NavigableSetImpl::privateCompare);
        }
        return super.uncheckedAdd(tail,key,compareFunc);
  #ELSE
        return super.uncheckedAdd(tail,key,$ClassPrefix$NavigableSetImpl::privateCompare);
  #ENDIF
      }
  #IF OfChar
      return uncheckedAdd0(tail);
  #ELSE
      return uncheckedAddUndefined(tail);
  #ENDIF
#ELSE
      return super.uncheckedAdd(tail,key,$ClassPrefix$NavigableSetImpl::privateCompare);
#ENDIF
    }else{
      super.insertAtMiddle(key);
      return true;
    }
  }
#IFNOT OfComparable
  @Override public boolean add($BoxedType$ key){
    return add(($exposedType$)key);
  }
  @Override public boolean add(boolean key){
    final int tail;
    if((tail=this.tail)!=-1){
  #IF OfChar,OfDouble,OfFloat
      if(key){
        return super.uncheckedAdd(tail,($exposedType$)1,$ClassPrefix$NavigableSetImpl::privateCompare);
      }
    #IF OfChar
      return uncheckedAdd0(tail);
    #ELSE
      return super.uncheckedAdd(tail,($exposedType$)0,$ClassPrefix$NavigableSetImpl::comparePos0);
    #ENDIF
  #ELSE
      return super.uncheckedAdd(tail,$queryCastBoolean$(key),$ClassPrefix$NavigableSetImpl::privateCompare);
  #ENDIF
    }else{
      super.insertAtMiddle($queryCastBoolean$(key));
      return true;
    }
  }
#ENDIF
#IF OfInt,OfLong,OfShort
  @Override public boolean add(byte key){
    final int tail;
    if((tail=this.tail)!=-1){
      return super.uncheckedAdd(tail,key,$ClassPrefix$NavigableSetImpl::privateCompare);
    }else{
      super.insertAtMiddle(key);
      return true;
    }
  }
#ENDIF
#IF OfFloat,OfInt,OfLong
  @Override public boolean add(char key){
    final int tail;
    if((tail=this.tail)!=-1){
  #IF OfFloat
      if(key==0){
        return super.uncheckedAdd(tail,0,$ClassPrefix$NavigableSetImpl::comparePos0);
      }
  #ENDIF
      return super.uncheckedAdd(tail,key,$ClassPrefix$NavigableSetImpl::privateCompare);
    }else{
      super.insertAtMiddle(key);
      return true;
    }
  }
#ENDIF
#IF OfFloat
  @Override public boolean add(short key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key==0){
        return super.uncheckedAdd(tail,0,$ClassPrefix$NavigableSetImpl::comparePos0);
      }
      return super.uncheckedAdd(tail,key,$ClassPrefix$NavigableSetImpl::privateCompare);
    }else{
      super.insertAtMiddle(key);
      return true;
    }
  }
#ENDIF
#IF OfDouble,OfFloat,OfLong
  @Override public boolean add(int key){
    final int tail;
    if((tail=this.tail)!=-1){
  #IFNOT OfLong
      if(key==0){
        return super.uncheckedAdd(tail,0,$ClassPrefix$NavigableSetImpl::comparePos0);
      }
  #ENDIF
      return super.uncheckedAdd(tail,key,$ClassPrefix$NavigableSetImpl::privateCompare);
    }else{
      super.insertAtMiddle(key);
      return true;
    }
  }
#ENDIF
#IF OfDouble,OfFloat
  @Override public boolean add(long key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key==0){
        return super.uncheckedAdd(tail,0,$ClassPrefix$NavigableSetImpl::comparePos0);
      }
      return super.uncheckedAdd(tail,key,$ClassPrefix$NavigableSetImpl::privateCompare);
    }else{
      super.insertAtMiddle(key);
      return true;
    }
  }
#ENDIF
#IF OfDouble
  @Override public boolean add(float key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key==key){
        final DoubleToIntFunction compareFunc;
        switch(Float.floatToRawIntBits(key)){
          default:
            return super.uncheckedAdd(tail,key,$ClassPrefix$NavigableSetImpl::privateCompare);
          case 0xff800000:
            return this.uncheckedAddNegInf(tail);
          case 0:
            compareFunc=$ClassPrefix$NavigableSetImpl::comparePos0;
            break;
          case Integer.MIN_VALUE:
            compareFunc=$ClassPrefix$NavigableSetImpl::compareNeg0;
        }
        return super.uncheckedAdd(tail,key,compareFunc);
      }
      return uncheckedAddUndefined(tail);
    }else{
      super.insertAtMiddle(key);
      return true;
    }
  }
#ENDIF
  #IF OfInt,OfShort,OfChar
  private static IntUnaryOperator getSearchFunction(int key){
  #ELSEIF OfComparable
  private static <E extends Comparable<E>> ToIntFunction<E> getSearchFunction(E key){
  #ELSE
  private static $BoxedType$ToIntFunction getSearchFunction($exposedType$ key){
  #ENDIF
    return (k)->privateCompare(k,key);
  }
  #IF OfComparable
  @SuppressWarnings("unchecked")
  #ENDIF
  @Override public boolean contains(Object key){
    final int tail;
    if((tail=this.tail)!=-1){
#IF OfDouble
      final $BoxedType$ToIntFunction searchFunction;
      if(key instanceof Double){
        final double k;
        if((k=(double)key)==k){
          final long bits;
          if((bits=Double.doubleToRawLongBits(k))==0){
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
          }else if(bits==Long.MIN_VALUE){
            searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
          }else{
            searchFunction=getSearchFunction(k);
          }
        }else{
          return $BoxedType$.isNaN(arr[tail]);
        }
      }else if(key instanceof Integer || key instanceof Byte || key instanceof Short){
        final int k;
        if((k=((Number)key).intValue())==0){
          searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
        }else{
          searchFunction=getSearchFunction(k);
        }
      }else if(key instanceof Long){
        final long k;
        if(!TypeUtil.checkCastToDouble(k=(long)key)){
          return false;
        }
        if(k==0){
          searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
        }else{
          searchFunction=getSearchFunction(k);
        }
      }else if(key instanceof Float){
        final float k;
        if((k=(float)key)==k){
          switch(Float.floatToRawIntBits(k)){
            case 0xff800000:
              return arr[head]==$BoxedType$.NEGATIVE_INFINITY;
            case 0:
              searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
              break;
            case Integer.MIN_VALUE:
              searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
              break;
            default:
              searchFunction=getSearchFunction(k);
          }
        }else{
          return $BoxedType$.isNaN(arr[tail]);
        }
      }else if(key instanceof Character){
        final char k;
        if((k=(char)key)==0){
          searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
        }else{
          searchFunction=getSearchFunction(k);
        }
      }else if(key instanceof Boolean){
        if((boolean)key){
          searchFunction=getSearchFunction(1);
        }else{
          searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
        }
      }else{
        return false;
      }
      return super.uncheckedContainsMatch(head,tail,searchFunction);
#ELSEIF OfFloat
      final $BoxedType$ToIntFunction searchFunction;
      if(key instanceof Float){
        final float k;
        if((k=(float)key)==k){
          switch(Float.floatToRawIntBits(k)){
            case 0xff800000:
              return arr[head]==$BoxedType$.NEGATIVE_INFINITY;
            case 0:
              searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
              break;
            case Integer.MIN_VALUE:
              searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
              break;
            default:
              searchFunction=getSearchFunction(k);
          }
        }else{
          return $BoxedType$.isNaN(arr[tail]);
        }
      }else if(key instanceof Integer){
        final int k;
        if(!TypeUtil.checkCastToFloat(k=(int)key)){
          return false;
        }
        if(k==0){
          searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
        }else{
          searchFunction=getSearchFunction(k);
        }
      }else if(key instanceof Long){
        final long k;
        if(!TypeUtil.checkCastToFloat(k=(long)key)){
          return false;
        }
        if(k==0){
          searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
        }else{
          searchFunction=getSearchFunction(k);
        }
      }else if(key instanceof Double){
        final double d;
        final float k;
        if((d=(double)key)==(k=(float)d)){
          switch(Float.floatToRawIntBits(k)){
            case 0xff800000:
              return arr[head]==$BoxedType$.NEGATIVE_INFINITY;
            case 0:
              searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
              break;
            case Integer.MIN_VALUE:
              searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
              break;
            default:
              searchFunction=getSearchFunction(k);
          }
        }else{
          return k!=k && $BoxedType$.isNaN(arr[tail]);
        }
      }else if(key instanceof Byte || key instanceof Short){
        final short k;
        if((k=((Number)key).shortValue())==0){
          searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
        }else{
          searchFunction=getSearchFunction(k);
        }
      }else if(key instanceof Character){
        final char k;
        if((k=(char)key)==0){
          searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
        }else{
          searchFunction=getSearchFunction(k);
        }
      }else if(key instanceof Boolean){
        if((boolean)key){
          searchFunction=getSearchFunction(1);
        }else{
          searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
        }
      }else{
        return false;
      }
      return super.uncheckedContainsMatch(head,tail,searchFunction);
#ELSEIF OfLong
      final long l;
      if(key instanceof Long || key instanceof Integer || key instanceof Byte || key instanceof Short){
        l=((Number)key).longValue();
      }else if(key instanceof Float){
        final float k;
        if(!TypeUtil.floatEquals(k=(float)key,l=(long)k)){
          return false;
        }
      }else if(key instanceof Double){
        final double k;
        if(!TypeUtil.doubleEquals(k=(double)key,l=(long)k)){
          return false;
        }
      }else if(key instanceof Character){
        l=(char)key;
      }else if(key instanceof Boolean){
        l=$queryCastBoolean$((boolean)key);
      }else{
        return false;
      }
      return super.uncheckedContainsMatch(head,tail,getSearchFunction(l));
#ELSEIF OfInt
      final int i;
      if(key instanceof Integer || key instanceof Byte || key instanceof Short){
        i=((Number)key).intValue();
      }else if(key instanceof Long){
        final long l;
        if((l=(long)key)!=(i=(int)l)){
          return false;
        }
      }else if(key instanceof Float){
        final float f;
        if((double)(f=(float)key)!=(double)(i=(int)f)){
          return false;
        }
      }else if(key instanceof Double){
        final double d;
        if((d=(double)key)!=(i=(int)d)){
          return false;
        }
      }else if(key instanceof Character){
        i=(char)key;
      }else if(key instanceof Boolean){
        i=$queryCastBoolean$((boolean)key);
      }else{
        return false;
      }
      return super.uncheckedContainsMatch(head,tail,getSearchFunction(i));
#ELSEIF OfShort
      final int i;
      if(key instanceof Short || key instanceof Byte){
        i=((Number)key).shortValue();
      }else if(key instanceof Integer){
        if((i=(int)key)!=(short)i){
          return false;
        }
      }else if(key instanceof Long){
        final long l;
        if((l=(long)key)!=(i=(short)l)){
          return false;
        }
      }else if(key instanceof Float){
        final float f;
        if((f=(float)key)!=(i=(short)f)){
          return false;
        }
      }else if(key instanceof Double){
        final double d;
        if((d=(double)key)!=(i=(short)d)){
          return false;
        }
      }else if(key instanceof Character){
        if((i=(char)key)>$BoxedType$.MAX_VALUE){
          return false;
        }
      }else if(key instanceof Boolean){
        i=$queryCastBoolean$((boolean)key);
      }else{
        return false;
      }
      return super.uncheckedContainsMatch(head,tail,getSearchFunction(i));
#ELSEIF OfChar
      final int i;
      if(key instanceof Character){
        i=(char)key;
      }else if(key instanceof Integer || key instanceof Byte || key instanceof Short){
        if((i=((Number)key).intValue())!=(char)i){
          return false;
        }
      }else if(key instanceof Long){
        final long l;
        if((l=(long)key)!=(i=(char)l)){
          return false;
        }
      }else if(key instanceof Float){
        final float f;
        if((f=(float)key)!=(i=(char)f)){
          return false;
        }
      }else if(key instanceof Double){
        final double d;
        if((d=(double)key)!=(i=(char)d)){
          return false;
        }
      }else if(key instanceof Boolean){
        i=$queryCastBoolean$((boolean)key);
      }else{
        return false;
      }
      return super.uncheckedContainsMatch(head,tail,getSearchFunction(i));
#ELSE
      if(key instanceof Comparable){
        return super.uncheckedContainsMatch(head,tail,getSearchFunction(($exposedType$)key));
      }else if(key==null){
        return arr[tail]==null;
      }
#ENDIF
    }
    return false;
  }
  #IF OfComparable
  @SuppressWarnings("unchecked")
  #ENDIF
  @Override public boolean remove(Object key){
    final int tail;
    if((tail=this.tail)!=-1){
#IF OfDouble
      jumpToRemoveTail:for(;;){
        final $BoxedType$ToIntFunction searchFunction;
        if(key instanceof Double){
          final double k;
          if((k=(double)key)==k){
            final long bits;
            if((bits=Double.doubleToRawLongBits(k))==0){
              searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
            }else if(bits==Long.MIN_VALUE){
              searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
            }else{
              searchFunction=getSearchFunction(k);
            }
          }else{
            break jumpToRemoveTail;
          }
        }else if(key instanceof Integer || key instanceof Byte || key instanceof Short){
          final int k;
          if((k=((Number)key).intValue())==0){
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
          }else{
            searchFunction=getSearchFunction(k);
          }
        }else if(key instanceof Long){
          final long k;
          if(!TypeUtil.checkCastToDouble(k=(long)key)){
            return false;
          }
          if(k==0){
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
          }else{
            searchFunction=getSearchFunction(k);
          }
        }else if(key instanceof Float){
          final float k;
          if((k=(float)key)==k){
            switch(Float.floatToRawIntBits(k)){
              case 0xff800000:
                return arr[head]==$BoxedType$.NEGATIVE_INFINITY;
              case 0:
                searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
                break;
              case Integer.MIN_VALUE:
                searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
                break;
              default:
                searchFunction=getSearchFunction(k);
            }
          }else{
            break jumpToRemoveTail;
          }
        }else if(key instanceof Character){
          final char k;
          if((k=(char)key)==0){
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
          }else{
            searchFunction=getSearchFunction(k);
          }
        }else if(key instanceof Boolean){
          if((boolean)key){
            searchFunction=getSearchFunction(1);
          }else{
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
          }
        }else{
          return false;
        }
        return super.uncheckedRemoveMatch(tail,searchFunction);
      }
      final $ArrayType$[] arr;
      if($BoxedType$.isNaN((arr=this.arr)[tail])){
        switch(Integer.signum(tail-head)){
          case 0:
            this.tail=-1;
            break;
          case -1:
            if(tail==0){
              this.tail=arr.length-1;
              break;
            }
          default:
            this.tail=tail-1;
        }
        return true;
      }
      return false;
      
#ELSEIF OfFloat
      jumpToRemoveTail:for(;;){
        final $BoxedType$ToIntFunction searchFunction;
        if(key instanceof Float){
          final float k;
          if((k=(float)key)==k){
            switch(Float.floatToRawIntBits(k)){
              case 0xff800000:
                return arr[head]==$BoxedType$.NEGATIVE_INFINITY;
              case 0:
                searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
                break;
              case Integer.MIN_VALUE:
                searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
                break;
              default:
                searchFunction=getSearchFunction(k);
            }
          }else{
            break jumpToRemoveTail;
          }
        }else if(key instanceof Integer){
          final int k;
          if(!TypeUtil.checkCastToFloat(k=(int)key)){
            return false;
          }
          if(k==0){
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
          }else{
            searchFunction=getSearchFunction(k);
          }
        }else if(key instanceof Long){
          final long k;
          if(!TypeUtil.checkCastToFloat(k=(long)key)){
            return false;
          }
          if(k==0){
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
          }else{
            searchFunction=getSearchFunction(k);
          }
        }else if(key instanceof Double){
          final double d;
          final float k;
          if((d=(double)key)==(k=(float)d)){
            switch(Float.floatToRawIntBits(k)){
              case 0xff800000:
                return arr[head]==$BoxedType$.NEGATIVE_INFINITY;
              case 0:
                searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
                break;
              case Integer.MIN_VALUE:
                searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
                break;
              default:
                searchFunction=getSearchFunction(k);
            }
          }else if(k!=k){
            break jumpToRemoveTail;
          }else{
            return false;
          }
        }else if(key instanceof Byte || key instanceof Short){
          final short k;
          if((k=((Number)key).shortValue())==0){
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
          }else{
            searchFunction=getSearchFunction(k);
          }
        }else if(key instanceof Character){
          final char k;
          if((k=(char)key)==0){
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
          }else{
            searchFunction=getSearchFunction(k);
          }
        }else if(key instanceof Boolean){
          if((boolean)key){
            searchFunction=getSearchFunction(1);
          }else{
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
          }
        }else{
          return false;
        }
        return super.uncheckedRemoveMatch(tail,searchFunction);
      }
      final $ArrayType$[] arr;
      if($BoxedType$.isNaN((arr=this.arr)[tail])){
        switch(Integer.signum(tail-head)){
          case 0:
            this.tail=-1;
            break;
          case -1:
            if(tail==0){
              this.tail=arr.length-1;
              break;
            }
          default:
            this.tail=tail-1;
        }
        return true;
      }
      return false;
      
#ELSEIF OfLong
      final long l;
      if(key instanceof Long || key instanceof Integer || key instanceof Byte || key instanceof Short){
        l=((Number)key).longValue();
      }else if(key instanceof Float){
        final float k;
        if(!TypeUtil.floatEquals(k=(float)key,l=(long)k)){
          return false;
        }
      }else if(key instanceof Double){
        final double k;
        if(!TypeUtil.doubleEquals(k=(double)key,l=(long)k)){
          return false;
        }
      }else if(key instanceof Character){
        l=(char)key;
      }else if(key instanceof Boolean){
        l=$queryCastBoolean$((boolean)key);
      }else{
        return false;
      }
      return super.uncheckedRemoveMatch(tail,getSearchFunction(l));
#ELSEIF OfInt
      final int i;
      if(key instanceof Integer || key instanceof Byte || key instanceof Short){
        i=((Number)key).intValue();
      }else if(key instanceof Long){
        final long l;
        if((l=(long)key)!=(i=(int)l)){
          return false;
        }
      }else if(key instanceof Float){
        final float f;
        if((double)(f=(float)key)!=(double)(i=(int)f)){
          return false;
        }
      }else if(key instanceof Double){
        final double d;
        if((d=(double)key)!=(i=(int)d)){
          return false;
        }
      }else if(key instanceof Character){
        i=(char)key;
      }else if(key instanceof Boolean){
        i=$queryCastBoolean$((boolean)key);
      }else{
        return false;
      }
      return super.uncheckedRemoveMatch(tail,getSearchFunction(i));
#ELSEIF OfShort
      final int i;
      if(key instanceof Short || key instanceof Byte){
        i=((Number)key).shortValue();
      }else if(key instanceof Integer){
        if((i=(int)key)!=(short)i){
          return false;
        }
      }else if(key instanceof Long){
        final long l;
        if((l=(long)key)!=(i=(short)l)){
          return false;
        }
      }else if(key instanceof Float){
        final float f;
        if((f=(float)key)!=(i=(short)f)){
          return false;
        }
      }else if(key instanceof Double){
        final double d;
        if((d=(double)key)!=(i=(short)d)){
          return false;
        }
      }else if(key instanceof Character){
        if((i=(char)key)>$BoxedType$.MAX_VALUE){
          return false;
        }
      }else if(key instanceof Boolean){
        i=$queryCastBoolean$((boolean)key);
      }else{
        return false;
      }
      return super.uncheckedRemoveMatch(tail,getSearchFunction(i));
#ELSEIF OfChar
      final int i;
      if(key instanceof Character){
        i=(char)key;
      }else if(key instanceof Integer || key instanceof Byte || key instanceof Short){
        if((i=((Number)key).intValue())!=(char)i){
          return false;
        }
      }else if(key instanceof Long){
        final long l;
        if((l=(long)key)!=(i=(char)l)){
          return false;
        }
      }else if(key instanceof Float){
        final float f;
        if((f=(float)key)!=(i=(char)f)){
          return false;
        }
      }else if(key instanceof Double){
        final double d;
        if((d=(double)key)!=(i=(char)d)){
          return false;
        }
      }else if(key instanceof Boolean){
        i=$queryCastBoolean$((boolean)key);
      }else{
        return false;
      }
      return super.uncheckedRemoveMatch(tail,getSearchFunction(i));
#ELSE
      if(key instanceof Comparable){
        return super.uncheckedRemoveMatch(tail,getSearchFunction(($exposedType$)key));
      }else if(key==null){
        return uncheckedRemoveNull(tail);
      }
#ENDIF
    }
    return false;
  }
#IF OfComparable
  private boolean uncheckedRemoveNull(int tail){
    final $ArrayType$[] arr;
    if(((arr=this.arr)[tail])==null){
      switch(Integer.signum(tail-head)){
        case 0:
          this.tail=-1;
          break;
        case -1:
          if(tail==0){
            this.tail=arr.length-1;
            break;
          }
        default:
          this.tail=tail-1;
      }
      return true;
    }
    return false;
  }
  #MACRO ContainsAndRemoveBoxed(Boolean)
  #MACRO ContainsAndRemoveBoxed(Byte)
  #MACRO ContainsAndRemoveBoxed(Character)
  #MACRO ContainsAndRemoveBoxed(Short)
  #MACRO ContainsAndRemoveBoxed(Integer)
  #MACRO ContainsAndRemoveBoxed(Long)
  #MACRO ContainsAndRemoveBoxed(Float)
  #MACRO ContainsAndRemoveBoxed(Double)
#MACRODEF ContainsAndRemoveBoxed(PARAMTYPE)
#IF OfComparable
@SuppressWarnings("unchecked")
#ENDIF
@Override public boolean removeVal(PARAMTYPE key){
  final int tail;
  if((tail=this.tail)!=-1){
    if(key!=null){
      return super.uncheckedRemoveMatch(tail,getSearchFunction(($exposedType$)key));
    }
    return uncheckedRemoveNull(tail);
  }
  return false;
}
#IF OfComparable
@SuppressWarnings("unchecked")
#ENDIF
@Override public boolean contains(PARAMTYPE key){
  final int tail;
  if((tail=this.tail)!=-1){
    if(key!=null){
      return super.uncheckedContainsMatch(head,tail,getSearchFunction(($exposedType$)key));
    }
    return arr[tail]==null;
  }
  return false;
}
#ENDDEF
#ENDIF
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean contains(boolean key){
#IF OfChar,OfShort,OfInt,OfLong
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction($queryCastBoolean$(key)));
#ELSEIF OfFloat,OfDouble
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,key?getSearchFunction(1):$ClassPrefix$NavigableSetImpl::comparePos0);
#ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(($exposedType$)(Boolean)key));
#ENDIF
  }
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean removeVal(boolean key){
#IF OfChar,OfShort,OfInt,OfLong
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction($queryCastBoolean$(key)));
#ELSEIF OfFloat,OfDouble
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,key?getSearchFunction(1):$ClassPrefix$NavigableSetImpl::comparePos0);
#ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(($exposedType$)(Boolean)key));
#ENDIF
  }
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
#IFNOT OfDouble,OfFloat
  @Override public boolean contains(byte key){
  #IF OfChar
    final int tail;
    return key>=0 && (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(key));
  #ELSEIF OfShort,OfInt,OfLong
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(key));
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(($exposedType$)(Byte)key));
  #ENDIF
  }
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean removeVal(byte key){
  #IF OfChar
    final int tail;
    return key>=0 && (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(key));
  #ELSEIF OfShort,OfInt,OfLong
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(key));
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(($exposedType$)(Byte)key));
  #ENDIF
  }
#ENDIF
#IFNOT OfDouble
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean contains(char key){
  #IF OfChar,OfInt,OfLong
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(key));
  #ELSEIF OfShort
    final int tail;
    return key<=$BoxedType$.MAX_VALUE && (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(key));
  #ELSEIF OfFloat
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,key!=0?getSearchFunction(key):$ClassPrefix$NavigableSetImpl::comparePos0);
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(($exposedType$)(Character)key));
  #ENDIF
  }
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean removeVal(char key){
  #IF OfChar,OfInt,OfLong
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(key));
  #ELSEIF OfShort
    final int tail;
    return key<=$BoxedType$.MAX_VALUE && (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(key));
  #ELSEIF OfFloat
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,key!=0?getSearchFunction(key):$ClassPrefix$NavigableSetImpl::comparePos0);
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(($exposedType$)(Character)key));
  #ENDIF
  }
#ENDIF
#IFNOT OfDouble,OfInt
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean contains(short key){
  #IF OfChar
    final int tail;
    return key>=0 && (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(key));
  #ELSEIF OfShort,OfLong
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(key));
  #ELSEIF OfFloat
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,key!=0?getSearchFunction(key):$ClassPrefix$NavigableSetImpl::comparePos0);
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(($exposedType$)(Short)key));
  #ENDIF
  }
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean removeVal(short key){
  #IF OfChar
    final int tail;
    return key>=0 && (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(key));
  #ELSEIF OfShort,OfLong
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(key));
  #ELSEIF OfFloat
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,key!=0?getSearchFunction(key):$ClassPrefix$NavigableSetImpl::comparePos0);
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(($exposedType$)(Short)key));
  #ENDIF
  }
#ENDIF
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean contains(int key){
  #IF OfChar,OfShort
    final int tail;
    return key==($exposedType$)key && (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(key));
  #ELSEIF OfInt,OfLong
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(key));
  #ELSEIF OfFloat
    final int tail;
    return (tail=this.tail)!=-1 && TypeUtil.checkCastToFloat(key) && super.uncheckedContainsMatch(head,tail,key==0?$ClassPrefix$NavigableSetImpl::comparePos0:getSearchFunction(key));
  #ELSEIF OfDouble
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,key==0?$ClassPrefix$NavigableSetImpl::comparePos0:getSearchFunction(key));
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(($exposedType$)(Integer)key));
  #ENDIF
  }
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean removeVal(int key){
  #IF OfChar,OfShort
    final int tail;
    return key==($exposedType$)key && (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(key));
  #ELSEIF OfInt,OfLong
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(key));
  #ELSEIF OfFloat
    final int tail;
    return (tail=this.tail)!=-1 && TypeUtil.checkCastToFloat(key) && super.uncheckedRemoveMatch(tail,key==0?$ClassPrefix$NavigableSetImpl::comparePos0:getSearchFunction(key));
  #ELSEIF OfDouble
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,key==0?$ClassPrefix$NavigableSetImpl::comparePos0:getSearchFunction(key));
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(($exposedType$)(Integer)key));
  #ENDIF
  }
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean contains(long key){
  #IF OfChar,OfShort,OfInt
    final int tail;
    final int i;
    return (tail=this.tail)!=-1 && key==(i=($exposedType$)key) && super.uncheckedContainsMatch(head,tail,getSearchFunction(i));
  #ELSEIF OfLong
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(key));
  #ELSEIF OfFloat,OfDouble
    final int tail;
    return (tail=this.tail)!=-1 && TypeUtil.checkCastTo$BoxedType$(key) && super.uncheckedContainsMatch(head,tail,key==0?$ClassPrefix$NavigableSetImpl::comparePos0:getSearchFunction(key));
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(($exposedType$)(Long)key));
  #ENDIF
  }
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean removeVal(long key){
  #IF OfChar,OfShort,OfInt
    final int tail;
    final int i;
    return (tail=this.tail)!=-1 && key==(i=($exposedType$)key) && super.uncheckedRemoveMatch(tail,getSearchFunction(i));
  #ELSEIF OfLong
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(key));
  #ELSEIF OfFloat,OfDouble
    final int tail;
    return (tail=this.tail)!=-1 && TypeUtil.checkCastTo$BoxedType$(key) && super.uncheckedRemoveMatch(tail,key==0?$ClassPrefix$NavigableSetImpl::comparePos0:getSearchFunction(key));
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(($exposedType$)(Long)key));
  #ENDIF
  }
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean contains(float key){
  #IF OfChar,OfShort
    final int tail;
    final int i;
    return (tail=this.tail)!=-1 && key==(i=($exposedType$)key) && super.uncheckedContainsMatch(head,tail,getSearchFunction(i));
  #ELSEIF OfInt
    final int tail;
    final int i;
    return (tail=this.tail)!=-1 && (double)key==(double)(i=(int)key) && super.uncheckedContainsMatch(head,tail,getSearchFunction(i));
  #ELSEIF OfLong
    final int tail;
    final long l;
    return (tail=this.tail)!=-1 && TypeUtil.floatEquals(key,l=(long)key) && super.uncheckedContainsMatch(head,tail,getSearchFunction(l));
  #ELSEIF OfFloat,OfDouble
    final int tail;
    if((tail=this.tail)!=-1){
      if(key==key){
        final $BoxedType$ToIntFunction searchFunction;
        switch(Float.floatToRawIntBits(key)){
          case 0xff800000:
            return arr[head]==$BoxedType$.NEGATIVE_INFINITY;
          case 0:
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
            break;
          case Integer.MIN_VALUE:
            searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
            break;
          default:
            searchFunction=getSearchFunction(key);
        }
        return super.uncheckedContainsMatch(head,tail,searchFunction);
      }
      return $BoxedType$.isNaN(arr[tail]);
    }
    return false;
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(($exposedType$)(Float)key));
  #ENDIF
  }
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean removeVal(float key){
  #IF OfChar,OfShort
    final int tail;
    final int i;
    return (tail=this.tail)!=-1 && key==(i=($exposedType$)key) && super.uncheckedRemoveMatch(tail,getSearchFunction(i));
  #ELSEIF OfInt
    final int tail;
    final int i;
    return (tail=this.tail)!=-1 && (double)key==(double)(i=(int)key) && super.uncheckedRemoveMatch(tail,getSearchFunction(i));
  #ELSEIF OfLong
    final int tail;
    final long l;
    return (tail=this.tail)!=-1 && TypeUtil.floatEquals(key,l=(long)key) && super.uncheckedRemoveMatch(tail,getSearchFunction(l));
  #ELSEIF OfFloat,OfDouble
    final int tail;
    if((tail=this.tail)!=-1){
      if(key==key){
        final $BoxedType$ToIntFunction searchFunction;
        switch(Float.floatToRawIntBits(key)){
          case 0:
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
            break;
          case Integer.MIN_VALUE:
            searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
            break;
          default:
            searchFunction=getSearchFunction(key);
        }
        return super.uncheckedRemoveMatch(tail,searchFunction);
      }
      final $ArrayType$[] arr;
      if($BoxedType$.isNaN((arr=this.arr)[tail])){
        switch(Integer.signum(tail-head)){
          case 0:
            this.tail=-1;
            break;
          case -1:
            if(tail==0){
              this.tail=arr.length-1;
              break;
            }
          default:
            this.tail=tail-1;
        }
        return true;
      }
    }
    return false;
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(($exposedType$)(Float)key));
  #ENDIF
  }
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean contains(double key){
  #IF OfChar,OfShort,OfInt
    final int tail;
    final int i;
    return (tail=this.tail)!=-1 && key==(i=($exposedType$)key) && super.uncheckedContainsMatch(head,tail,getSearchFunction(i));
  #ELSEIF OfLong
    final int tail;
    final long l;
    return (tail=this.tail)!=-1 && TypeUtil.doubleEquals(key,l=(long)key) && super.uncheckedContainsMatch(head,tail,getSearchFunction(l));
  #ELSEIF OfFloat
    final int tail;
    if((tail=this.tail)!=-1){
      final float f;
      if((f=(float)key)==key){
        final $BoxedType$ToIntFunction searchFunction;
        switch(Float.floatToRawIntBits(f)){
          case 0xff800000:
            return arr[head]==$BoxedType$.NEGATIVE_INFINITY;
          case 0:
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
            break;
          case Integer.MIN_VALUE:
            searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
            break;
          default:
            searchFunction=getSearchFunction(f);
        }
        return super.uncheckedContainsMatch(head,tail,searchFunction);
      }
      return f!=f && $BoxedType$.isNaN(arr[tail]);
    }
    return false;
  #ELSEIF OfDouble
    final int tail;
    if((tail=this.tail)!=-1){
      if(key==key){
        final $BoxedType$ToIntFunction searchFunction;
        final long bits;
        if((bits=Double.doubleToRawLongBits(key))==0){
          searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
        }else if(bits==Long.MIN_VALUE){
          searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
        }else{
          searchFunction=getSearchFunction(key);
        }
        return super.uncheckedContainsMatch(head,tail,searchFunction);
      }
      return $BoxedType$.isNaN(arr[tail]);
    }
    return false;
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(head,tail,getSearchFunction(($exposedType$)(Double)key));
  #ENDIF
  }
#IF OfComparable
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public boolean removeVal(double key){
  #IF OfChar,OfShort,OfInt
    final int tail;
    final int i;
    return (tail=this.tail)!=-1 && key==(i=($exposedType$)key) && super.uncheckedRemoveMatch(tail,getSearchFunction(i));
  #ELSEIF OfLong
    final int tail;
    final long l;
    return (tail=this.tail)!=-1 && TypeUtil.doubleEquals(key,l=(long)key) && super.uncheckedRemoveMatch(tail,getSearchFunction(l));
  #ELSEIF OfFloat
    final int tail;
    if((tail=this.tail)!=-1){
      final float f;
      if((f=(float)key)==key){
        final $BoxedType$ToIntFunction searchFunction;
        switch(Float.floatToRawIntBits(f)){
          case 0:
            searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
            break;
          case Integer.MIN_VALUE:
            searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
            break;
          default:
            searchFunction=getSearchFunction(f);
        }
        return super.uncheckedRemoveMatch(tail,searchFunction);
      }
      else if(f!=f){
        final $ArrayType$[] arr;
        if($BoxedType$.isNaN((arr=this.arr)[tail])){
          switch(Integer.signum(tail-head)){
            case 0:
              this.tail=-1;
              break;
            case -1:
              if(tail==0){
                this.tail=arr.length-1;
                break;
              }
            default:
              this.tail=tail-1;
          }
          return true;
        }
      }
    }
    return false;
  #ELSEIF OfDouble
    final int tail;
    if((tail=this.tail)!=-1){
      if(key==key){
        final $BoxedType$ToIntFunction searchFunction;
        final long bits;
        if((bits=Double.doubleToRawLongBits(key))==0){
          searchFunction=$ClassPrefix$NavigableSetImpl::comparePos0;
        }else if(bits==Long.MIN_VALUE){
          searchFunction=$ClassPrefix$NavigableSetImpl::compareNeg0;
        }else{
          searchFunction=getSearchFunction(key);
        }
        return super.uncheckedRemoveMatch(tail,searchFunction);
      }
      final $ArrayType$[] arr;
      if($BoxedType$.isNaN((arr=this.arr)[tail])){
        switch(Integer.signum(tail-head)){
          case 0:
            this.tail=-1;
            break;
          case -1:
            if(tail==0){
              this.tail=arr.length-1;
              break;
            }
          default:
            this.tail=tail-1;
        }
        return true;
      }
    }
    return false;
  #ELSE
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,getSearchFunction(($exposedType$)(Double)key));
  #ENDIF
  }
  
  

#IF OfComparable
  public static class Ascending<E extends Comparable<E>> extends $ClassPrefix$NavigableSetImpl$<E>$ implements Cloneable
#ELSE
  public static class Ascending$<E>$ extends $ClassPrefix$NavigableSetImpl$<E>$ implements Cloneable
#ENDIF
  {
    #MACRO AscendingDescendingBody<Ascending>()

  }
#IF OfComparable
  public static class Descending<E extends Comparable<E>> extends $ClassPrefix$NavigableSetImpl$<E>$ implements Cloneable
#ELSE
  public static class Descending$<E>$ extends $ClassPrefix$NavigableSetImpl$<E>$ implements Cloneable
#ENDIF
  {
    #MACRO AscendingDescendingBody<Descending>()

  }
}
#MACRODEF AscendingDescendingBody<DIRECTION>()
public DIRECTION(){
  super();
}
public DIRECTION(int head,$ArrayType$[] arr,int tail){
  super(head,arr,tail);
}
@Override public $TypeNameModifier$Comparator$<E>$ comparator(){
#IFSWITCH DIRECTION==Ascending
  #IF OfComparable
  return Comparator.nullsLast(Comparable::compareTo);
  #ELSE
  return $BoxedType$::compare;
  #ENDIF
#ELSE
  #IF OfComparable
  return Comparator.nullsFirst(Collections.reverseOrder());
  #ELSE
  return $TypeNameModifier$Comparator::descendingCompare;
  #ENDIF
#ENDIF
}
#IF OfComparable
@SuppressWarnings("unchecked")
#ENDIF
@Override public $exposedType$ first$TypeNameModifier$(){
#IFSWITCH DIRECTION==Ascending
  return ($exposedType$)arr[head];
#ELSE
  return ($exposedType$)arr[tail];
#ENDIF
}
#IF OfComparable
@SuppressWarnings("unchecked")
#ENDIF
@Override public $exposedType$ last$TypeNameModifier$(){
#IFSWITCH DIRECTION==Ascending
  return ($exposedType$)arr[tail];
#ELSE
  return ($exposedType$)arr[head];
#ENDIF
}
#IF OfComparable
@Override public OmniNavigableSet.OfRef<E> descendingSet(){
#ELSE
@Override public OmniNavigableSet.Of$ClassPrefix$ descendingSet(){
#ENDIF
  //TODO
  throw new omni.util.NotYetImplementedException();
}

#IF OfComparable
@Override public OmniIterator.OfRef<E> descendingIterator(){
#ELSE
@Override public OmniIterator.Of$ClassPrefix$ descendingIterator(){
#ENDIF
  //TODO
  throw new omni.util.NotYetImplementedException();
}

#IF OfComparable
@Override public OmniNavigableSet.OfRef<E> headSet($exposedType$ toElement){
#ELSE
@Override public OmniNavigableSet.Of$ClassPrefix$ headSet($exposedType$ toElement){
#ENDIF
  //TODO
  throw new omni.util.NotYetImplementedException();
}
#IF OfComparable
@Override public OmniNavigableSet.OfRef<E> headSet($exposedType$ toElement,boolean inclusive){
#ELSE
@Override public OmniNavigableSet.Of$ClassPrefix$ headSet($exposedType$ toElement,boolean inclusive){
#ENDIF
  //TODO
  throw new omni.util.NotYetImplementedException();
}
#IFNOT OfComparable
@Override public OmniNavigableSet.Of$ClassPrefix$ headSet($BoxedType$ toElement){
  //TODO
  throw new omni.util.NotYetImplementedException();
}
#ENDIF

#IF OfComparable
@Override public OmniNavigableSet.OfRef<E> tailSet($exposedType$ fromElement){
#ELSE
@Override public OmniNavigableSet.Of$ClassPrefix$ tailSet($exposedType$ fromElement){
#ENDIF
  //TODO
  throw new omni.util.NotYetImplementedException();
}
#IF OfComparable
@Override public OmniNavigableSet.OfRef<E> tailSet($exposedType$ fromElement,boolean inclusive){
#ELSE
@Override public OmniNavigableSet.Of$ClassPrefix$ tailSet($exposedType$ fromElement,boolean inclusive){
#ENDIF
  //TODO
  throw new omni.util.NotYetImplementedException();
}
#IFNOT OfComparable
@Override public OmniNavigableSet.Of$ClassPrefix$ tailSet($BoxedType$ fromElement){
  //TODO
  throw new omni.util.NotYetImplementedException();
}
#ENDIF

#IF OfComparable
@Override public OmniNavigableSet.OfRef<E> subSet($exposedType$ fromElement,$exposedType$ toElement){
#ELSE
@Override public OmniNavigableSet.Of$ClassPrefix$ subSet($exposedType$ fromElement,$exposedType$ toElement){
#ENDIF
  //TODO
  throw new omni.util.NotYetImplementedException();
}
#IF OfComparable
@Override public OmniNavigableSet.OfRef<E> subSet($exposedType$ fromElement,boolean inclusiveFrom,$exposedType$ toElement,boolean inclusiveTo){
#ELSE
@Override public OmniNavigableSet.Of$ClassPrefix$ subSet($exposedType$ fromElement,boolean inclusiveFrom,$exposedType$ toElement,boolean inclusiveTo){
#ENDIF
  //TODO
  throw new omni.util.NotYetImplementedException();
}
#IFNOT OfComparable
@Override public OmniNavigableSet.Of$ClassPrefix$ subSet($BoxedType$ fromElement,$BoxedType$ toElement){
  //TODO
  throw new omni.util.NotYetImplementedException();
}
#ENDIF

#IF OfComparable
@SuppressWarnings("unchecked")
#ENDIF
@Override public Object clone(){
  int tail;
  if((tail=this.tail)!=-1){
    final $ArrayType$[] dst;
    final int head,cloneTail;
    int size;
    if((size=(++tail)-(head=this.head))>0){
      ArrCopy.uncheckedCopy(arr,head,dst=$NewArray$[size],0,size);
      cloneTail=size-1;
    }else{
      final $ArrayType$[] arr;
      dst=$NewArray$[size+=(arr=this.arr).length];
      cloneTail=size-1;
      ArrCopy.uncheckedCopy(arr,0,dst,size-=tail,tail);
      ArrCopy.uncheckedCopy(arr,head,dst,0,size);
    }
    return new DIRECTION$<E>$(0,dst,cloneTail);
  }
  return new DIRECTION$<E>$();
}

#ENDDEF




