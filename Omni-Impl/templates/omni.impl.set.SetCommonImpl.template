#TYPEDEF OfGeneric
package omni.impl.set;
interface SetCommonImpl{
  //TODO move quickInsert to here
  static int tableHash(int val){
    return val^(val>>>16);
  }
  static int tableHash(long val){
    return tableHash(Long.hashCode(val));
  }
  static int tableHash(Object val){
    return tableHash(val.hashCode());
  }
  static int size(long word0,long word1,long word2,long word3){
    return Long.bitCount(word0)+Long.bitCount(word1)+Long.bitCount(word2)+Long.bitCount(word3);
  }
  #MACRO QuickInsert<char>(0)
  #MACRO QuickInsert<short>(0)
  #MACRO QuickInsert<int>(0)
  #MACRO QuickInsert<long>(0L)
  #MACRO QuickInsert<Object>(null)
#MACRODEF QuickInsert<ARRTYPE>(EMPTYVAL)
static void quickInsert(ARRTYPE val,ARRTYPE[] table,int tableLength,int hash){
  while(table[hash]!=EMPTYVAL){
    hash=(hash+1)&tableLength;
  }
  table[hash]=val;
}
#ENDDEF
/*
  static boolean isEqualTo(int booleanState,RefOpenAddressHashSet<?> thatSet){
     switch(booleanState){
       case 0b00:
         return thatSet.size==0;
       case 0b01:
         final Object[] table;
         final int tableLength;
         return thatSet.size==1
           && tableContains(Boolean.FALSE,table=thatSet.table,tableLength=table.length-1,tableLength&1237);
       case 0b10:
         return thatSet.size==1
           && tableContains(Boolean.TRUE,table=thatSet.table,tableLength=table.length-1,tableLength&1231);
       default:
         return thatSet.size==2
           && tableContains(Boolean.FALSE,table=thatSet.table,tableLength=table.length-1,tableLength&1237)
           && tableContains(Boolean.TRUE,table,tableLength,tableLength&1231);
     }
  }
  static boolean isEqualTo(int booleanState,Set<?> thatSet){
    for(final var val:thatSet){
      if(!(val instanceof Boolean)){
        return false;
      }
      if((boolean)val){
        if(booleanState==(booleanState&=0b01)){
          return false;
        }
      }else{
        if(booleanState==(booleanState&=0b10)){
          return false;
        }
      }
    }
    return booleanState==0b00;
  }
  static boolean isEqualTo(ByteSetImpl byteSet,RefOpenAddressHashSet<?> refSet){
    final long word0,word1,word2,word3;
    int size;
    if(refSet.size==(size=size(word0=byteSet.word0,word1=byteSet.word1,word2=byteSet.word2,word3=byteSet.word3))) {
      if(size==0){
        return true;
      }
      final var refTable=refSet.table;
      goToReturnFalse:for(int tableIndex=0;;++tableIndex){
        final Object val;
        if((val=refTable[tableIndex])!=null && val!=RefOpenAddressHashSet.DELETED) {
          if(!(val instanceof Byte)) {
            break;
          }
          final byte v;
          goToHasNext:switch((v=(byte)val)>>6) {
          #MACRO WordsContain(case -2,case -1,case 0,default)
          }
          if(--size==0) {
            return true;
          }
        }
      }
    }
    return false;
  }
  static boolean isEqualTo(int byteSetSize,ByteSetImpl.Checked byteSet,Object[] refTable){
    final long word0=byteSet.word0,word1=byteSet.word1,word2=byteSet.word2,word3=byteSet.word3;
    goToReturnFalse:for(int tableIndex=0;;++tableIndex){
      final Object val;
      if((val=refTable[tableIndex])!=null && val!=RefOpenAddressHashSet.DELETED) {
        if(!(val instanceof Byte)) {
          break;
        }
        final byte v;
        goToHasNext:switch((v=(byte)val)>>6) {
        #MACRO WordsContain(case -2,case -1,case 0,default)
        }
        if(--byteSetSize==0) {
          return true;
        }
      }
    }
    return false;
  }
  static boolean isEqualTo(ByteSetImpl byteSet,Set<?> thatSet){
    final long word0,word1,word2,word3;
    int size;
    if(thatSet.size()==(size=size(word0=byteSet.word0,word1=byteSet.word1,word2=byteSet.word2,word3=byteSet.word3))) {
      goToReturnFalse:for(;;){
        for(final var val:thatSet){
          if(!(val instanceof Byte)){
            return false;
          }
          final byte v;
          goToHasNext:switch((v=(byte)val)>>6){
          #MACRO WordsContain(case -2,case -1,case 0,default)
          }
        }
        return true;
      }
    }
    return false;
  }
  static boolean isEqualTo(int size,ByteSetImpl.Checked byteSet,Set<?> thatSet){
    final Iterator<?> itr;
    if((itr=thatSet.iterator()).hasNext()){
      goToReturnFalse:for(;;){
        Object val;
        if(size==thatSet.size() && (val=itr.next()) instanceof Byte){
          final long word0=byteSet.word0,word1=byteSet.word1,word2=byteSet.word2,word3=byteSet.word3;
          do{
            final byte v;
            goToHasNext:switch((v=(byte)val)>>6){
            #MACRO WordsContain(case -2,case -1,case 0,default)
            }
            if(!itr.hasNext()){
              return true;
            }
          }while((val=itr.next()) instanceof Byte);
        }
        break;
      }
      return false;
    }
    return size==0;
  }

  


  #MACRO PrimitiveOpenAddressHashSetEqualsSet<Char>(char,Character)
  #MACRO PrimitiveOpenAddressHashSetEqualsSet<Short>(short,Short)
  #MACRO PrimitiveOpenAddressHashSetEqualsSet<Int>(int,Integer)
  #MACRO PrimitiveOpenAddressHashSetEqualsSet<Long>(long,Long)
  #MACRO PrimitiveOpenAddressHashSetEqualsSet<Float>(int,Float)
  #MACRO PrimitiveOpenAddressHashSetEqualsSet<Double>(long,Double)
  static boolean isEqualTo(int size,RefOpenAddressHashSet thisSet,Set<?> thatSet){
    final Iterator<?> itr;
    if((itr=thatSet.iterator()).hasNext()){
      if(size==thatSet.size()){
        final Object[] table;
        for(final int tableLength=(table=thisSet.table).length-1;;){
          Object val;
          final int hash;
          if((val=itr.next())==null){
            hash=RefOpenAddressHashSet.NULLHASH;
            val=RefOpenAddressHashSet.NULL;
          }else{
            hash=tableHash(val);
          }
          if(!tableContains(val,table,tableLength,hash&tableLength)){
            break;
          }
          if(!itr.hasNext()){
            return true;
          }
        }
      }
      return false;
    }
    return size==0;
  }
  
  static boolean isEqualTo(int refSize,Object[] refTable,int booleanState){
    switch(booleanState){
    case 0b01:
      final int tableLength;
      return refSize==1 && SetCommonImpl.tableContains(Boolean.FALSE,refTable,tableLength=refTable.length-1,tableLength&1237);
    case 0b10:
      return refSize==1 && SetCommonImpl.tableContains(Boolean.TRUE,refTable,tableLength=refTable.length-1,tableLength&1231);
    default:
      return refSize==2 && SetCommonImpl.tableContains(Boolean.FALSE,refTable,tableLength=refTable.length-1,tableLength&1237)&&SetCommonImpl.tableContains(Boolean.TRUE,refTable,tableLength,tableLength&1231);
    }
  }
  
  */
  

  #MACRO TableContains<Ref>(Object,null)
  #MACRO TableContains<Long>(long,0L)
  #MACRO TableContains<Int>(int,0)
  #MACRO TableContains<Short>(short,0)
  #MACRO TableContains<Char>(char,0)
    /*
  #MACRO SetContainsAllWord<Byte>(byte,int)
  #MACRO SetContainsAllWord<Char>(char,int)
  #MACRO SetContainsAllWord<Short>(short,int)
  #MACRO SetContainsAllWord<Int>(int,int)
  #MACRO SetContainsAllWord<Long>(long,long)
  
  
#MACRODEF SetContainsAllWord<CLASSPREFIX>(EXPOSEDTYPE,OFFSETTYPE)
private static int setContainsAllCLASSPREFIXWord(long word,Set<?> thatSet,OFFSETTYPE offset,OFFSETTYPE bound,int numLeft){
    do{
      if(((word>>>offset)&1L)!=0){
        if(!thatSet.contains((EXPOSEDTYPE)offset)){
          return -1;
        }
        if(--numLeft==0){
          break;
        }
      }
    }while(++offset!=bound);
    return numLeft;
  }
#ENDDEF
*/
}
#MACRODEF PrimitiveOpenAddressHashSetEqualsSet<CLASSPREFIX>(ARRTYPE,BOXED_TYPE)
static boolean isEqualTo(int size,CLASSPREFIXOpenAddressHashSet thisSet,RefOpenAddressHashSet<?> thatSet){
#IFSWITCH CLASSPREFIX==Long,Int,Short,Char
  final long word0=thisSet.word0,word1=thisSet.word1,word2=thisSet.word2,word3=thisSet.word3;
#ENDIF
  final ARRTYPE[] thisTable;
  final int thisTableLength=(thisTable=thisSet.table).length-1;
  final Object[] thatTable=thatSet.table;
  goToReturnFalse:for(int tableIndex=0;;++tableIndex){
    final Object val;
    if((val=thisTable[tableIndex])!=null && val!=RefOpenAddressHashSet.DELETED) {
      if(!(val instanceof BOXED_TYPE)){
        break;
      }
#IFSWITCH CLASSPREFIX==Long,Int,Short,Char
  #IFSWITCH CLASSPREFIX==Long
      goToHasNext:for(;;){
        final int v;
        final ARRTYPE l;
        if((l=(ARRTYPE)val)==(v=(int)l)){
          switch(v>>6){
          #MACRO WordsContain(case -2,case -1,case 0,case 1)
          default:
          }
        }
        if(tableContains(l,thisTable,thisTableLength,Long.hashCode(l)&thisTableLength)) {
  #ELSE
      final ARRTYPE v;
      goToHasNext:switch((v=(ARRTYPE)val)>>6) {
    #IFSWITCH CLASSPREFIX==Char
      #MACRO WordsContain(case 0,case 1,case 2,case 3)
    #ELSE
      #MACRO WordsContain(case -2,case -1,case 0,case 1)
    #ENDIF
      default:
        if(tableContains(v,thisTable,thisTableLength,v&thisTableLength)) {
  #ENDIF
          break;
        }
        break goToReturnFalse;
      }
#ELSEIFSWITCH CLASSPREFIX==Float
      final int hash;
      ARRTYPE bits;
      final float f;
      if((f=(float)val)==f){
        if((bits=Float.floatToRawIntBits(f))==0){
          bits=0xffe00000;
          hash=0xffe00000^(0xffe00000 >>> 16);
        }else{
          hash=tableHash(bits);
        }
      }else{
        bits=0x7fc00000;
        hash=0x7fc00000 ^ (0x7fc00000 >>> 16);
      }
      if(!tableContains(bits,thisTable,thisTableLength,hash&thisTableLength)){
        break goToReturnFalse;
      }
#ELSEIFSWITCH CLASSPREFIX==Double
      final int hash;
      ARRTYPE bits;
      final double d;
      if((d=(double)val)==d){
        if((bits=Double.doubleToRawLongBits(d))==0L){
          bits=0xfffc000000000000L;
          hash=(int)(0xfffc000000000000L ^ 0xfffc000000000000L >>> 32) ^ (int)(0xfffc000000000000L ^ 0xfffc000000000000L >>> 32) >>> 16;
        }else{
          hash=tableHash(bits);
        }
      }else{
        bits=0x7ff8000000000000L;
        hash=(int)(0x7ff8000000000000L ^ 0x7ff8000000000000L >>> 32) ^ (int)(0x7ff8000000000000L ^ 0x7ff8000000000000L >>> 32) >>> 16;
      }
      if(!tableContains(bits,thisTable,thisTableLength,hash&thisTableLength)){
        break goToReturnFalse;
      }
#ELSE
ERROR unknown class prefix CLASSPREFIX
#ENDIF
      if(--size==0) {
        return true;
      }
    }
  }
  return false;
}
static boolean isEqualTo(int size,CLASSPREFIXOpenAddressHashSet thisSet,Set<?> thatSet){
  final Iterator<?> itr;
  if((itr=thatSet.iterator()).hasNext()){
    Object val;
    if(size==thatSet.size() && (val=itr.next()) instanceof BOXED_TYPE){
#IFSWITCH CLASSPREFIX==Long,Int,Short,Char
      final long word0=thisSet.word0,word1=thisSet.word1,word2=thisSet.word2,word3=thisSet.word3;
#ENDIF
      final ARRTYPE[] thisTable;
      final int thisTableLength=(thisTable=thisSet.table).length-1;
      goToReturnFalse:do{
#IFSWITCH CLASSPREFIX==Long,Int,Short,Char
  #IFSWITCH CLASSPREFIX==Long
        goToHasNext:for(;;){
          final int v;
          final ARRTYPE l;
          if((l=(ARRTYPE)val)==(v=(int)l)){
            switch(v>>6){
            #MACRO WordsContain(case -2,case -1,case 0,case 1)
            default:
            }
          }
          if(tableContains(l,thisTable,thisTableLength,Long.hashCode(l)&thisTableLength)) {
  #ELSE
        final ARRTYPE v;
        goToHasNext:switch((v=(ARRTYPE)val)>>6) {
    #IFSWITCH CLASSPREFIX==Char
        #MACRO WordsContain(case 0,case 1,case 2,case 3)
    #ELSE
        #MACRO WordsContain(case -2,case -1,case 0,case 1)
    #ENDIF
        default:
          if(tableContains(v,thisTable,thisTableLength,v&thisTableLength)) {
  #ENDIF
            break;
          }
          break goToReturnFalse;
        }
#ELSEIFSWITCH CLASSPREFIX==Float
        final int hash;
        ARRTYPE bits;
        final float f;
        if((f=(float)val)==f){
          if((bits=Float.floatToRawIntBits(f))==0){
            bits=0xffe00000;
            hash=0xffe00000^(0xffe00000 >>> 16);
          }else{
            hash=tableHash(bits);
          }
        }else{
          bits=0x7fc00000;
          hash=0x7fc00000 ^ (0x7fc00000 >>> 16);
        }
        if(!tableContains(bits,thisTable,thisTableLength,hash&thisTableLength)){
          break goToReturnFalse;
        }
#ELSEIFSWITCH CLASSPREFIX==Double
        final int hash;
        ARRTYPE bits;
        final double d;
        if((d=(double)val)==d){
          if((bits=Double.doubleToRawLongBits(d))==0L){
            bits=0xfffc000000000000L;
            hash=(int)(0xfffc000000000000L ^ 0xfffc000000000000L >>> 32) ^ (int)(0xfffc000000000000L ^ 0xfffc000000000000L >>> 32) >>> 16;
          }else{
            hash=tableHash(bits);
          }
        }else{
          bits=0x7ff8000000000000L;
          hash=(int)(0x7ff8000000000000L ^ 0x7ff8000000000000L >>> 32) ^ (int)(0x7ff8000000000000L ^ 0x7ff8000000000000L >>> 32) >>> 16;
        }
        if(!tableContains(bits,thisTable,thisTableLength,hash&thisTableLength)){
          break goToReturnFalse;
        }
#ELSE
ERROR unknown class prefix CLASSPREFIX
#ENDIF
        if(!itr.hasNext()){
          return true;
        }
      }while((val=itr.next()) instanceof BOXED_TYPE);
    }
    return false;
  }
  return size==0;
}
#ENDDEF
#MACRODEF WordsContain(word0Case,word1Case,word2Case,word3Case)
word0Case:
     if((word0>>>v&1L)==0) {
         break goToReturnFalse;
     }
     break goToHasNext;
word1Case:
     if((word1>>>v&1L)==0) {
         break goToReturnFalse;
     }
     break goToHasNext;
word2Case:
     if((word2>>>v&1L)==0) {
         break goToReturnFalse;
     }
     break goToHasNext;
word3Case:
     if((word3>>>v&1L)==0) {
         break goToReturnFalse;
     }
     break goToHasNext;
#ENDDEF
#MACRODEF TableContains<CLASSPREFIX>(ARRTYPE,EMPTYVAL)
static boolean tableContains(ARRTYPE val,ARRTYPE[] table,int tableLength,int hash){
  ARRTYPE tableVal;
  if((tableVal=table[hash])!=EMPTYVAL){
    final int initialHash=hash;
    do{
#IFSWITCH CLASSPREFIX==Ref
      if(val.equals(tableVal)){
#ELSE
      if(val==tableVal){
#ENDIF
        return true;
      }
    }while((hash=(hash+1)&tableLength)!=initialHash&&(tableVal=table[hash])!=EMPTYVAL);
  }
  return false;
}
#ENDDEF
