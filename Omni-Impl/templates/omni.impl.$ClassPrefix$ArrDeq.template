#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl;
import omni.api.OmniDeque;
import omni.api.OmniIterator;
import omni.util.ArrCopy;
import omni.util.TypeUtil;

#IF OfDouble
import java.util.function.$TypeNameModifier$Predicate;
#ENDIF
#IF OfFloat
import omni.function.$TypeNameModifier$Predicate;
#ENDIF
public class $ClassPrefix$ArrDeq$<E>$ extends $ClassPrefix$UntetheredArrSeq$<E>$ implements OmniDeque.Of$ClassPrefix$$<E>$
{
  $ClassPrefix$ArrDeq(int head,$ArrayType$[] arr,int tail){
    super(head,arr,tail);
  }
  $ClassPrefix$ArrDeq(){
    super();
  }
  @Override public boolean add($exposedType$ val){
    super.addLast(val);
    return true;
  }
#IF OfRef
  @Override public void addFirst($exposedType$ val){
    super.push(val);
  }
#ENDIF
  @Override public boolean offer($exposedType$ val){
    super.addLast(val);
    return true;
  }
  @Override public boolean offerFirst($exposedType$ val){
    super.push(val);
    return true;
  }
  @Override public boolean offerLast($exposedType$ val){
    super.addLast(val);
    return true;
  }
#IF OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public boolean add(boolean val){
    super.addLast(($exposedType$)$queryCastBoolean$(val));
    return true;
  }
#ENDIF
#IF OfShort,OfInt,OfLong
  @Override public boolean add(byte val){
    super.addLast(($exposedType$)(val));
    return true;
  }
#ENDIF
#IF OfFloat
  @Override public boolean add(short val){
    super.addLast(($exposedType$)(val));
    return true;
  }
#ENDIF
#IF OfInt,OfLong,OfFloat
  @Override public boolean add(char val){
    super.addLast(($exposedType$)(val));
    return true;
  }
#ENDIF
#IF OfLong,OfFloat,OfDouble
  @Override public boolean add(int val){
    super.addLast(($exposedType$)(val));
    return true;
  }
#ENDIF
#IF OfFloat,OfDouble
  @Override public boolean add(long val){
    super.addLast(($exposedType$)(val));
    return true;
  }
#ENDIF
#IF OfDouble
  @Override public boolean add(float val){
    super.addLast(($exposedType$)(val));
    return true;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public boolean add($BoxedType$ val){
    super.addLast(($exposedType$)val);
    return true;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public void addFirst($BoxedType$ val){
    super.push(($exposedType$)val);
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public void addLast($BoxedType$ val){
    super.addLast(($exposedType$)val);
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public boolean offer($BoxedType$ val){
    super.addLast(($exposedType$)val);
    return true;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public boolean offerFirst($BoxedType$ val){
    super.push(($exposedType$)val);
    return true;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public boolean offerLast($BoxedType$ val){
    super.addLast(($exposedType$)val);
    return true;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public void push($BoxedType$ val){
    super.push(($exposedType$)val);
  }
#ENDIF
#IF OfRef
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public $exposedType$ $elementMethod$(){
    return ($exposedType$)arr[head];
  }
#IF OfRef
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public $exposedType$ getLast$TypeNameModifier$(){
    return ($exposedType$)arr[tail];
  }
#IF OfRef
  @SuppressWarnings("unchecked")
  @Override public $exposedType$ getFirst$TypeNameModifier$(){
    return ($exposedType$)arr[head];
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public $BoxedType$ element(){
    return ($exposedType$)arr[head];
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public $BoxedType$ getFirst(){
    return ($exposedType$)arr[head];
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public $BoxedType$ getLast(){
    return ($exposedType$)arr[tail];
  }
#ENDIF
#IF OfRef
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public $exposedType$ peek$TypeNameModifier$(){
    if(this.tail!=-1){
      return ($exposedType$)arr[head];
    }
    return $defaultVal$;
  }
#IF OfRef
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public $exposedType$ peekLast$TypeNameModifier$(){
    final int tail;
    if((tail=this.tail)!=-1){
      return ($exposedType$)arr[tail];
    }
    return $defaultVal$;
  }
#IF OfRef
  @SuppressWarnings("unchecked")
  @Override public $exposedType$ peekFirst$TypeNameModifier$(){
    if(this.tail!=-1){
      return ($exposedType$)arr[head];
    }
    return $defaultVal$;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public $BoxedType$ peek(){
    if(this.tail!=-1){
      return ($BoxedType$)(arr[head]);
    }
    return null;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public $BoxedType$ peekFirst(){
    if(this.tail!=-1){
      return ($BoxedType$)(arr[head]);
    }
    return null;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public $BoxedType$ peekLast(){
    final int tail;
    if((tail=this.tail)!=-1){
      return ($BoxedType$)(arr[tail]);
    }
    return null;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat
  @Override public double peekDouble(){
    if(this.tail!=-1){
      return $castToDouble$(arr[head]);
    }
    return Double.NaN;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat
  @Override public double peekLastDouble(){
    final int tail;
    if((tail=this.tail)!=-1){
      return $castToDouble$(arr[tail]);
    }
    return Double.NaN;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong
  @Override public float peekFloat(){
    if(this.tail!=-1){
      return $castToFloat$(arr[head]);
    }
    return Float.NaN;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong
  @Override public float peekLastFloat(){
    final int tail;
    if((tail=this.tail)!=-1){
      return $castToFloat$(arr[tail]);
    }
    return Float.NaN;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt
  @Override public long peekLong(){
    if(this.tail!=-1){
      return $castToLong$(arr[head]);
    }
    return Long.MIN_VALUE;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt
  @Override public long peekLastLong(){
    final int tail;
    if((tail=this.tail)!=-1){
      return $castToLong$(arr[tail]);
    }
    return Long.MIN_VALUE;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort
  @Override public int peekInt(){
    if(this.tail!=-1){
      return $castToInt$(arr[head]);
    }
    return Integer.MIN_VALUE;
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort
  @Override public int peekLastInt(){
    final int tail;
    if((tail=this.tail)!=-1){
      return $castToInt$(arr[tail]);
    }
    return Integer.MIN_VALUE;
  }
#ENDIF
#IF OfBoolean,OfByte
  @Override public short peekShort(){
    if(this.tail!=-1){
      return $castToShort$(arr[head]);
    }
    return Short.MIN_VALUE;
  }
#ENDIF
#IF OfBoolean,OfByte
  @Override public short peekLastShort(){
    final int tail;
    if((tail=this.tail)!=-1){
      return $castToShort$(arr[tail]);
    }
    return Short.MIN_VALUE;
  }
#ENDIF
#IF OfBoolean
  @Override public char peekChar(){
    if(this.tail!=-1){
      return $castToChar$(arr[head]);
    }
    return Character.MIN_VALUE;
  }
#ENDIF
#IF OfBoolean
  @Override public char peekLastChar(){
    final int tail;
    if((tail=this.tail)!=-1){
      return $castToChar$(arr[tail]);
    }
    return Character.MIN_VALUE;
  }
#ENDIF
#IF OfBoolean
  @Override public byte peekByte(){
    if(this.tail!=-1){
      return $castToByte$(arr[head]);
    }
    return Byte.MIN_VALUE;
  }
#ENDIF
#IF OfBoolean
  @Override public byte peekLastByte(){
    final int tail;
    if((tail=this.tail)!=-1){
      return $castToByte$(arr[tail]);
    }
    return Byte.MIN_VALUE;
  }
#ENDIF


#IF OfRef
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public $exposedType$ pop$TypeNameModifier$(){
    return ($exposedType$)super.uncheckedRemoveFirst(this.tail);
  }
#IF OfRef
  @SuppressWarnings("unchecked")
#ENDIF
  @Override public $exposedType$ removeLast$TypeNameModifier$(){
    return ($exposedType$)super.uncheckedRemoveLast(this.tail);
  }
#IF OfRef
  @SuppressWarnings("unchecked")
  @Override public $exposedType$ remove(){
    return ($exposedType$)super.uncheckedRemoveFirst(this.tail);
  }
  @SuppressWarnings("unchecked")
  @Override public $exposedType$ removeFirst(){
    return ($exposedType$)super.uncheckedRemoveFirst(this.tail);
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public $BoxedType$ pop(){
    return ($BoxedType$)super.uncheckedRemoveFirst(this.tail);
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public $BoxedType$ remove(){
    return super.uncheckedRemoveFirst(this.tail);
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public $BoxedType$ removeFirst(){
    return super.uncheckedRemoveFirst(this.tail);
  }
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  @Override public $BoxedType$ removeLast(){
    return super.uncheckedRemoveLast(this.tail);
  }
#ENDIF

  #MACRO QueryImpl<boolean,contains,boolean,uncheckedContainsMatch>(false)
#IF OfByte,OfChar,OfShort,OfInt,OfLong,OfRef
  #MACRO QueryImpl<byte,contains,boolean,uncheckedContainsMatch>(false)
#ENDIF
#IF OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfRef
  #MACRO QueryImpl<char,contains,boolean,uncheckedContainsMatch>(false)
#ENDIF
#IF OfChar,OfShort,OfFloat,OfRef
  #MACRO QueryImpl<short,contains,boolean,uncheckedContainsMatch>(false)
#ENDIF
  #MACRO QueryImpl<int,contains,boolean,uncheckedContainsMatch>(false)
  #MACRO QueryImpl<long,contains,boolean,uncheckedContainsMatch>(false)
  #MACRO QueryImpl<float,contains,boolean,uncheckedContainsMatch>(false)
  #MACRO QueryImpl<double,contains,boolean,uncheckedContainsMatch>(false)
  #MACRO QueryImpl<Object,contains,boolean,uncheckedContainsMatch>(false)
#IF OfRef
  #MACRO QueryImpl<Boolean,contains,boolean,uncheckedContainsMatch>(false)
  #MACRO QueryImpl<Byte,contains,boolean,uncheckedContainsMatch>(false)
  #MACRO QueryImpl<Character,contains,boolean,uncheckedContainsMatch>(false)
  #MACRO QueryImpl<Short,contains,boolean,uncheckedContainsMatch>(false)
  #MACRO QueryImpl<Integer,contains,boolean,uncheckedContainsMatch>(false)
  #MACRO QueryImpl<Long,contains,boolean,uncheckedContainsMatch>(false)
  #MACRO QueryImpl<Float,contains,boolean,uncheckedContainsMatch>(false)
  #MACRO QueryImpl<Double,contains,boolean,uncheckedContainsMatch>(false)
#ENDIF
  #MACRO QueryImpl<boolean,search,int,uncheckedSearch>(-1)
#IF OfByte,OfRef
  #MACRO QueryImpl<byte,search,int,uncheckedSearch>(-1)
#ENDIF
#IF OfByte,OfChar,OfShort,OfFloat,OfRef
  #MACRO QueryImpl<char,search,int,uncheckedSearch>(-1)
#ENDIF
#IF OfChar,OfShort,OfFloat,OfRef
  #MACRO QueryImpl<short,search,int,uncheckedSearch>(-1)
#ENDIF
  #MACRO QueryImpl<int,search,int,uncheckedSearch>(-1)
  #MACRO QueryImpl<long,search,int,uncheckedSearch>(-1)
  #MACRO QueryImpl<float,search,int,uncheckedSearch>(-1)
  #MACRO QueryImpl<double,search,int,uncheckedSearch>(-1)
  #MACRO QueryImpl<Object,search,int,uncheckedSearch>(-1)
#IF OfRef
  #MACRO QueryImpl<Boolean,search,int,uncheckedSearch>(-1)
  #MACRO QueryImpl<Byte,search,int,uncheckedSearch>(-1)
  #MACRO QueryImpl<Character,search,int,uncheckedSearch>(-1)
  #MACRO QueryImpl<Short,search,int,uncheckedSearch>(-1)
  #MACRO QueryImpl<Integer,search,int,uncheckedSearch>(-1)
  #MACRO QueryImpl<Long,search,int,uncheckedSearch>(-1)
  #MACRO QueryImpl<Float,search,int,uncheckedSearch>(-1)
  #MACRO QueryImpl<Double,search,int,uncheckedSearch>(-1)
#ENDIF
  #MACRO QueryImpl<boolean,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
#IF OfByte,OfChar,OfShort,OfInt,OfLong,OfRef
  #MACRO QueryImpl<byte,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
#ENDIF
#IF OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfRef
  #MACRO QueryImpl<char,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
#ENDIF
#IF OfChar,OfShort,OfFloat,OfRef
  #MACRO QueryImpl<short,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
#ENDIF
  #MACRO QueryImpl<int,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
  #MACRO QueryImpl<long,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
  #MACRO QueryImpl<float,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
  #MACRO QueryImpl<double,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
  #MACRO QueryImpl<Object,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
#IF OfRef
  #MACRO QueryImpl<Boolean,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
  #MACRO QueryImpl<Byte,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
  #MACRO QueryImpl<Character,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
  #MACRO QueryImpl<Short,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
  #MACRO QueryImpl<Integer,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
  #MACRO QueryImpl<Long,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
  #MACRO QueryImpl<Float,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
  #MACRO QueryImpl<Double,removeVal,boolean,uncheckedRemoveFirstMatch>(false)
#ENDIF
  #MACRO QueryImpl<Object,removeFirstOccurrence,boolean,uncheckedRemoveFirstMatch>(false)
  #MACRO QueryImpl<boolean,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
#IF OfByte,OfRef
  #MACRO QueryImpl<byte,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
#ENDIF
#IF OfByte,OfChar,OfShort,OfFloat,OfRef
  #MACRO QueryImpl<char,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
#ENDIF
#IF OfChar,OfShort,OfFloat,OfRef
  #MACRO QueryImpl<short,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
#ENDIF
  #MACRO QueryImpl<int,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
  #MACRO QueryImpl<long,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
  #MACRO QueryImpl<float,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
  #MACRO QueryImpl<double,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
  #MACRO QueryImpl<Object,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
#IF OfRef
  #MACRO QueryImpl<Boolean,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
  #MACRO QueryImpl<Byte,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
  #MACRO QueryImpl<Character,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
  #MACRO QueryImpl<Short,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
  #MACRO QueryImpl<Integer,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
  #MACRO QueryImpl<Long,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
  #MACRO QueryImpl<Float,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
  #MACRO QueryImpl<Double,removeLastOccurrence,boolean,uncheckedRemoveLastMatch>(false)
#ENDIF
  @Override public OmniIterator.Of$ClassPrefix$$<E>$ descendingIterator(){
    int tail;
    if((tail=this.tail)!=-1){
      int size;
      if((size=(tail+1)-this.head)<=0){
        size+=arr.length;
      }
      return new DescendingUntetheredArrSeqItr$<E>$(this,tail,size);
    }
    return new DescendingUntetheredArrSeqItr$<E>$(this,-1,0);
  }
  @Override public Object clone(){
    int tail;
    if((tail=this.tail)!=-1){
      $ArrayType$[] copy;
      int size,head;
      if((size=(++tail)-(head=this.head))>0){
        ArrCopy.uncheckedCopy(this.arr,head,copy=new $ArrayType$[size],0,size);
        head=0;
        tail=size-1;
      }else{
        final $ArrayType$[] arr;
        ArrCopy.uncheckedCopy(arr=this.arr,0,copy=new $ArrayType$[size+=arr.length],0,tail);
        ArrCopy.uncheckedCopy(arr,head,copy,tail,size-tail);
        head=tail--;
      }
      return new $ClassPrefix$ArrDeq$<E>$(head,copy,tail);
    }
    return new $ClassPrefix$ArrDeq$<E>$();
  }



  
}
#MACRODEF QueryImpl<PARAMTYPE,METHODNAME,RETTYPE,UNCHECKEDMETHOD>(NEGRET)
#IFSWITCH METHODNAME==removeVal
  #IFSWITCH PARAMTYPE==Object
@Override public RETTYPE remove(PARAMTYPE val){
  #ELSE
@Override public RETTYPE METHODNAME(PARAMTYPE val){
  #ENDIF
#ELSE
@Override public RETTYPE METHODNAME(PARAMTYPE val){
#ENDIF
  final int tail;
#IFSWITCH RETTYPE==boolean
  #IF OfBoolean
    #IFSWITCH PARAMTYPE==boolean
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,val);
    #ELSE
  if((tail=this.tail)!=-1){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
  }
  return NEGRET;
    #ENDIF
  #ELSEIF OfByte
    #IFSWITCH PARAMTYPE==boolean
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,$queryCastBoolean$(val));
    #ELSEIFSWITCH PARAMTYPE==byte
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,val);
    #ELSEIFSWITCH PARAMTYPE==char
  return val<=$BoxedType$.MAX_VALUE && (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,val);
    #ELSEIFSWITCH PARAMTYPE==short,int
  return val==($exposedType$)val && (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,val);
    #ELSEIFSWITCH PARAMTYPE==long,float,double
  final int v;
  return (tail=this.tail)!=-1 && (v=($exposedType$)val)==val && super.UNCHECKEDMETHOD(tail,v);
    #ELSE
  if((tail=this.tail)!=-1){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
  }
  return NEGRET;
    #ENDIF
  #ELSEIF OfChar
    #IFSWITCH PARAMTYPE==boolean
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,$queryCastBoolean$(val));
    #ELSEIFSWITCH PARAMTYPE==byte,short
  return val>=0 && (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,val);
    #ELSEIFSWITCH PARAMTYPE==char
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,val);
    #ELSEIFSWITCH PARAMTYPE==int
  return val==($exposedType$)val && (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,val); 
    #ELSEIFSWITCH PARAMTYPE==long,float,double
  final int v;
  return (tail=this.tail)!=-1 && (v=($exposedType$)val)==val && super.UNCHECKEDMETHOD(tail,v);
    #ELSE
  if((tail=this.tail)!=-1){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
  }
  return NEGRET;  
    #ENDIF
  #ELSEIF OfShort
    #IFSWITCH PARAMTYPE==boolean
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,$queryCastBoolean$(val));
    #ELSEIFSWITCH PARAMTYPE==byte,short
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,val);  
    #ELSEIFSWITCH PARAMTYPE==char
  return val<=$BoxedType$.MAX_VALUE && (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,val);  
    #ELSEIFSWITCH PARAMTYPE==int
  return val==($exposedType$)val && (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,val);  
    #ELSEIFSWITCH PARAMTYPE==long,float,double
  final int v;
  return (tail=this.tail)!=-1 && (v=($exposedType$)val)==val && super.UNCHECKEDMETHOD(tail,v); 
    #ELSE
  if((tail=this.tail)!=-1){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
  }
  return NEGRET;   
    #ENDIF
  #ELSEIF OfInt
    #IFSWITCH PARAMTYPE==boolean
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,$queryCastBoolean$(val));  
    #ELSEIFSWITCH PARAMTYPE==byte,char,short,int
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,val);    
    #ELSEIFSWITCH PARAMTYPE==long,double
  final int v;
  return (tail=this.tail)!=-1 && (v=($exposedType$)val)==val && super.UNCHECKEDMETHOD(tail,v); 
    #ELSEIFSWITCH PARAMTYPE==float
  final int v;
  if((tail=this.tail)!=-1 && (double)val==(v=(int)val)){
    return super.UNCHECKEDMETHOD(tail,v);
  }
  return NEGRET;
    #ELSE
  if((tail=this.tail)!=-1){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
  }
  return NEGRET;     
    #ENDIF
  #ELSEIF OfLong
    #IFSWITCH PARAMTYPE==boolean
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,$queryCastBoolean$(val));    
    #ELSEIFSWITCH PARAMTYPE==byte,char,short,int,long
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,val);      
    #ELSEIFSWITCH PARAMTYPE==float,float
  final long v;
  return (tail=this.tail)!=-1 && TypeUtil.PARAMTYPEEquals(val,v=(long)val) && super.UNCHECKEDMETHOD(tail,v);
    #ELSE
  if((tail=this.tail)!=-1){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
  }
  return NEGRET;     
    #ENDIF
  #ELSEIF OfFloat
    #IFSWITCH PARAMTYPE==boolean,byte,char,short,float
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,TypeUtil.$exposedType$Equals(val));    
    #ELSEIFSWITCH PARAMTYPE==int,long
  return (tail=this.tail)!=-1 && TypeUtil.checkCastTo$BoxedType$(val) && super.UNCHECKEDMETHOD(tail,TypeUtil.$exposedType$Equals(val));   
    #ELSE
  if((tail=this.tail)!=-1){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
  }
  return NEGRET;     
    #ENDIF
  #ELSEIF OfDouble
    #IFSWITCH PARAMTYPE==boolean,byte,char,short,int,float,double
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,TypeUtil.$exposedType$Equals(val));    
    #ELSEIFSWITCH PARAMTYPE==long
  return (tail=this.tail)!=-1 && TypeUtil.checkCastTo$BoxedType$(val) && super.UNCHECKEDMETHOD(tail,TypeUtil.$exposedType$Equals(val));   
    #ELSE
  if((tail=this.tail)!=-1){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
  }
  return NEGRET;     
    #ENDIF
  #ELSEIF OfRef
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,TypeUtil.refEquals(val));
  #ELSE
ERROR unknown typedef $ClassPrefix$
  #ENDIF
#ELSE
  #IF OfBoolean
    #IFSWITCH PARAMTYPE==boolean
  if((tail=this.tail)!=-1){return super.UNCHECKEDMETHOD(tail,val);
    #ELSE
  if((tail=this.tail)!=-1){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
    #ENDIF
  #ELSEIF OfByte
    #IFSWITCH PARAMTYPE==boolean
  if((tail=this.tail)!=-1){ return super.UNCHECKEDMETHOD(tail,$queryCastBoolean$(val));
    #ELSEIFSWITCH PARAMTYPE==byte
  if((tail=this.tail)!=-1){ return super.UNCHECKEDMETHOD(tail,val);  
    #ELSEIFSWITCH PARAMTYPE==char
  if(val<=$BoxedType$.MAX_VALUE && (tail=this.tail)!=-1){ return super.UNCHECKEDMETHOD(tail,val);  
    #ELSEIFSWITCH PARAMTYPE==short,int
  if(val==($exposedType$)val && (tail=this.tail)!=-1){ return super.UNCHECKEDMETHOD(tail,val);  
    #ELSEIFSWITCH PARAMTYPE==long,float,double
  final int v;
  if((tail=this.tail)!=-1 && (v=($exposedType$)val)==val){ return super.UNCHECKEDMETHOD(tail,v);
    #ELSE
  if((tail=this.tail)!=-1){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
    #ENDIF
  #ELSEIF OfChar
    #IFSWITCH PARAMTYPE==boolean
  if((tail=this.tail)!=-1){ return super.UNCHECKEDMETHOD(tail,$queryCastBoolean$(val));
    #ELSEIFSWITCH PARAMTYPE==byte,short
  if(val>=0 && (tail=this.tail)!=-1){ return super.UNCHECKEDMETHOD(tail,val);  
    #ELSEIFSWITCH PARAMTYPE==char
  if((tail=this.tail)!=-1){ return super.UNCHECKEDMETHOD(tail,val);  
    #ELSEIFSWITCH PARAMTYPE==int
  if(val==($exposedType$)val && (tail=this.tail)!=-1){ return super.UNCHECKEDMETHOD(tail,val);  
    #ELSEIFSWITCH PARAMTYPE==long,float,double
  final int v;
  if((tail=this.tail)!=-1 && (v=($exposedType$)val)==val){ return super.UNCHECKEDMETHOD(tail,v);
    #ELSE
  if((tail=this.tail)!=-1){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
    #ENDIF
  #ELSEIF OfShort
    #IFSWITCH PARAMTYPE==boolean
  if((tail=this.tail)!=-1){ return super.UNCHECKEDMETHOD(tail,$queryCastBoolean$(val));
    #ELSEIFSWITCH PARAMTYPE==byte,short
  if((tail=this.tail)!=-1){ return super.UNCHECKEDMETHOD(tail,val);  
    #ELSEIFSWITCH PARAMTYPE==char
  if(val<=$BoxedType$.MAX_VALUE && (tail=this.tail)!=-1){ return super.UNCHECKEDMETHOD(tail,val);  
    #ELSEIFSWITCH PARAMTYPE==int
  if(val==($exposedType$)val && (tail=this.tail)!=-1){ return super.UNCHECKEDMETHOD(tail,val);  
    #ELSEIFSWITCH PARAMTYPE==long,float,double
  final int v;
  if((tail=this.tail)!=-1 && (v=($exposedType$)val)==val){ return super.UNCHECKEDMETHOD(tail,v);
    #ELSE
  if((tail=this.tail)!=-1){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
    #ENDIF
  #ELSEIF OfInt
    if((tail=this.tail)!=-1
    #IFSWITCH PARAMTYPE==boolean
  ){return super.UNCHECKEDMETHOD(tail,$queryCastBoolean$(val));  
    #ELSEIFSWITCH PARAMTYPE==byte,char,short,int
  ){return super.UNCHECKEDMETHOD(tail,val);    
    #ELSEIFSWITCH PARAMTYPE==long,double
  ){final int v;if((v=($exposedType$)val)==val){return super.UNCHECKEDMETHOD(tail,v);}
    #ELSEIFSWITCH PARAMTYPE==float
  ){final int v;if((double)val==(v=(int)val)){return super.UNCHECKEDMETHOD(tail,v);}
    #ELSE
  ){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
    #ENDIF
  #ELSEIF OfLong
    if((tail=this.tail)!=-1
    #IFSWITCH PARAMTYPE==boolean
  ){return super.UNCHECKEDMETHOD(tail,$queryCastBoolean$(val));    
    #ELSEIFSWITCH PARAMTYPE==byte,char,short,int,long
  ){return super.UNCHECKEDMETHOD(tail,val);      
    #ELSEIFSWITCH PARAMTYPE==float,double
  ){final long v;if(TypeUtil.PARAMTYPEEquals(val,v=(long)val)){return super.UNCHECKEDMETHOD(tail,v);}
    #ELSE
  ){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam);
    #ENDIF
  #ELSEIF OfFloat
  if((tail=this.tail)!=-1
    #IFSWITCH PARAMTYPE==boolean,byte,char,short,float
  ){return super.UNCHECKEDMETHOD(tail,TypeUtil.$exposedType$Equals(val));    
    #ELSEIFSWITCH PARAMTYPE==int,long
  &&TypeUtil.checkCastTo$BoxedType$(val)){ return super.UNCHECKEDMETHOD(tail,TypeUtil.$exposedType$Equals(val));   
    #ELSE
  ){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam); 
    #ENDIF
  #ELSEIF OfDouble
  if((tail=this.tail)!=-1
    #IFSWITCH PARAMTYPE==boolean,byte,char,short,int,float,double
  ){return super.UNCHECKEDMETHOD(tail,TypeUtil.$exposedType$Equals(val));    
    #ELSEIFSWITCH PARAMTYPE==long
  &&TypeUtil.checkCastTo$BoxedType$(val)){ return super.UNCHECKEDMETHOD(tail,TypeUtil.$exposedType$Equals(val));   
    #ELSE
  ){
    #MACRO InitializeQueryParameter(NEGRET)
    return super.UNCHECKEDMETHOD(tail,queryParam); 
    #ENDIF
  #ELSEIF OfRef
  if((tail=this.tail)!=-1){return super.UNCHECKEDMETHOD(tail,TypeUtil.refEquals(val));
  #ELSE
ERROR unknown typedef $ClassPrefix$
  #ENDIF
  }
  return NEGRET;
#ENDIF
}
#ENDDEF

#MACRODEF InitializeQueryParameter(NEGRET)
#IF OfRef
  #IFSWITCH PARAMTYPE==Object,boolean,byte,char,short,int,long,float,double,Boolean,Byte,Character,Short,Integer,Long,Float,Double
final var queryParam=TypeUtil.refEquals(val);
  #ENDIF
#ENDIF
#IF OfDouble
  #IFSWITCH PARAMTYPE==long
if(!TypeUtil.checkCastToDouble(val)){
  return NEGRET;
}
final var queryParam=TypeUtil.doubleEquals(val);
  #ENDIF
  #IFSWITCH PARAMTYPE==double,float,int,short,char,byte,boolean
final var queryParam=TypeUtil.doubleEquals(val);
  #ENDIF
  #IFSWITCH PARAMTYPE==Object
final DoublePredicate queryParam;
if(val instanceof Double){
  queryParam=TypeUtil.doubleEquals((double)val);
}else if(val instanceof Integer || val instanceof Byte || val instanceof Short){
  queryParam=TypeUtil.doubleEquals(((Number)val).intValue());
}else if(val instanceof Long){
  final long l;
  if(!TypeUtil.checkCastToDouble(l=(long)val)){
    return NEGRET;
  }
  queryParam=TypeUtil.doubleEquals(l);
}else if(val instanceof Float){
  queryParam=TypeUtil.doubleEquals((float)val);
}else if(val instanceof Character){
  queryParam=TypeUtil.doubleEquals((char)val);
}else if(val instanceof Boolean){
  queryParam=TypeUtil.doubleEquals((boolean)val);
}else{
  return NEGRET;
}
  #ENDIF
#ENDIF
#IF OfFloat
  #IFSWITCH PARAMTYPE==float,short,char,byte,boolean
final var queryParam=TypeUtil.floatEquals(val);
  #ENDIF
  #IFSWITCH PARAMTYPE==long,int
if(!TypeUtil.checkCastToFloat(val)){
  return NEGRET;
}
final var queryParam=TypeUtil.floatEquals(val);
  #ENDIF
  #IFSWITCH PARAMTYPE==double
final FloatPredicate queryParam;
final float f;
if((f=(float)val)==val){
  queryParam=TypeUtil.floatEqualsBits(Float.floatToRawIntBits(f));
}else if(f!=f){
  queryParam=Float::isNaN;
}else{
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==Object
final FloatPredicate queryParam;
if(val instanceof Float){
  queryParam=TypeUtil.floatEquals((float)val);
}else if(val instanceof Integer){
  final int i;
  if(!TypeUtil.checkCastToFloat(i=(int)val)){
    return NEGRET;
  }
  queryParam=TypeUtil.floatEquals(i);
}else if(val instanceof Long){
  final long l;
  if(!TypeUtil.checkCastToFloat(l=(long)val)){
    return NEGRET;
  }
  queryParam=TypeUtil.floatEquals(l);
}else if(val instanceof Double){
  final double d;
  final float f;
  if((d=(double)val)!=(f=(float)d)){
    if(f==f){
      return NEGRET;
    }
    queryParam=Float::isNaN;
  }else{
    queryParam=TypeUtil.floatEqualsBits(Float.floatToRawIntBits(f));
  }
}else if(val instanceof Byte || val instanceof Short){
  queryParam=TypeUtil.floatEquals(((Number)val).shortValue());
}else if(val instanceof Character){
  queryParam=TypeUtil.floatEquals((char)val);
}else if(val instanceof Boolean){
  queryParam=TypeUtil.floatEquals((boolean)val);
}else{
  return NEGRET;
}
  #ENDIF
#ENDIF
#IF OfLong
  #IFSWITCH PARAMTYPE==boolean
final long queryParam=TypeUtil.castToLong(val);
  #ENDIF
  #IFSWITCH PARAMTYPE==double,float
final long queryParam;
if(!TypeUtil.PARAMTYPEEquals(val,queryParam=(long)val)){
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==Object
final long queryParam;
if(val instanceof Long || val instanceof Integer || val instanceof Byte || val instanceof Short){
  queryParam=((Number)val).longValue();
}else if(val instanceof Float){
  final float f;
  if(!TypeUtil.floatEquals(f=(float)val,queryParam=(long)f)){
    return NEGRET;
  }
}else if(val instanceof Double){
  final double d;
  if(!TypeUtil.doubleEquals(d=(double)val,queryParam=(long)d)){
    return NEGRET;
  }
}else if(val instanceof Character){
  queryParam=(char)val;
}else if(val instanceof Boolean){
  queryParam=TypeUtil.castToLong((boolean)val);
}else{
  return NEGRET;
}
  #ENDIF
#ENDIF
#IF OfInt
  #IFSWITCH PARAMTYPE==boolean
final int queryParam=TypeUtil.castToByte(val);
  #ENDIF
  #IFSWITCH PARAMTYPE==float
final int queryParam;
if((double)val!=(queryParam=(int)val)){
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==double,long
final int queryParam;
if((queryParam=(int)val)!=val){
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==Object
final int queryParam;
if(val instanceof Integer || val instanceof Byte || val instanceof Short){
  queryParam=((Number)val).intValue();
}else if(val instanceof Long){
  final long l;
  if((l=(long)val)!=(queryParam=(int)l)){
    return NEGRET;
  }
}else if(val instanceof Float){
  final float f;
  if((f=(float)val)!=(queryParam=(int)f)){
    return NEGRET;
  }
}else if(val instanceof Double){
  final double d;
  if((d=(double)val)!=(queryParam=(int)d)){
    return NEGRET;
  }
}else if(val instanceof Character){
  queryParam=(char)val;
}else if(val instanceof Boolean){
  queryParam=TypeUtil.castToByte((boolean)val);
}else{
  return NEGRET;
}
  #ENDIF
#ENDIF
#IF OfShort
  #IFSWITCH PARAMTYPE==boolean
final int queryParam=TypeUtil.castToByte(val);
  #ENDIF
  #IFSWITCH PARAMTYPE==long,float,double
final int queryParam;
if(val!=(queryParam=(short)val)){
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==int
if(queryParam!=(short)queryParam){
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==char
if(queryParam>Short.MAX_VALUE){
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==Object
final int queryParam;
if(val instanceof Short || val instanceof Byte){
  queryParam=((Number)val).shortValue();
}else if(val instanceof Integer){
  if((queryParam=(int)val)!=(short)queryParam){
    return NEGRET;
  }
}else if(val instanceof Long){
  final double d;
  if((d=(double)val)!=(queryParam=(short)d)){
    return NEGRET;
  }
}else if(val instanceof Float){
  final float f;
  if((f=(float)val)!=(queryParam=(short)f)){
    return NEGRET;
  }
}else if(val instanceof Double){
  final long l;
  if((l=(long)val)!=(queryParam=(short)l)){
    return NEGRET;
  }
}else if(val instanceof Character){
  if((queryParam=(char)val)>Short.MAX_VALUE){
    return NEGRET;
  }
}else if(val instanceof Boolean){
  queryParam=TypeUtil.castToByte((boolean)val);
}else{
  return NEGRET;
}
  #ENDIF
#ENDIF
#IF OfChar
  #IFSWITCH PARAMTYPE==boolean
final char queryParam=TypeUtil.castToChar(val);
  #ENDIF
  #IFSWITCH PARAMTYPE==long,float,double
final char queryParam;
if(val!=(queryParam=(char)val)){
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==int
if(queryParam!=(char)queryParam){
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==byte,short
if(queryParam<0){
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==Object
final int queryParam;
if(val instanceof Character){
  queryParam=(byte)val;
}else if(val instanceof Integer || val instanceof Byte || val instanceof Short){
  if((queryParam=((Number)val).intValue())!=(char)queryParam){
    return NEGRET;
  }
}else if(val instanceof Long){
  final long l;
  if((l=(long)val)!=(queryParam=(char)l)){
    return NEGRET;
  }
}else if(val instanceof Float){
  final float f;
  if((f=(float)val)!=(queryParam=(char)f)){
    return NEGRET;
  }
}else if(val instanceof Double){
  final double d;
  if((d=(double)val)!=(queryParam=(char)d)){
    return NEGRET;
  }
}else if(val instanceof Boolean){
  queryParam=TypeUtil.castToChar((boolean)val);
}else{
  return NEGRET;
} 
  #ENDIF
#ENDIF
#IF OfByte
  #IFSWITCH PARAMTYPE==int
if(queryParam!=(byte)queryParam){
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==char
if(queryParam>Byte.MAX_VALUE){
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==boolean
final int queryParam=TypeUtil.castToByte(val);
  #ENDIF
  #IFSWITCH PARAMTYPE==long,float,double
final int queryParam;
if((queryParam=(byte)val)!=val){
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==Object
final int queryParam;
if(val instanceof Byte){
  queryParam=(byte)val;
}else if(val instanceof Integer || val instanceof Short){
  if((queryParam=((Number)val).intValue())!=(byte)queryParam){
    return NEGRET;
  }
}else if(val instanceof Long){
  final long l;
  if((l=(long)val)!=(queryParam=(byte)l)){
    return NEGRET;
  }
}else if(val instanceof Float){
  final float f;
  if((f=(float)val)!=(queryParam=(byte)f)){
    return NEGRET;
  }
}else if(val instanceof Double){
  final double d;
  if((d=(double)val)!=(queryParam=(byte)d)){
    return NEGRET;
  }
}else if(val instanceof Character){
  if((queryParam=(char)val)>Byte.MAX_VALUE){
    return NEGRET;
  }
}else if(val instanceof Boolean){
  queryParam=TypeUtil.castToByte((boolean)val);
}else{
  return NEGRET;
} 
  #ENDIF
#ENDIF
#IF OfBoolean
  #IFSWITCH PARAMTYPE==double
final boolean queryParam;
final long bits;
if((bits=Double.doubleToRawLongBits(val))==0 || bits==Long.MIN_VALUE){
  queryParam=false;
}else if(bits==TypeUtil.DBL_TRUE_BITS){
  queryParam=true;
}else{
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==float
final boolean queryParam;
switch(Float.floatToRawIntBits(val)){
  default:
    return NEGRET;
  case 0:
  case Integer.MIN_VALUE:
    queryParam=false;
    break;
  case TypeUtil.FLT_TRUE_BITS:
    queryParam=true;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==long
final boolean queryParam;
if(val==0L){
  queryParam=false;
}else if(val==1L){  
  queryParam=true;
}else{
  return NEGRET;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==int
final boolean queryParam;
switch(val){
  default:
    return NEGRET;
  case 0:
    queryParam=false;
    break;
  case 1:
    queryParam=true;
}
  #ENDIF
  #IFSWITCH PARAMTYPE==Object
final boolean queryParam;
if(val instanceof Boolean){
  queryParam=(boolean)val;
}else if(val instanceof Integer || val instanceof Short || val instanceof Byte){
  switch(((Number)val).intValue()){
    default:
      return NEGRET;
    case 0:
      queryParam=false;
      break;
    case 1:
      queryParam=true;
  }
}else if(val instanceof Long){
  final long l;
  if((l=(long)val)==0){
    queryParam=false;
  }else if(l==1){
    queryParam=true;
  }else{
    return NEGRET;
  }
}else if(val instanceof Float){
  switch(Float.floatToRawIntBits((float)val)){
    default:
      return NEGRET;
    case 0:
    case Integer.MIN_VALUE:
      queryParam=false;
      break;
    case TypeUtil.FLT_TRUE_BITS:
      queryParam=true;
  }
}else if(val instanceof Double){
  long bits;
  if((bits=Double.doubleToRawLongBits((double)val))==0 || bits==Long.MIN_VALUE){
    queryParam=false;
  }else if(bits==TypeUtil.DBL_TRUE_BITS){
    queryParam=true;
  }else{
    return NEGRET;
  }
}else if(val instanceof Character){
  switch(((Character)val).charValue()){
    default:
      return NEGRET;
    case 0:
      queryParam=false;
      break;
    case 1:
      queryParam=true;
  }
}else{
  return NEGRET;
}
  #ENDIF
#ENDIF
#ENDDEF
