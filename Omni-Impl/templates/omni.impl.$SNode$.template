#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl;
#IF OfRef
import java.util.Objects;
#ENDIF
#IF OfRef
import java.util.function.$TypeNameModifier$Predicate;
#ENDIF
#IF OfRef,OfDouble,OfLong,OfInt
import java.util.function.$TypeNameModifier$Consumer;
#ELSE
import omni.function.$TypeNameModifier$Consumer;
#ENDIF
#IFNOT OfRef,OfDouble,OfChar
import omni.util.ToStringUtil;
#ENDIF
#IF OfDouble,OfFloat
import omni.util.HashUtil;
#ENDIF
#IF OfBoolean
import omni.util.TypeUtil;
#ENDIF

public class $SNode$$<E>$ implements Comparable<$SNode$$<E>$>
{
  public transient $exposedType$ val;
  public transient $SNode$$<E>$ next;
  public $SNode$($exposedType$ val)
  {
    this.val=val;
  }
  public $SNode$($exposedType$ val,$SNode$$<E>$ next)
  {
    this.val=val;
    this.next=next;
  }
#IF OfRef,OfDouble
  #IF OfRef
  public static $<E>$ void uncheckedToString($SNode$$<E>$ curr,$SNode$$<E>$ tail,StringBuilder builder){
    for(builder.append(curr.val);curr!=tail;builder.append(',').append(' ').append((curr=curr.next).val)){}
  }
  #ENDIF
  public static $<E>$ void uncheckedToString($SNode$$<E>$ curr,StringBuilder builder){
    for(;;builder.append(',').append(' ')){
      builder.append(curr.val);
      if((curr=curr.next)==null){
        return;
      }
    }
  }
#ELSEIF OfChar
  public static $<E>$ void uncheckedToString($SNode$$<E>$ curr,char[] buffer){
    int bufferOffset=1;
    for(;;buffer[++bufferOffset]=',',buffer[++bufferOffset]=' ',++bufferOffset){
      buffer[bufferOffset]=curr.val;
      if((curr=curr.next)==null){
        return;
      }
    }
  }
#ELSE
  public static $<E>$ int uncheckedToString($SNode$$<E>$ curr,byte[] buffer){
    int bufferOffset=1;
    for(;;buffer[bufferOffset]=(byte)',',buffer[++bufferOffset]=(byte)' ',++bufferOffset){
#IF OfByte
      bufferOffset=ToStringUtil.getStringShort(curr.val,buffer,bufferOffset);
#ELSE
      bufferOffset=ToStringUtil.getString$TypeNameModifier$(curr.val,buffer,bufferOffset);
#ENDIF
      if((curr=curr.next)==null){
        return bufferOffset;
      }
    }
  }
  public static $<E>$ void uncheckedToString($SNode$$<E>$ curr,ToStringUtil.OmniStringBuilderByte builder){
    for(;;builder.uncheckedAppendCommaAndSpace()){
#IF OfByte
      builder.uncheckedAppendShort(curr.val);
#ELSE
      builder.uncheckedAppend$TypeNameModifier$(curr.val);
#ENDIF
      if((curr=curr.next)==null){
        return;
      }
    }
  }
#ENDIF


#IF OfRef
  public static $<E>$ int uncheckedHashCode($SNode$$<E>$ curr,$SNode$$<E>$ tail){
    int hash=31+$hashCodeMethod$(curr.val);
    while(curr!=tail){
      hash=(hash*31)+$hashCodeMethod$((curr=curr.next).val);
    }
    return hash;
  }
#ENDIF



  public static $<E>$ int uncheckedHashCode($SNode$$<E>$ curr){
    int hash=31+$hashCodeMethod$(curr.val);
    for(;(curr=curr.next)!=null;hash=(hash*31)+$hashCodeMethod$(curr.val)){}
    return hash;
  }
  public static $<E>$ void uncheckedForEach($SNode$$<E>$ curr,$SNode$$<E>$ tail,$TypeNameModifier$Consumer$<? super E>$ action){
    for(action.accept(curr.val);curr!=tail;action.accept((curr=curr.next).val)){}
  }
  
  public static $<E>$ void uncheckedForEach($SNode$$<E>$ curr,$TypeNameModifier$Consumer$<? super E>$ action){
    do{
      action.accept(curr.val);
    }while((curr=curr.next)!=null);
  }
  
  
#IF OfRef
  public static $<E>$ boolean uncheckedcontainsNonNull($SNode$$<E>$ curr,$SNode$$<E>$ tail,Object nonNull){
    for(;!nonNull.equals(curr.val);curr=curr.next){if(curr==tail){return false;}}
    return true;
  }
  #MACRO NodeQuery<NonNull>(!nonNull.equals)
  #MACRO NodeQuery<Null>(null!=)
  #MACRO NodeQuery< >(!pred.test)
#ELSEIF OfDouble,OfFloat
  #MACRO NodeQuery<Bits>(bits!=$convertToBits$)
  #MACRO NodeQuery<0>(0!=)
  #MACRO NodeQuery<NaN>(!$BoxedType$.isNaN)
#ELSE
  #MACRO NodeQuery< >(val!=)
#ENDIF
  #MACRO UncheckedToArrayImpl($ArrayType$,)
#IFNOT OfRef
  #MACRO UncheckedToArrayImpl(Object,)
  #MACRO UncheckedToArrayImpl($BoxedType$,)
  #IFNOT OfDouble
  #MACRO UncheckedToArrayImpl(double,$castToDouble$)
    #IFNOT OfFloat
  #MACRO UncheckedToArrayImpl(float,$castToFloat$)
      #IFNOT OfLong
  #MACRO UncheckedToArrayImpl(long,$castToLong$)
        #IFNOT OfInt
  #MACRO UncheckedToArrayImpl(int,$castToInt$)
          #IFNOT OfShort,OfChar
  #MACRO UncheckedToArrayImpl(short,$castToShort$)
            #IFNOT OfByte
  #MACRO UncheckedToArrayImpl(byte,$castToByte$)
  #MACRO UncheckedToArrayImpl(char,$castToChar$)
            #ENDIF
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF
#IF OfRef
  @SuppressWarnings("unchecked")
#ENDIF
  @Override
  public int compareTo($SNode$$<E>$ that)
  {
    if(this!=that)
    {
#IF OfBoolean
      if(this.val)
      {
        if(!that.val)
        {
          return 1;
        }
      }else if(that.val)
      {
        return -1;
      }
#ELSEIF OfByte,OfShort,OfChar
      return this.val-that.val;
#ELSEIF OfInt,OfLong
      $exposedType$ thisVal,thatVal;
      if((thisVal=this.val)<(thatVal=that.val))
      {
        return -1;
      }
      if(thisVal>thatVal)
      {
        return 1;
      }
#ELSEIF OfFloat,OfDouble
      return $BoxedType$.compare(this.val,that.val);
#ELSE
      return ((Comparable$<E>$)this.val).compareTo(that.val);
#ENDIF
    }
    return 0;
  }
}
#MACRODEF UncheckedToArrayImpl(DSTARR,CAST)
public static $<E>$ void uncheckedCopyInto($SNode$$<E>$ curr,DSTARR[] dst){
  for(int dstOffset=0;;++dstOffset){
    dst[dstOffset]=CAST(curr.val);
    if((curr=curr.next)==null){
      return;
    }
  }
}
#ENDDEF
#MACRODEF UncheckedQueryParam()
#IFSWITCH SUFFIX==NonNull
,Object nonNull
#ELSEIFSWITCH SUFFIX==Bits
,$queryParameterType$ bits
#ELSEIFSWITCH SUFFIX==Null,0,NaN
#ELSE
  #IF OfRef
,$TypeNameModifier$Predicate$<? super E>$ pred
  #ELSE
,$queryParameterType$ val
  #ENDIF
#ENDIF
#ENDDEF
#MACRODEF NodeQuery<SUFFIX>(TEST)
public static $<E>$ boolean uncheckedcontainsSUFFIX($SNode$$<E>$ curr
#MACRO UncheckedQueryParam()
){
  for(;TEST(curr.val);){if((curr=curr.next)==null){return false;}}
  return true;
}
public static $<E>$ int uncheckedsearchSUFFIX($SNode$$<E>$ curr
#MACRO UncheckedQueryParam()
){
  int index=1;
  for(;TEST(curr.val);++index){if((curr=curr.next)==null){return -1;}}
  return index;
}
#ENDDEF
