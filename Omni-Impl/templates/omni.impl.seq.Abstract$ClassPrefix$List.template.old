#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
package omni.impl.seq;
#IFNOT OfBoolean
import omni.util.TypeUtil;
#ENDIF
import omni.api.OmniCollection;
abstract class Abstract$ClassPrefix$List$<E>$ extends AbstractSeq$AbstractListextends$ implements OmniCollection.Of$ClassPrefix$$<E>$
{
  protected Abstract$ClassPrefix$List()
  {
    super();
  }
  protected Abstract$ClassPrefix$List(int size)
  {
    super(size);
  }
#IFNOT OfBoolean
  #IF OfDouble,OfFloat,OfLong
  @Override
  public final boolean add(int val)
  {
    return add(($exposedType$)val);
  }
    #IFNOT OfLong
      #IFNOT OfFloat
  @Override
  public final boolean add(float val)
  {
    return add(($exposedType$)val);
  }
      #ENDIF
  @Override
  public final boolean add(char val)
  {
    return add(($exposedType$)val);
  }
  @Override
  public final boolean add(short val)
  {
    return add(($exposedType$)val);
  }
  @Override
  public final boolean add(long val)
  {
   return add(($exposedType$)val);
  }
    #ENDIF
  #ENDIF
  @Override
  public final boolean add(boolean val)
  {
    return add($queryCastBoolean$(val));
  } 
#ENDIF
  @Override
  public final boolean add($BoxedType$ val)
  {
    return add(($exposedType$)val);
  }
  protected abstract void add(int index,$exposedType$ val);
  protected abstract $exposedType$ get$TypeNameModifier$(int index);
  protected abstract $exposedType$ $removeAtIndexMethod$(int index);
  protected abstract $exposedType$ set(int index,$exposedType$ val);
  public final $BoxedType$ remove(int index)
  {
    return remove$TypeNameModifier$At(index);
  }
  public final $BoxedType$ set(int index,$BoxedType$ val)
  {
    return set(index,($exposedType$)val);
  }
  public final void add(int index,$BoxedType$ val)
  {
    add(index,($exposedType$)val);
  }
  public final $BoxedType$ get(int index)
  {
    return get$TypeNameModifier$(index);
  }
}