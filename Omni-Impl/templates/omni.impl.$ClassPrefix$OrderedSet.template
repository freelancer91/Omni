#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfComparable
package omni.impl;
import omni.api.OmniNavigableSet;
import omni.util.OmniArray;
import omni.util.ArrCopy;
import omni.util.TypeUtil;
#IF OfComparable,OfDouble,OfLong
import java.util.function.$TypeNameModifier$ToIntFunction;
#ENDIF
#IF OfFloat
import omni.function.$TypeNameModifier$ToIntFunction;
#ENDIF
#IF OfInt,OfShort,OfChar
import java.util.function.IntUnaryOperator;
#ENDIF
#IF OfComparable
public abstract class $ClassPrefix$OrderedSet<E extends Comparable<E>>
  extends $ClassPrefix$UntetheredArrSeq$<E>$ implements OmniNavigableSet.OfRef$<E>$
#ELSE
public abstract class $ClassPrefix$OrderedSet
  extends $ClassPrefix$UntetheredArrSeq$<E>$ implements OmniNavigableSet.Of$ClassPrefix$$<E>$
#ENDIF
  
{
  $ClassPrefix$OrderedSet(int head,$ArrayType$[] arr,int tail){
    super(head,arr,tail);
  }
  $ClassPrefix$OrderedSet(){
    super();
  }
  @Override public boolean add($exposedType$ key){
    final int tail;
    if((tail=this.tail)!=-1){
  #IF OfComparable
      if(key!=null){
        return super.uncheckedAdd(tail,key,this::insertionCompare);
      }
      return this.uncheckedAddNull(tail);
  #ELSEIF OfFloat,OfDouble
      if(key==key){
        final $TypeNameModifier$ToIntFunction insertionComparator;
    #IF OfFloat
        switch(Float.floatToRawIntBits(key)){
          default:
            return super.uncheckedAdd(tail,key,this::insertionCompare);
          case 0x7f800000:
            return this.uncheckedAddPosInf(tail);
          case 0xff800000:
            return this.uncheckedAddNegInf(tail);
          case 0:
            insertionComparator=this::comparePos0;
            break;
          case Integer.MIN_VALUE:
            insertionComparator=this::compareNeg0;
        }
    #ELSEIF OfDouble
        final long bits;
        if((bits=Double.doubleToRawLongBits(key))==0L){
          insertionComparator=this::comparePos0;
        }else if(bits==Long.MIN_VALUE){
          insertionComparator=this::compareNeg0;
        }else{
          return super.uncheckedAdd(tail,key,this::insertionCompare);
        }
    #ENDIF
        return super.uncheckedAdd(tail,key,insertionComparator);
      }
      return this.uncheckedAddNaN(tail);
  #ELSE
    #IF OfChar
      switch(key){
        case 0:
          return this.uncheckedAdd0(tail);
        case 1:
          return this.uncheckedAdd1(tail);
        default:
      }
    #ENDIF
      return super.uncheckedAdd(tail,key,this::insertionCompare);
  #ENDIF
    }else{
      super.insertAtMiddle(key);
      return true;
    }
  }
#IFNOT OfComparable
  @Override public boolean add($BoxedType$ key){
    return this.add(($exposedType$)key);
  }
  @Override public boolean add(boolean key){
    final int tail;
    if((tail=this.tail)!=-1){
      #IF OfFloat,OfDouble
      if(key){
        return super.uncheckedAdd(tail,1,this::insertionCompare);
      }else{
        return super.uncheckedAdd(tail,0,this::comparePos0);
      }
      #ELSEIF OfChar
      if(key){
        return this.uncheckedAdd0(tail);
      }else{
        return this.uncheckedAdd1(tail);
      }
      #ELSE
      return super.uncheckedAdd(tail,$queryCastBoolean$(key),this::insertionCompare);
      #ENDIF
    }else{
      super.insertAtMiddle($queryCastBoolean$(key));
      return true;
    }
  }
#ENDIF
#IF OfShort,OfInt,OfLong
  @Override public boolean add(byte key){
    return this.add(($exposedType$)key);
  }
#ENDIF
#IF OfInt,OfLong,OfFloat
  @Override public boolean add(char key){
    final int tail;
    if((tail=this.tail)!=-1){
      #IF OfDouble,OfFloat
      if(key==0){
        return super.uncheckedAdd(tail,key,this::comparePos0);
      }
      #ENDIF
      return super.uncheckedAdd(tail,key,this::insertionCompare);
    }else{
      super.insertAtMiddle(key);
      return true;
    }
  }
#ENDIF
#IF OfFloat
  @Override public boolean add(short key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key==0){
        return super.uncheckedAdd(tail,key,this::comparePos0);
      }
      return super.uncheckedAdd(tail,key,this::insertionCompare);
    }else{
      super.insertAtMiddle(key);
      return true;
    }
  }
#ENDIF
#IF OfLong,OfFloat,OfDouble
  @Override public boolean add(int key){
    final int tail;
    if((tail=this.tail)!=-1){
      #IF OfDouble,OfFloat
      if(key==0){
        return super.uncheckedAdd(tail,key,this::comparePos0);
      }
      #ENDIF
      return super.uncheckedAdd(tail,key,this::insertionCompare);
    }else{
      super.insertAtMiddle(key);
      return true;
    }
  }
#ENDIF
#IF OfFloat,OfDouble
  @Override public boolean add(long key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key==0){
        return super.uncheckedAdd(tail,key,this::comparePos0);
      }
      return super.uncheckedAdd(tail,key,this::insertionCompare);
    }else{
      super.insertAtMiddle(key);
      return true;
    }
  }
#ENDIF
#IF OfDouble
  @Override public boolean add(float key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key==key){
        $TypeNameModifier$ToIntFunction insertionComparator;
        switch(Float.floatToRawIntBits(key)){
          default:
            return super.uncheckedAdd(tail,key,this::insertionCompare);
          case 0x7f800000:
            return this.uncheckedAddPosInf(tail);
          case 0xff800000:
            return this.uncheckedAddNegInf(tail);
          case 0:
            insertionComparator=this::comparePos0;
            break;
          case Integer.MIN_VALUE:
            insertionComparator=this::compareNeg0;
        }
        return super.uncheckedAdd(tail,key,insertionComparator);
      }
      return this.uncheckedAddNaN(tail);
    }else{
      super.insertAtMiddle(key);
      return true;
    }
  }
#ENDIF
  abstract int insertionCompare($exposedType$ key1,$exposedType$ key2);
#IF OfComparable
  abstract boolean uncheckedAddNull(int tail);
#ENDIF
#IF OfDouble,OfFloat
  abstract int comparePos0($exposedType$ key);
  abstract int compareNeg0($exposedType$ key);
  abstract boolean uncheckedAddNaN(int tail);
  abstract boolean uncheckedAddPosInf(int tail);
  abstract boolean uncheckedAddNegInf(int tail);
#ENDIF
#IF OfChar
  abstract boolean uncheckedAdd0(int tail);
  abstract boolean uncheckedAdd1(int tail);
#ENDIF
#IF OfChar
  abstract boolean uncheckedcontains(int tail,int key);
  abstract boolean uncheckedremoveVal(int tail,int key);
  abstract boolean uncheckedcontains(int tail,boolean key);
  abstract boolean uncheckedremoveVal(int tail,boolean key);
#ENDIF
#IF OfChar
  @Override public boolean contains(boolean key){
    final int tail;
    return (tail=this.tail)!=-1 && uncheckedcontains(tail,key);
  }
  @Override public boolean removeVal(boolean key){
    final int tail;
    return (tail=this.tail)!=-1 && uncheckedremoveVal(tail,key);
  }
  @Override public boolean contains(byte key){
    final int tail;
    return key>=0 && (tail=this.tail)!=-1 && uncheckedcontains(tail,key);
  }
  @Override public boolean removeVal(byte key){
    final int tail;
    return key>=0 && (tail=this.tail)!=-1 && uncheckedremoveVal(tail,key);
  }
  @Override public boolean contains(char key){
    final int tail;
    return (tail=this.tail)!=-1 && uncheckedcontains(tail,key);
  }
  @Override public boolean removeVal(char key){
    final int tail;
    return (tail=this.tail)!=-1 && uncheckedremoveVal(tail,key);
  }
  @Override public boolean contains(short key){
    final int tail;
    return key>=0 && (tail=this.tail)!=-1 && uncheckedcontains(tail,key);
  }
  @Override public boolean removeVal(short key){
    final int tail;
    return key>=0 && (tail=this.tail)!=-1 && uncheckedremoveVal(tail,key);
  }
  @Override public boolean contains(int key){
    final int tail;
    return key==(char)key && (tail=this.tail)!=-1 && uncheckedcontains(tail,key);
  }
  @Override public boolean removeVal(int key){
    final int tail;
    return key==(char)key && (tail=this.tail)!=-1 && uncheckedremoveVal(tail,key);
  }
  @Override public boolean contains(long key){
    final int tail,k;
    return (tail=this.tail)!=-1 && key==(k=(char)key) && uncheckedcontains(tail,k);
  }
  @Override public boolean removeVal(long key){
    final int tail,k;
    return (tail=this.tail)!=-1 && key==(k=(char)key) && uncheckedremoveVal(tail,k);
  }
  @Override public boolean contains(float key){
    final int tail,k;
    return (tail=this.tail)!=-1 && key==(k=(char)key) && uncheckedcontains(tail,k);
  }
  @Override public boolean removeVal(float key){
    final int tail,k;
    return (tail=this.tail)!=-1 && key==(k=(char)key) && uncheckedremoveVal(tail,k);
  }
  @Override public boolean contains(double key){
    final int tail,k;
    return (tail=this.tail)!=-1 && key==(k=(char)key) && uncheckedcontains(tail,k);
  }
  @Override public boolean removeVal(double key){
    final int tail,k;
    return (tail=this.tail)!=-1 && key==(k=(char)key) && uncheckedremoveVal(tail,k);
  }
  @Override public boolean contains(Object key){
    final int tail;
    if((tail=this.tail)!=-1){
      final int k;
      if(key instanceof Character){
        k=(char)key;
      }else if(key instanceof Integer){
        if((k=(int)key)!=(char)k){
          return false;
        }
      }else if(key instanceof Long){
        final long l;
        if((l=(long)key)!=(k=(char)l)){
          return false;
        }
      }else if(key instanceof Float){
        final float f;
        if((f=(float)key)!=(k=(char)f)){
          return false;
        }
      }else if(key instanceof Double){
        final double d;
        if((d=(double)key)!=(k=(char)d)){
          return false;
        }
      }else if(key instanceof Byte || key instanceof Short){
        if((k=((Number)key).shortValue())<0){
          return false;
        }
      }else if(key instanceof Boolean){
        return uncheckedcontains(tail,(boolean)key);
      }else{
        return false;
      }
      return uncheckedcontains(tail,k);
    }
    return false;
  }
  @Override public boolean remove(Object key){
    final int tail;
    if((tail=this.tail)!=-1){
      final int k;
      if(key instanceof Character){
        k=(char)key;
      }else if(key instanceof Integer){
        if((k=(int)key)!=(char)k){
          return false;
        }
      }else if(key instanceof Long){
        final long l;
        if((l=(long)key)!=(k=(char)l)){
          return false;
        }
      }else if(key instanceof Float){
        final float f;
        if((f=(float)key)!=(k=(char)f)){
          return false;
        }
      }else if(key instanceof Double){
        final double d;
        if((d=(double)key)!=(k=(char)d)){
          return false;
        }
      }else if(key instanceof Byte || key instanceof Short){
        if((k=((Number)key).shortValue())<0){
          return false;
        }
      }else if(key instanceof Boolean){
        return uncheckedremoveVal(tail,(boolean)key);
      }else{
        return false;
      }
      return uncheckedremoveVal(tail,k);
    }
    return false;
  }
#ENDIF
#IF OfComparable
  abstract boolean uncheckedremoveNull(int tail);
  abstract $TypeNameModifier$ToIntFunction$<E>$ getQueryComparator($exposedType$ key);
  @SuppressWarnings("unchecked")
  @Override public boolean contains(boolean key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)(Boolean)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean contains(byte key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)(Byte)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean contains(char key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)(Character)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean contains(short key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)(Short)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean contains(int key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)(Integer)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean contains(long key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)(Long)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean contains(float key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)(Float)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean contains(double key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)(Double)key));
  }
  
  
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(boolean key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)(Boolean)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(byte key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)(Byte)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(char key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)(Character)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(short key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)(Short)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(int key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)(Integer)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(long key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)(Long)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(float key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)(Float)key));
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(double key){
    final int tail;
    return (tail=this.tail)!=-1 && super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)(Double)key));
  }
  
  @SuppressWarnings("unchecked")
  @Override public boolean remove(Object key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key!=null){
        return super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)key));
      }
      return this.uncheckedremoveNull(tail);
    }
    return false;
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(Boolean key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key!=null){
        return super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)key));
      }
      return this.uncheckedremoveNull(tail);
    }
    return false;
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(Byte key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key!=null){
        return super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)key));
      }
      return this.uncheckedremoveNull(tail);
    }
    return false;
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(Character key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key!=null){
        return super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)key));
      }
      return this.uncheckedremoveNull(tail);
    }
    return false;
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(Short key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key!=null){
        return super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)key));
      }
      return this.uncheckedremoveNull(tail);
    }
    return false;
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(Integer key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key!=null){
        return super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)key));
      }
      return this.uncheckedremoveNull(tail);
    }
    return false;
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(Long key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key!=null){
        return super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)key));
      }
      return this.uncheckedremoveNull(tail);
    }
    return false;
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(Float key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key!=null){
        return super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)key));
      }
      return this.uncheckedremoveNull(tail);
    }
    return false;
  }
  @SuppressWarnings("unchecked")
  @Override public boolean removeVal(Double key){
    final int tail;
    if((tail=this.tail)!=-1){
      if(key!=null){
        return super.uncheckedRemoveMatch(tail,this.getQueryComparator(($exposedType$)key));
      }
      return this.uncheckedremoveNull(tail);
    }
    return false;
  }
  
#ENDIF



#IF OfComparable
  public static class Ascending<E extends Comparable<E>>
#ELSE
  public static class Ascending$<E>$
#ENDIF
    extends $ClassPrefix$OrderedSet$<E>$ implements Cloneable
  {
    public Ascending(){
      super();
    }
    public Ascending(int head,$ArrayType$[] arr,int tail){
      super(head,arr,tail);
    }
    @Override int insertionCompare($exposedType$ key1,$exposedType$ key2){
#IF OfComparable
      return Integer.signum(-key2.compareTo(key1));
#ELSEIF OfDouble,OfFloat,OfLong,OfInt
      if(key1>key2){
        return 1;
      }
      if(key1==key2){
        return 0;
      }
      return -1;
#ELSEIF OfShort,OfChar
      return Integer.signum(key1-key2);
#ENDIF
    }
#IF OfComparable
    @SuppressWarnings("unchecked")
    @Override boolean uncheckedAddNull(int tail){
      //add at tail
      final $ArrayType$[] arr;
      if((arr=this.arr)[tail]!=null){
        int head;
        switch(Integer.signum(++tail-(head=this.head))){
          case 0:
            //fragmented must grow
            int arrLength;
            final $ArrayType$[] tmp;
            ArrCopy.uncheckedCopy(arr,0,tmp=$NewArray$[head=OmniArray.growBy50Pct(arrLength=arr.length)],0,tail);
            ArrCopy.uncheckedCopy(arr,tail,tmp,head-=(arrLength-=tail),arrLength);
            this.head=head;
            this.arr=tmp;
            break;
          case 1:
            //nonfragmented
            if(tail==arr.length){
              if(0==head){
                //must grow
                ArrCopy.uncheckedCopy(arr,0,tmp=$NewArray$[head=OmniArray.growBy50Pct(tail)],0,tail);
                this.arr=tmp;
              }else{
                tail=0;
              }
            }
          default:
            //fragmented
        }
        this.tail=tail;
        return true;
      }
      return false;
    }
#ENDIF
#IF OfDouble,OfFloat
    @Override int comparePos0($exposedType$ key){
      if(0>key){
        //insert hi
        return 1;
      }
  #IF OfFloat
      switch(Float.floatToRawIntBits(key)){
        case 0: //pos0
          return 0;
        case Integer.MIN_VALUE: //neg0
          return 1;
        default:
      }
  #ELSE
      final long bits;
      if((bits=Double.doubleToRawLongBits(key))==0){ //pos0
        return 0;
      }
      if(bits==Long.MIN_VALUE){ //neg0
        return 1;
      }
  #ENDIF
      return -1; //0<key || key!=key so insert lo
    }
    @Override int compareNeg0($exposedType$ key){
      if(0>key){
        //insert hi
        return 1;
      }
  #IF OfFloat
      if(Float.floatToRawIntBits(key)==Integer.MIN_VALUE){
  #ELSE
      if(Double.doubleToRawLongBits(key)==Long.MIN_VALUE){
  #ENDIF
        return 0;
      }
      return -1; //0<key || key!=key so insert lo
    }
    @Override boolean uncheckedAddNaN(int tail){
      final $ArrayType$[] arr;
      if(!$BoxedType$.isNaN((arr=this.arr)[tail])){
        super.insertAtTail(arr,$BoxedType$.NaN,this.head,tail);
        return true;
      }
      return false;
    }

    @Override boolean uncheckedAddPosInf(int tail){
      $ArrayType$[] arr;
      final $ArrayType$ topVal;
      if((topVal=(arr=this.arr)[tail])!=$BoxedType$.POSITIVE_INFINITY){
        int head=this.head;
        if($BoxedType$.isNaN(topVal)){
          #MACRO AddJustBeforeTail($BoxedType$.NaN,$BoxedType$.POSITIVE_INFINITY)
          
        }else{
          super.insertAtTail(arr,$BoxedType$.POSITIVE_INFINITY,head,tail);
        }
        return true;
      }
      return false;
    }
    @Override boolean uncheckedAddNegInf(int tail){
      final $ArrayType$[] arr;
      final int head;
      if(((arr=this.arr)[head=this.head])!=$BoxedType$.NEGATIVE_INFINITY){
        super.insertAtHead(arr,$BoxedType$.NEGATIVE_INFINITY,head,tail);
        return true;
      }
      return false;
    }
#ENDIF
#IF OfChar
    @Override boolean uncheckedAdd0(int tail){
      final $ArrayType$[] arr;
      final int head;
      if(((arr=this.arr)[head=this.head])!=0){
        super.insertAtHead(arr,($exposedType$)0,head,tail);
        return true;
      }
      return false;
    }
    @Override boolean uncheckedAdd1(int tail){
      int head;
      $ArrayType$[] arr;
      final $ArrayType$ bottomVal;
      if((bottomVal=(arr=this.arr)[head=this.head])!=1){
        if(bottomVal==0){
          #MACRO AddJustAfterHead(0,1)
        }else{
          super.insertAtHead(arr,($exposedType$)1,head,tail);
        }
        return true;
      }
      return false;
    }
#ENDIF
#IF OfChar
    @Override boolean uncheckedcontains(int tail,boolean key){
      final var arr=this.arr;
      int head=this.head;
      if(key){
        switch(arr[head]){
          case 0:
            return head!=tail && arr[(++head==arr.length)?0:head]==1;
          case 1:
            return true;
          default:
        }
      }
      return arr[head]==0;
    }
    @Override boolean uncheckedremoveVal(int tail,boolean key){
      final var arr=this.arr;
      int head=this.head;
      if(key){
        switch(arr[head]){
          case 0:
            if(head!=tail && arr[(++head==arr.length)?(head=0):head]==1){
              arr[head]=0;
              this.head=head;
              return true;
            }
          default:
            return false;
          case 1:
        }
      }else if(arr[head]!=0){
        return false;
      }
      if(head==tail){
        this.tail=-1;
      }else{
        if(++head==arr.length){
          head=0;
        }
        this.head=head;
      }
      return true;
    }
    private static IntUnaryOperator getQueryComparator(int key){
      return (k)->Integer.signum(key-k);
    }
    @Override boolean uncheckedcontains(int tail,int key){
      switch(key){
        default:
          return super.uncheckedContainsMatch(tail,getQueryComparator(key));
        case 1:
          {
            final $ArrayType$[] arr;
            int head;
            switch((arr=this.arr)[head=this.head]){
              case 0:
                return head!=tail && arr[(++head==arr.length)?0:head]==1;
              case 1:
                return true;
              default:
            }
            return false;
          }
        case 0:
          return arr[head]==0;
      }
    }
    
    @Override boolean uncheckedremoveVal(int tail,int key){
      final $ArrayType$[] arr;
      int head;
      switch(key){
        default:
          return super.uncheckedRemoveMatch(tail,getQueryComparator(key));
        case 1:
          switch((arr=this.arr)[head=this.head]){
            case 0:
              if(head!=tail && arr[(++head==arr.length)?(head=0):head]==1){
                arr[head]=0;
                this.head=head;
                return true;
              }
            default:
              return false;
            case 1:
          }
          break;
        case 0:
          if((arr=this.arr)[head=this.head]!=0){
            return false;
          }
      }
      if(head==tail){
        this.tail=-1;
      }else{
        if(++head==arr.length){
          head=0;
        }
        this.head=head;
      }
      return true;
    }
    
#ENDIF
#IF OfComparable
    @Override $TypeNameModifier$ToIntFunction$<E>$ getQueryComparator($exposedType$ key){
      return (k)->Integer.signum(-k.compareTo(key));
    }
    @Override boolean uncheckedremoveNull(int tail){
      final $ArrayType$[] arr;
      if((arr=this.arr)[tail]==null){
        if(tail==this.head){
          tail=-1;
        }else if(--tail==-1){
          tail=arr.length-1;
        }
        this.tail=tail;
        return true;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Object key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[tail]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Boolean key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[tail]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Byte key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[tail]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Character key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[tail]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Short key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[tail]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Integer key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[tail]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Long key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[tail]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Float key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[tail]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Double key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[tail]==null;
      }
      return false;
    }
#ENDIF

  }

#IF OfComparable
  public static class Descending<E extends Comparable<E>>
#ELSE
  public static class Descending$<E>$
#ENDIF
    extends $ClassPrefix$OrderedSet$<E>$ implements Cloneable
  {
    public Descending(){
      super();
    }
    public Descending(int head,$ArrayType$[] arr,int tail){
      super(head,arr,tail);
    }
    @Override int insertionCompare($exposedType$ key1,$exposedType$ key2){
#IF OfComparable
      return Integer.signum(key2.compareTo(key1));
#ELSEIF OfDouble,OfFloat,OfLong,OfInt
      if(key1>key2){
        return -1;
      }
      if(key1==key2){
        return 0;
      }
      return 1;
#ELSEIF OfShort,OfChar
      return Integer.signum(key2-key1);
#ENDIF
    }
#IF OfComparable
    @SuppressWarnings("unchecked")
    @Override boolean uncheckedAddNull(int tail){
      int head;
      final $ArrayType$[] arr;
      if((arr=this.arr)[head=this.head]!=null){
        switch(Integer.signum(tail-(--head))){
          case 0:
            //fragmented must grow
            final $ArrayType$[] tmp;
            int arrLength;
            ArrCopy.uncheckedCopy(arr,0,tmp=$NewArray$[head=OmniArray.growBy50Pct(arrLength=arr.length)],0,++tail);
            ArrCopy.uncheckedCopy(arr,tail,tmp,head-=(arrLength-=tail),arrLength);
            --head;
            this.arr=tmp;
            break;
          default:
            //nonfragmented
            if(head==-1){
              if(tail==(head=arr.length-1)){
                //must grow
                this.tail=(head=OmniArray.growBy50Pct(++tail))-1;
                ArrCopy.uncheckedCopy(arr,0,tmp=$NewArray$[head],head-=tail,tail);
                --head;
                this.arr=tmp;
              }
            }
          case -1:
            //fragmented
        }
        this.head=head;
        return true;
      }
      return false;
    }
#ENDIF
#IF OfDouble,OfFloat
    @Override int comparePos0($exposedType$ key){
      if(0>key){
        return -1;
      }
  #IF OfFloat
      switch(Float.floatToRawIntBits(key)){
        case 0: //pos0
          return 0;
        case Integer.MIN_VALUE: //neg0
          return -1;
        default:
      }
  #ELSE
      final long bits;
      if((bits=Double.doubleToRawLongBits(key))==0){ //pos0
        return 0;
      }else if(bits==Long.MIN_VALUE){ //neg0
        return -1;
      }
  #ENDIF
      return 1; //key>pos0 || key!=key
    }
    @Override int compareNeg0($exposedType$ key){
      if(0>key){
        return -1;
      }
  #IF OfFloat
      if(Float.floatToRawIntBits(key)==Integer.MIN_VALUE){
  #ELSE
      if(Double.doubleToRawLongBits(key)==Long.MIN_VALUE){
  #ENDIF
        return 0;
      }
      return 1; //key>neg0 || key!=key
    }
    @Override boolean uncheckedAddNaN(int tail){
      final $ArrayType$[] arr;
      final int head;
      if(!$BoxedType$.isNaN((arr=this.arr)[head=this.head])){
        super.insertAtHead(arr,$BoxedType$.NaN,head,tail);
        return true;
      }
      return false;
    }
    @Override boolean uncheckedAddPosInf(int tail){
      int head;
      $ArrayType$[] arr;
      final $ArrayType$ bottomVal;
      if((bottomVal=(arr=this.arr)[head=this.head])!=$BoxedType$.POSITIVE_INFINITY){
        if($BoxedType$.isNaN(bottomVal)){
          #MACRO AddJustAfterHead($BoxedType$.NaN,$BoxedType$.POSITIVE_INFINITY)
        }else{
          super.insertAtHead(arr,$BoxedType$.POSITIVE_INFINITY,head,tail);
        }
        return true;
      }
      return false;
    }
    @Override boolean uncheckedAddNegInf(int tail){
      final $ArrayType$[] arr;
      if(((arr=this.arr)[tail])!=$BoxedType$.NEGATIVE_INFINITY){
        super.insertAtTail(arr,$BoxedType$.NEGATIVE_INFINITY,this.head,tail);
        return true;
      }
      return false;
    }
#ENDIF
#IF OfChar
    @Override boolean uncheckedAdd0(int tail){
      final $ArrayType$[] arr;
      if(((arr=this.arr)[tail])!=0){
        super.insertAtTail(arr,($exposedType$)0,this.head,tail);
        return true;
      }
      return false;
    }
    @Override boolean uncheckedAdd1(int tail){
      $ArrayType$[] arr;
      final $ArrayType$ topVal;
      if((topVal=(arr=this.arr)[tail])!=1){
        int head=this.head;
        if(topVal==0){
          #MACRO AddJustBeforeTail(0,1)
        }else{
          super.insertAtTail(arr,($exposedType$)1,head,tail);
        }
        return true;
      }
      return false;
    }
#ENDIF
#IF OfChar
    @Override boolean uncheckedcontains(int tail,boolean key){
      final var arr=this.arr;
      if(key){
        switch(arr[tail]){
          case 0:
            return this.head!=tail && arr[(tail==0)?arr.length-1:tail-1]==1;
          case 1:
            return true;
          default:
        }
        return false;
      }
      return arr[tail]==0;
    }
    @Override boolean uncheckedremoveVal(int tail,boolean key){
      final var arr=this.arr;
      if(key){
        switch(arr[tail]){
          case 0:
            if(head!=tail && arr[(--tail==-1)?(tail=arr.length-1):tail]==1){
              arr[tail]=0;
              this.tail=tail;
              return true;
            }
          default:
            return false;
          case 1:
        }
      }else if(arr[tail]!=0){
        return false;
      }
      if(this.head==tail){
        tail=-1;
      }else{
        if(--tail==-1){
          tail=arr.length-1;
        }
      }
      this.tail=tail;
      return true;
    }
    private static IntUnaryOperator getQueryComparator(int key){
      return (k)->Integer.signum(k-key);
    }
    @Override boolean uncheckedcontains(int tail,int key){
      switch(key){
        default:
          return super.uncheckedContainsMatch(tail,getQueryComparator(key));
        case 1:
          {
            final $ArrayType$[] arr;
            switch((arr=this.arr)[tail]){
              case 0:
                return this.head!=tail && arr[(tail==0)?arr.length-1:tail-1]==1;
              case 1:
                return true;
              default:
            }
            return false;
          }
        case 0:
          return arr[tail]==0;
      }
    }
    
    @Override boolean uncheckedremoveVal(int tail,int key){
      final $ArrayType$[] arr;
      switch(key){
        default:
          return super.uncheckedRemoveMatch(tail,getQueryComparator(key));
        case 1:
          switch((arr=this.arr)[tail]){
            case 0:
              if(this.head!=tail && arr[(--tail==-1)?(tail=arr.length-1):tail]==1){
                arr[tail]=0;
                this.tail=tail;
                return true;
              }
            default:
              return false;
            case 1:
          }
          break;
        case 0:
          if((arr=this.arr)[tail]!=0){
            return false;
          }
      }
      if(this.head==tail){
        tail=-1;
      }else{
        if(--tail==-1){
          tail=arr.length-1;
        }
      }
      this.tail=tail;
      return true;
    }
    
#ENDIF
#IF OfComparable
    @Override $TypeNameModifier$ToIntFunction$<E>$ getQueryComparator($exposedType$ key){
      return (k)->Integer.signum(k.compareTo(key));
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Object key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[head]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Boolean key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[head]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Byte key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[head]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Character key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[head]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Short key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[head]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Integer key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[head]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Long key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[head]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Float key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[head]==null;
      }
      return false;
    }
    @SuppressWarnings("unchecked")
    @Override public boolean contains(Double key){
      final int tail;
      if((tail=this.tail)!=-1){
        if(key!=null){
          return super.uncheckedContainsMatch(tail,this.getQueryComparator(($exposedType$)key));
        }
        return arr[head]==null;
      }
      return false;
    }
    @Override boolean uncheckedremoveNull(int tail){
      final $ArrayType$[] arr;
      int head;
      if((arr=this.arr)[head=this.head]==null){
        if(tail==head){
          tail=-1;
        }else if(--tail==-1){
          tail=arr.length-1;
        }
        this.tail=tail;
        return true;
      }
      return false;
    }
#ENDIF

  }
  
/*
  
  abstract int insertionCompare($exposedType$ key1,$exposedType$ key2);

#IF OfLong,OfFloat,OfDouble
  abstract $TypeNameModifier$ToIntFunction$<E>$ getQueryComparator($exposedType$ key);
#ELSE
  abstract IntUnaryOperator getQueryComparator(int key);
#ENDIF
  #MACRO QueryImpl<contains>(uncheckedContainsMatch)
  #MACRO QueryImpl<removeVal>(uncheckedRemoveMatch)
#IF OfFloat,OfDouble
  abstract boolean uncheckedContainsMatch(int tail,double key);
  abstract boolean uncheckedRemoveMatch(int tail,double key);
  abstract boolean uncheckedContainsMatch(int tail,float key);
  abstract boolean uncheckedRemoveMatch(int tail,float key);
  @Override public boolean contains(float key){
    final int tail;
    return (tail=this.tail)!=-1 && this.uncheckedContainsMatch(tail,key);
  }
  @Override public boolean contains(double key){
    final int tail;
    return (tail=this.tail)!=-1 && this.uncheckedContainsMatch(tail,key);
  }
  @Override public boolean removeVal(float key){
    final int tail;
    return (tail=this.tail)!=-1 && this.uncheckedRemoveMatch(tail,key);
  }
  @Override public boolean removeVal(double key){
    final int tail;
    return (tail=this.tail)!=-1 && this.uncheckedRemoveMatch(tail,key);
  }
  #MACRO QueryObject<contains>(uncheckedContainsMatch)
  #MACRO QueryObject<remove>(uncheckedRemoveMatch)


 
  
  
#ELSE
  
 
  
#ENDIF
  public static class Ascending$<E>$ extends $ClassPrefix$OrderedSet$<E>${
    Ascending(int head,$ArrayType$[] arr,int tail){
      super(head,arr,tail);
    }
    Ascending(){
      super();
    }
#IF OfFloat,OfDouble
    @Override boolean uncheckedContainsMatch(int tail,double key){
  #IF OfFloat
      final float f;
      if((f=(float)key)==key){
        final $TypeNameModifier$ToIntFunction comparator;
        switch(Float.floatToRawIntBits(f)){
          case 0xff800000: //neg inf
            return this.arr[this.head]==$BoxedType$.NEGATIVE_INFINITY;
          default:
            comparator=this.getQueryComparator(f);
            break;
          case 0:
            comparator=this::comparePos0;
            break;
          case Integer.MIN_VALUE:
            comparator=this::compareNeg0;
        }
        return super.uncheckedContainsMatch(tail,comparator);
      }
      return f!=f && $BoxedType$.isNaN(this.arr[tail]);
  #ELSE
      if(key==key){
        final $TypeNameModifier$ToIntFunction comparator;
        final long bits;
        if((bits=Double.doubleToRawLongBits(key))==0){
          comparator=this::comparePos0;
        }else if(bits==Long.MIN_VALUE){
          comparator=this::compareNeg0;
        }else{
          comparator=this.getQueryComparator(key);
        }
        return super.uncheckedContainsMatch(tail,comparator);
      }
      return $BoxedType$.isNaN(this.arr[tail]);
  #ENDIF
    }
    @Override boolean uncheckedRemoveMatch(int tail,double key){
  #IF OfFloat
      final float f;
      if((f=(float)key)==key){
        $TypeNameModifier$ToIntFunction comparator;
        switch(Float.floatToRawIntBits(f)){
          case 0xff800000: //neg inf
            int head;
            final $ArrayType$[] arr;
            if(((arr=this.arr)[head=this.head])==$BoxedType$.NEGATIVE_INFINITY){
              if(tail==head){
                this.tail=-1;
              }else{
                if(++head==arr.length){
                  head=0;
                }
                this.head=head;
              }
              return true;
            }
            return false;
          default:
            comparator=this.getQueryComparator(f);
            break;
          case 0:
            comparator=this::comparePos0;
            break;
          case Integer.MIN_VALUE:
            comparator=this::compareNeg0;
        }
        return super.uncheckedRemoveMatch(tail,comparator);
      }else if(f!=f)
  #ELSE
      if(key==key){
        final $TypeNameModifier$ToIntFunction comparator;
        final long bits;
        if((bits=Double.doubleToRawLongBits(key))==0){
          comparator=this::comparePos0;
        }else if(bits==Long.MIN_VALUE){
          comparator=this::compareNeg0;
        }else{
          comparator=this.getQueryComparator(key);
        }
        return super.uncheckedRemoveMatch(tail,comparator);
      }
  #ENDIF
      {
        final $ArrayType$[] arr;
        if($BoxedType$.isNaN((arr=this.arr)[tail])){
          if(tail==this.head){
            tail=-1;
          }else{
            if(--tail==-1){
              tail=arr.length-1;
            }
            
          }
          this.tail=tail;
          return true;
        }
      }
      return false;
    }
    @Override boolean uncheckedContainsMatch(int tail,float key){
      if(key==key){
        $TypeNameModifier$ToIntFunction comparator;
        switch(Float.floatToRawIntBits(key)){
          case 0xff800000: //neg inf
            return this.arr[head]==$BoxedType$.NEGATIVE_INFINITY;
          default:
            comparator=this.getQueryComparator(key);
            break;
          case 0:
            comparator=this::comparePos0;
            break;
          case Integer.MIN_VALUE:
            comparator=this::compareNeg0;
        }
        return super.uncheckedContainsMatch(tail,comparator);
      }
      return $BoxedType$.isNaN(this.arr[tail]);
    }
    @Override boolean uncheckedRemoveMatch(int tail,float key){
      if(key==key){
        $TypeNameModifier$ToIntFunction comparator;
        switch(Float.floatToRawIntBits(key)){
          case 0xff800000: //neg inf
            int head;
            final $ArrayType$[] arr;
            if((arr=this.arr)[head=this.head]==$BoxedType$.NEGATIVE_INFINITY){
              if(tail==head){
                this.tail=-1;
              }else{
                if(++head==arr.length){
                  head=0;
                }
                this.head=head;
              }
              return true;
            }
            return false;
          default:
            comparator=this.getQueryComparator(key);
            break;
          case 0:
            comparator=this::comparePos0;
            break;
          case Integer.MIN_VALUE:
            comparator=this::compareNeg0;
        }
        return super.uncheckedRemoveMatch(tail,comparator);
      }
      final $ArrayType$[] arr;
      if($BoxedType$.isNaN((arr=this.arr)[tail])){
        if(tail==this.head){
          tail=-1;
        }else{
          if(--tail==-1){
            tail=arr.length-1;
          }
          
        }
        this.tail=tail;
        return true;
      }
      return false;
    }
#ENDIF
    @Override public $TypeNameModifier$Comparator$<E>$ comparator(){
      return $BoxedType$::compare;
    }
#IF OfLong,OfFloat,OfDouble
    @Override $TypeNameModifier$ToIntFunction$<E>$ getQueryComparator($exposedType$ key){
      return k->{
        if(k==key){
          return 0;
        }
        if(key<k){
          return 1;
        }
        return -1;
      };
    }
#ENDIF
#IF OfChar,OfShort,OfInt
    @Override IntUnaryOperator getQueryComparator(int key){
  #IF OfChar,OfShort
      return k->Integer.signum(k-key);
  #ELSEIF OfInt,OfLong
      return k->{
        if(k==key){
          return 0;
        }
        if(key<k){
          return 1;
        }
        return -1;
      };
  #ENDIF
    }
#ENDIF

  }
  
  public static class Descending$<E>$ extends $ClassPrefix$OrderedSet$<E>${
    Descending(int head,$ArrayType$[] arr,int tail){
      super(head,arr,tail);
    }
    Descending(){
      super();
    }
#IF OfFloat,OfDouble
    @Override boolean uncheckedContainsMatch(int tail,double key){
  #IF OfFloat
        final float f;
        if((f=(float)key)==key){
          final $TypeNameModifier$ToIntFunction comparator;
          switch(Float.floatToRawIntBits(f)){
            case 0xff800000: //neg inf
              return this.arr[tail]==$BoxedType$.NEGATIVE_INFINITY;
            default:
              comparator=this.getQueryComparator(f);
              break;
            case 0:
              comparator=this::comparePos0;
              break;
            case Integer.MIN_VALUE:
              comparator=this::compareNeg0;
          }
          return super.uncheckedContainsMatch(tail,comparator);
        }
        return f!=f && $BoxedType$.isNaN(this.arr[head]);
  #ELSE
        if(key==key){
          final $TypeNameModifier$ToIntFunction comparator;
          final long bits;
          if((bits=Double.doubleToRawLongBits(key))==0){
            comparator=this::comparePos0;
          }else if(bits==Long.MIN_VALUE){
            comparator=this::compareNeg0;
          }else{
            comparator=this.getQueryComparator(key);
          }
          return super.uncheckedContainsMatch(tail,comparator);
        }
        return $BoxedType$.isNaN(this.arr[head]);
  #ENDIF
    }
    @Override boolean uncheckedRemoveMatch(int tail,double key){
  #IF OfFloat
      final float f;
      if((f=(float)key)==key){
        $TypeNameModifier$ToIntFunction comparator;
        switch(Float.floatToRawIntBits(f)){
          case 0xff800000: //neg inf
            final $ArrayType$[] arr;
            if((arr=this.arr)[tail]==$BoxedType$.NEGATIVE_INFINITY){
              if(tail==this.head){
                tail=-1;
              }else{
                if(--tail==-1){
                  tail=arr.length-1;
                }
                
              }
              this.tail=tail;
              return true;
            }
            return false;
          default:
            comparator=this.getQueryComparator(f);
            break;
          case 0:
            comparator=this::comparePos0;
            break;
          case Integer.MIN_VALUE:
            comparator=this::compareNeg0;
        }
        return super.uncheckedRemoveMatch(tail,comparator);
      }else if(f!=f)
  #ELSE
      if(key==key){
        final $TypeNameModifier$ToIntFunction comparator;
        final long bits;
        if((bits=Double.doubleToRawLongBits(key))==0){
          comparator=this::comparePos0;
        }else if(bits==Long.MIN_VALUE){
          comparator=this::compareNeg0;
        }else{
          comparator=this.getQueryComparator(key);
        }
        return super.uncheckedRemoveMatch(tail,comparator);
      }
  #ENDIF
      {
        int head;
        final $ArrayType$[] arr;
        if($BoxedType$.isNaN((arr=this.arr)[head=this.head])){
          if(tail==head){
            this.tail=-1;
          }else{
            if(++head==arr.length){
              head=0;
            }
            this.head=head;
          }
          return true;
        }
      }
      return false;
    }
    @Override boolean uncheckedContainsMatch(int tail,float key){
      if(key==key){
        $TypeNameModifier$ToIntFunction comparator;
        switch(Float.floatToRawIntBits(key)){
          case 0xff800000: //neg inf
            return this.arr[tail]==$BoxedType$.NEGATIVE_INFINITY;
          default:
            comparator=this.getQueryComparator(key);
            break;
          case 0:
            comparator=this::comparePos0;
            break;
          case Integer.MIN_VALUE:
            comparator=this::compareNeg0;
        }
        return super.uncheckedContainsMatch(tail,comparator);
      }
      return $BoxedType$.isNaN(this.arr[head]);
    }
    @Override boolean uncheckedRemoveMatch(int tail,float key){
      if(key==key){
        $TypeNameModifier$ToIntFunction comparator;
        switch(Float.floatToRawIntBits(key)){
          case 0xff800000: //neg inf
            final $ArrayType$[] arr;
            if((arr=this.arr)[tail]==$BoxedType$.NEGATIVE_INFINITY){
              if(tail==this.head){
                tail=-1;
              }else{
                if(--tail==-1){
                  tail=arr.length-1;
                }
                
              }
              this.tail=tail;
              return true;
            }
            return false;
          default:
            comparator=this.getQueryComparator(key);
            break;
          case 0:
            comparator=this::comparePos0;
            break;
          case Integer.MIN_VALUE:
            comparator=this::compareNeg0;
        }
        return super.uncheckedRemoveMatch(tail,comparator);
      }
      int head;
      final $ArrayType$[] arr;
      if($BoxedType$.isNaN((arr=this.arr)[head=this.head])){
        if(tail==head){
          this.tail=-1;
        }else{
          if(++head==arr.length){
            head=0;
          }
          this.head=head;
        }
        return true;
      }
      return false;
    }
#ENDIF
    @Override public $TypeNameModifier$Comparator$<E>$ comparator(){
      return $TypeNameModifier$Comparator::descendingCompare;
    }
#IF OfLong,OfFloat,OfDouble
    @Override $TypeNameModifier$ToIntFunction$<E>$ getQueryComparator($ArrayType$ key){
      return k->{
        if(k==key){
          return 0;
        }
        if(k<key){
          return 1;
        }
        return -1;
      };
    }
#ENDIF
#IF OfChar,OfShort,OfInt
    @Override IntUnaryOperator getQueryComparator(int key){
  #IF OfChar,OfShort
      return k->Integer.signum(key-k);
  #ELSEIF OfInt,OfLong
      return k->{
        if(k==key){
          return 0;
        }
        if(k<key){
          return 1;
        }
        return -1;
      };
  #ENDIF
    }
#ENDIF

  
  }
  */
  
}
#MACRODEF AddJustBeforeTail(TOPVAL,NEXTVAL)
//add it before the tail
int newTail;
switch(Integer.signum((newTail=tail+1)-head)){
  case 0:
    //fragmented must grow
    final $ArrayType$[] tmp;
    int arrLength;
    ArrCopy.semicheckedCopy(arr,0,tmp=$NewArray$[head=OmniArray.growBy50Pct(arrLength=arr.length)],0,tail);
    ArrCopy.uncheckedCopy(arr,newTail,tmp,head-=(arrLength-=newTail),arrLength);
    this.head=head;
    this.arr=arr=tmp;
    break;
  default:
    //nonfragmented
    if(newTail==arr.length){
      if(head==0){
        //must grow
        ArrCopy.semicheckedCopy(arr,0,arr=$NewArray$[OmniArray.growBy50Pct(newTail)],0,tail);
        this.arr=arr;
      }else{
        newTail=0;
      }
    }
  case -1:
    //fragmented
}
arr[tail]=NEXTVAL;
arr[newTail]=TOPVAL;
this.tail=newTail;
#ENDDEF
#MACRODEF AddJustAfterHead(BOTTOMVAL,NEXTVAL)
//add just after head
int newHead;
switch(Integer.signum(tail-(newHead=head-1))){
  case 0:
    //fragmented must grow
    final $ArrayType$[] tmp;
    int arrLength;
    ArrCopy.uncheckedCopy(arr,0,tmp=$NewArray$[tail=OmniArray.growBy50Pct(arrLength=arr.length)],0,head);
    ArrCopy.semicheckedCopy(arr,head,tmp,head=tail-(arrLength-=(head+1)),arrLength);
    --head;
    newHead=head-1;
    this.arr=arr=tmp;
    break;
  default:
    //nonfragmented
    if(newHead==-1){
      if(tail==(newHead=(tail=arr.length)-1)){
        //must grow
        this.tail=(head=OmniArray.growBy50Pct(tail))-1;
        ArrCopy.semicheckedCopy(arr,0,arr=$NewArray$[head],head-=newHead,newHead);
        --head;
        this.arr=arr;
      }
      newHead=head-1;
    }
  case -1:
    //fragmented
}
arr[head]=NEXTVAL;
arr[newHead]=BOTTOMVAL;
this.head=newHead;
#ENDDEF
#MACRODEF InitializeQueryParam<PARAMTYPE>(NEGRET)
#IF OfChar
  #IFSWITCH PARAMTYPE==Object
final int k;
if(key instanceof Character){
  k=(char)key;
}else if(key instanceof Integer || key instanceof Byte || key instanceof Short){
  if((k=((Number)key).intValue())!=($exposedType$)k){
    return NEGRET;
  }
}else if(key instanceof Long){
  final long l;
  if((l=(long)key)!=(k=($exposedType$)l)){
    return NEGRET;
  }
}else if(key instanceof Float){
  final float f;
  if((f=(float)key)!=(k=($exposedType$)f)){
    return NEGRET;
  }
}else if(key instanceof Double){
  final double d;
  if((d=(double)key)!=(k=($exposedType$)d)){
    return NEGRET;
  }
}else if(key instanceof Boolean){
  k=$queryCastBoolean$((boolean)key);
}else{
  return NEGRET;
}
  #ENDIF
#ENDIF
#IF OfShort
  #IFSWITCH PARAMTYPE==Object
final int k;
if(key instanceof Short || key instanceof Byte){
  k=((Number)key).shortValue();
}else if(key instanceof Integer){
  if((k=(int)key)!=($exposedType$)k){
    return NEGRET;
  }
}else if(key instanceof Long){
  final long l;
  if((l=(long)key)!=(k=($exposedType$)l)){
    return NEGRET;
  }
}else if(key instanceof Float){
  final float f;
  if((f=(float)key)!=(k=($exposedType$)f)){
    return NEGRET;
  }
}else if(key instanceof Double){
  final double d;
  if((d=(double)key)!=(k=($exposedType$)d)){
    return NEGRET;
  }
}else if(key instanceof Character){
  if((k=(char)key)>$BoxedType$.MAX_VALUE){
    return NEGRET;
  }
}else if(key instanceof Boolean){
  k=$queryCastBoolean$((boolean)key);
}else{
  return NEGRET;
}
  #ENDIF
#ENDIF
#IF OfInt
  #IFSWITCH PARAMTYPE==Object
final int k;
if(key instanceof Integer || key instanceof Short || key instanceof Byte){
  k=((Number)key).intValue();
}else if(key instanceof Long){
  final long l;
  if((l=(long)key)!=(k=($exposedType$)l)){
    return NEGRET;
  }
}else if(key instanceof Float){
  final float f;
  if((double)(f=(float)key)!=(double)(k=($exposedType$)f)){
    return NEGRET;
  }
}else if(key instanceof Double){
  final double d;
  if((d=(double)key)!=(k=($exposedType$)d)){
    return NEGRET;
  }
}else if(key instanceof Character){
  k=(char)key;
}else if(key instanceof Boolean){
  k=$queryCastBoolean$((boolean)key);
}else{
  return NEGRET;
}
  #ENDIF
#ENDIF
#IF OfLong
  #IFSWITCH PARAMTYPE==Object
final long k;
if(key instanceof Long || key instanceof Integer || key instanceof Byte || key instanceof Short){
  k=((Number)key).$exposedType$Value();
}else if(key instanceof Float){
  final float f;
  if(!TypeUtil.floatEquals(f=(float)key,k=($exposedType$)f)){
    return NEGRET;
  }
}else if(key instanceof Double){
  final double d;
  if(!TypeUtil.doubleEquals(d=(double)key,k=($exposedType$)d)){
    return NEGRET;
  }
}else if(key instanceof Character){
  k=(char)key;
}else if(key instanceof Boolean){
  k=$queryCastBoolean$((boolean)key);
}else{
  return NEGRET;
}
  #ENDIF
#ENDIF
#ENDDEF
#MACRODEF QueryImpl<METHODNAME>(UNCHECKEDMETHOD)
#IF OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
@Override public boolean METHODNAME(boolean key){
  final int tail;
  #IF OfFloat,OfDouble
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,key?this::comparePos1:this::comparePos0);
  #ELSE
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,getQueryComparator($queryCastBoolean$(key)));
  #ENDIF
}
#ENDIF
#IF OfChar,OfShort,OfInt,OfLong
@Override public boolean METHODNAME(byte key){
  final int tail;
  #IF OfChar
  return key>=0 && (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,getQueryComparator(key));
  #ELSE
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,getQueryComparator(key));
  #ENDIF
}
#ENDIF
#IF OfChar,OfShort,OfInt,OfLong,OfFloat
@Override public boolean METHODNAME(char key){
  final int tail;
  #IF OfChar,OfInt,OfLong
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,getQueryComparator(key));
  #ELSEIF OfFloat
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,key==0?this::comparePos0:getQueryComparator(key));
  #ELSE
  return key<=$BoxedType$.MAX_VALUE && (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,getQueryComparator(key));
  #ENDIF
}
#ENDIF
#IF OfChar,OfShort,OfFloat
@Override public boolean METHODNAME(short key){
  final int tail;
  #IF OfChar
  return key>=0 && (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,getQueryComparator(key));
  #ELSEIF OfFloat
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,key==0?this::comparePos0:getQueryComparator(key));
  #ELSE
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,getQueryComparator(key));
  #ENDIF
}
#ENDIF
#IF OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
@Override public boolean METHODNAME(int key){
  final int tail;
  #IF OfInt,OfLong
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,getQueryComparator(key));
  #ELSEIF OfFloat
  return (tail=this.tail)!=-1 && TypeUtil.checkCastToFloat(key) && super.UNCHECKEDMETHOD(tail,key==0?this::comparePos0:getQueryComparator(key));
  #ELSEIF OfDouble
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,key==0?this::comparePos0:getQueryComparator(key));
  #ELSE
  return key==($exposedType$)key && (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,getQueryComparator(key));
  #ENDIF
}
#ENDIF
#IF OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
@Override public boolean METHODNAME(long key){
  final int tail;
  #IF OfLong
  return (tail=this.tail)!=-1 && super.UNCHECKEDMETHOD(tail,getQueryComparator(key));
  #ELSEIF OfFloat,OfDouble
  return (tail=this.tail)!=-1 && TypeUtil.checkCastTo$BoxedType$(key) && super.UNCHECKEDMETHOD(tail,key==0?this::comparePos0:getQueryComparator(key));
  #ELSE
  final int k;
  return (tail=this.tail)!=-1 && (k=($exposedType$)key)==key && super.UNCHECKEDMETHOD(tail,getQueryComparator(k));
  #ENDIF
}
#ENDIF
#IF OfChar,OfShort,OfInt,OfLong
@Override public boolean METHODNAME(float key){
  #IF OfLong
  final int tail;
  final long k;
  return (tail=this.tail)!=-1 && TypeUtil.floatEquals(key,k=($exposedType$)key) && super.UNCHECKEDMETHOD(tail,getQueryComparator(k));
  #ELSEIF OfInt
  final int tail,k;
  return (tail=this.tail)!=-1 && (double)(k=($exposedType$)key)==(double)key && super.UNCHECKEDMETHOD(tail,getQueryComparator(k));
  #ELSE
  final int tail,k;
  return (tail=this.tail)!=-1 && (k=($exposedType$)key)==key && super.UNCHECKEDMETHOD(tail,getQueryComparator(k));
  #ENDIF
}
#ENDIF
#IF OfChar,OfShort,OfInt,OfLong
@Override public boolean METHODNAME(double key){
  #IF OfLong
  final int tail;
  final long k;
  return (tail=this.tail)!=-1 && TypeUtil.doubleEquals(key,k=($exposedType$)key) && super.UNCHECKEDMETHOD(tail,getQueryComparator(k));
  #ELSE
  final int tail,k;
  return (tail=this.tail)!=-1 && (k=($exposedType$)key)==key && super.UNCHECKEDMETHOD(tail,getQueryComparator(k));
  #ENDIF
}
#ENDIF
#IF OfChar,OfShort,OfInt,OfLong
#IFSWITCH METHODNAME==removeVal
@Override public boolean remove(Object key){
#ELSE
@Override public boolean METHODNAME(Object key){
#ENDIF
  final int tail;
  if((tail=this.tail)!=-1){
    #MACRO InitializeQueryParam<Object>(false)
    return super.UNCHECKEDMETHOD(tail,getQueryComparator(k));
  }
  return false;
}
#ENDIF
#ENDDEF
#MACRODEF QueryObject<METHODNAME>(UNCHECKEDMETHODNAME)
#IF OfFloat,OfDouble
  @Override public boolean METHODNAME(Object key){
    final int tail;
    if((tail=this.tail)!=-1){
      final $TypeNameModifier$ToIntFunction comparator;
#IF OfFloat
      if(key instanceof Float){
        return this.UNCHECKEDMETHODNAME(tail,(float)key);
      }else if(key instanceof Integer){
        final int i;
        if(!TypeUtil.checkCastToFloat(i=(int)key)){
          return false;
        }
        comparator = i==0?this::comparePos0:this.getQueryComparator(i);
      }else if(key instanceof Long){
        final long l;
        if(!TypeUtil.checkCastToFloat(l=(long)key)){
          return false;
        }
        comparator = l==0?this::comparePos0:this.getQueryComparator(l);
      }else if(key instanceof Double){
        return this.UNCHECKEDMETHODNAME(tail,(double)key);
      }else if(key instanceof Byte || key instanceof Short){
        final int i;
        comparator = (i=((Number)key).intValue())==0?this::comparePos0:this.getQueryComparator(i);
      
#ELSE
      if(key instanceof Double){
        return this.UNCHECKEDMETHODNAME(tail,(double)key);
      }else if(key instanceof Integer || key instanceof Byte || key instanceof Short){
        final int i;
        comparator=(i=((Number)key).intValue())==0 ? this::comparePos0 : this.getQueryComparator(i);
      }else if(key instanceof Long){
        final long l;
        if(!TypeUtil.checkCastToDouble(l=(long)key)){
          return false;
        }
        comparator = l==0?this::comparePos0:this.getQueryComparator(l);
      }else if(key instanceof Float){
        return this.UNCHECKEDMETHODNAME(tail,(float)key);
#ENDIF
      }else if(key instanceof Character){
        final int i;
        comparator = (i=(char)key)==0?this::comparePos0:this.getQueryComparator(i);
      }else if(key instanceof Boolean){
        comparator = (boolean)key ? this::comparePos1: this::comparePos0;
      }else{
        return false;
      }
      return super.UNCHECKEDMETHODNAME(tail,comparator);
    }
    return false;
  }
  
#ENDIF
#ENDDEF
