#TYPEDEF OfGeneric
package omni.impl.set;
import java.io.ObjectOutput;
import java.io.Externalizable;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.lang.reflect.Method;
import java.lang.invoke.VarHandle;
import java.lang.invoke.MethodHandles;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import omni.impl.AbstractBooleanItr;
import omni.impl.AbstractByteItr;
import java.io.ObjectOutputStream;

final class FieldAndMethodAccessor{
  private FieldAndMethodAccessor(){
    super();
  }
  private static final VarHandle MODIFIER_HANDLE;
  static
  {
    try
    {
      var lookup = MethodHandles.privateLookupIn(Field.class, MethodHandles.lookup());
      MODIFIER_HANDLE = lookup.findVarHandle(Field.class, "modifiers", int.class);
    }
    catch(IllegalAccessException|NoSuchFieldException e)
    {
      throw new ExceptionInInitializerError(e);
    }
  }
  private static void makeNonFinal(Field field){
    int mods=field.getModifiers();
    if(Modifier.isFinal(mods))
    {
      MODIFIER_HANDLE.set(field,mods&~Modifier.FINAL);
    }
  }
  /*
  private static final Field MODIFIERS_FIELD;
  static{
    try{
      MODIFIERS_FIELD=Field.class.getDeclaredField("modifiers");
      MODIFIERS_FIELD.setAccessible(true);
    }catch(NoSuchFieldException | SecurityException e){
        throw new ExceptionInInitializerError(e);
    }
  }
  */
  static Field prepareFieldForObj(Object obj,String fieldName){
    return prepareFieldForClass(obj.getClass(),fieldName);
  }
  static Method prepareMethodForObj(Object obj,String methodName,Class<?>...params){
    return prepareMethodForClass(obj.getClass(),methodName,params);
  }
  static Field prepareFieldForClassName(String className,String fieldName){
    try{
      return prepareFieldForClass(Class.forName(className),fieldName);
    }catch(ClassNotFoundException e){
      throw new ExceptionInInitializerError(e);
    }
  }
  static Method prepareMethodForClassName(String className,String methodName,Class<?>...params){
    try{
      return prepareMethodForClass(Class.forName(className),methodName,params);
    }catch(ClassNotFoundException e){
      throw new ExceptionInInitializerError(e);
    }
  }
  static Object getValue(Field field,Object obj){
    try{
      return field.get(obj);
    }catch(IllegalArgumentException | IllegalAccessException e){
      throw new RuntimeException(e);
    }
  }
  static void setIntValue(Field field,Object obj,int val){
    try{
      field.setInt(obj,val);
    }catch(IllegalArgumentException | IllegalAccessException e){
      throw new RuntimeException(e);
    }
  }
  static int getIntValue(Field field,Object obj){
    try{
      return field.getInt(obj);
    }catch(IllegalArgumentException | IllegalAccessException e){
      throw new RuntimeException(e);
    }
  }
  static Field prepareFieldForClass(Class<?> clazz,String fieldName){
    try{
      Field field=clazz.getDeclaredField(fieldName);
      makeNonFinal(field);
      field.setAccessible(true);
      return field;
    }catch(NoSuchFieldException | SecurityException | IllegalArgumentException e){
      for(var field:clazz.getDeclaredFields()){
        System.err.println(field);
      }
      throw new ExceptionInInitializerError(e);
    }
  }
  private static void writeObjectHelper(Object obj,ObjectOutputStream oos,Method writeObjectMethod) throws IOException{
      try {
          writeObjectMethod.invoke(obj,oos);
      }catch(IllegalAccessException e){
          throw new Error(e);
        }catch(InvocationTargetException e){
          var cause=e.getCause();
          if(cause instanceof RuntimeException){
            throw (RuntimeException)cause;
          }else if(cause instanceof IOException){
            throw (IOException)cause;
          }
          throw new Error(e);
        }
  }
  private static void writeReplaceHelper(Object obj,ObjectOutputStream oos,Method writeReplaceMethod) throws IOException{
    Object replacement=null;
    try{
      replacement=writeReplaceMethod.invoke(obj);
    }catch(IllegalAccessException e){
      throw new Error(e);
    }catch(InvocationTargetException e){
      var cause=e.getCause();
      if(cause instanceof RuntimeException){
        throw (RuntimeException)cause;
      }else if(cause instanceof IOException){
        throw (IOException)cause;
      }
      throw new Error(e);
    }
    ((Externalizable)replacement).writeExternal(oos);
  }
  private static void writeReplaceHelper(Object obj,ObjectOutputStream oos,Method writeReplaceMethod,Method writeObjectMethod) throws IOException{
    Object replacement=null;
    try{
      replacement=writeReplaceMethod.invoke(obj);
    }catch(IllegalAccessException e){
      throw new Error(e);
    }catch(InvocationTargetException e){
      var cause=e.getCause();
      if(cause instanceof RuntimeException){
        throw (RuntimeException)cause;
      }else if(cause instanceof IOException){
        throw (IOException)cause;
      }
      throw new Error(e);
    }
    writeObjectHelper(replacement,oos,writeObjectMethod);
  }
  static Method prepareMethodForClass(Class<?> clazz,String methodName,Class<?>...params){
    try{
      Method method=clazz.getDeclaredMethod(methodName,params);
      method.setAccessible(true);
      return method;
    }catch(NoSuchMethodException e) {
      throw new ExceptionInInitializerError(e);
    }
  }
  static Object callMethod(Method method,Object obj,Object...params){
    try{
      return method.invoke(obj,params);
    }catch(InvocationTargetException|IllegalAccessException e){
      throw new Error(e);
    }
  }
  
  private static final char DOLLARSIGN=(char)36;
  #MACRO TypeImpl<Ref>(<?>,Object)
  #MACRO TypeImpl<Boolean>(,boolean)
  #MACRO TypeImpl<Byte>(,byte)
  #MACRO TypeImpl<Char>(,char)
  #MACRO TypeImpl<Short>(,short)
  #MACRO TypeImpl<Int>(,int)
  #MACRO TypeImpl<Long>(,long)
  #MACRO TypeImpl<Float>(,float)
  #MACRO TypeImpl<Double>(,double)
  
  static interface AbstractOpenAddressHashSet{
    public static int size(Object obj){
      return ((omni.impl.set.AbstractOpenAddressHashSet<?>)obj).size;
    }
    public static int maxTableSize(Object obj){
      return ((omni.impl.set.AbstractOpenAddressHashSet<?>)obj).maxTableSize;
    }
    public static float loadFactor(Object obj){
      return ((omni.impl.set.AbstractOpenAddressHashSet<?>)obj).loadFactor;
    }
  }
  static interface AbstractIntegralTypeOpenAddressHashSet extends AbstractOpenAddressHashSet{
    public static int size(Object obj){
      return ((omni.impl.set.AbstractIntegralTypeOpenAddressHashSet<?>)obj).size;
    }
    public static int maxTableSize(Object obj){
      return ((omni.impl.set.AbstractIntegralTypeOpenAddressHashSet<?>)obj).maxTableSize;
    }
    public static float loadFactor(Object obj){
      return ((omni.impl.set.AbstractIntegralTypeOpenAddressHashSet<?>)obj).loadFactor;
    }
    public static long word0(Object obj){
      return ((omni.impl.set.AbstractIntegralTypeOpenAddressHashSet<?>)obj).word0;
    }
    public static long word1(Object obj){
      return ((omni.impl.set.AbstractIntegralTypeOpenAddressHashSet<?>)obj).word1;
    }
    public static long word2(Object obj){
      return ((omni.impl.set.AbstractIntegralTypeOpenAddressHashSet<?>)obj).word2;
    }
    public static long word3(Object obj){
      return ((omni.impl.set.AbstractIntegralTypeOpenAddressHashSet<?>)obj).word3;
    }
    public static int tableSize(Object obj){
      return ((omni.impl.set.AbstractIntegralTypeOpenAddressHashSet<?>)obj).tableSize;
    }
  }
  
}
#MACRODEF TypeImpl<CLASSPREFIX>(TYPEPARAMETER,ARRTYPE)

#IFSWITCH CLASSPREFIX==Boolean
static interface AbstractCLASSPREFIXSet{
  static final AbstractBooleanItr EMPTY_ITR=omni.impl.set.AbstractBooleanSet.EMPTY_ITR;
  static final omni.impl.set.AbstractBooleanSet.AscendingEmptyView CHECKED_EMPTY_ASCENDING_HEAD=omni.impl.set.AbstractBooleanSet.CHECKED_EMPTY_ASCENDING_HEAD;
  static final omni.impl.set.AbstractBooleanSet.DescendingEmptyView CHECKED_EMPTY_DESCENDING_HEAD=omni.impl.set.AbstractBooleanSet.CHECKED_EMPTY_DESCENDING_HEAD;
  static final omni.impl.set.AbstractBooleanSet.AscendingEmptyView CHECKED_EMPTY_ASCENDING_MIDDLE=omni.impl.set.AbstractBooleanSet.CHECKED_EMPTY_ASCENDING_MIDDLE;
  static final omni.impl.set.AbstractBooleanSet.DescendingEmptyView CHECKED_EMPTY_DESCENDING_MIDDLE=omni.impl.set.AbstractBooleanSet.CHECKED_EMPTY_DESCENDING_MIDDLE;
  static final omni.impl.set.AbstractBooleanSet.AscendingEmptyView CHECKED_EMPTY_ASCENDING_TAIL=omni.impl.set.AbstractBooleanSet.CHECKED_EMPTY_ASCENDING_TAIL;
  static final omni.impl.set.AbstractBooleanSet.DescendingEmptyView CHECKED_EMPTY_DESCENDING_TAIL=omni.impl.set.AbstractBooleanSet.CHECKED_EMPTY_DESCENDING_TAIL;
  static final omni.impl.set.AbstractBooleanSet.AscendingEmptyView UNCHECKED_EMPTY_ASCENDING=omni.impl.set.AbstractBooleanSet.UNCHECKED_EMPTY_ASCENDING;
  static final omni.impl.set.AbstractBooleanSet.DescendingEmptyView UNCHECKED_EMPTY_DESCENDING=omni.impl.set.AbstractBooleanSet.UNCHECKED_EMPTY_DESCENDING;
}
static interface CLASSPREFIXSetImpl extends AbstractCLASSPREFIXSet{
  public static void writeObject(Object obj,ObjectOutputStream oos) throws IOException{
    ((Externalizable)obj).writeExternal(oos);
  }
  public static omni.impl.set.CLASSPREFIXSetImpl clone(Object obj){
    return (omni.impl.set.CLASSPREFIXSetImpl)((omni.impl.set.CLASSPREFIXSetImpl)obj).clone();
  }
  public static int state(Object obj){
    return ((omni.impl.set.CLASSPREFIXSetImpl)obj).state;
  }
  static interface Checked extends CLASSPREFIXSetImpl{
    
    public static omni.impl.set.CLASSPREFIXSetImpl.Checked clone(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl.Checked)((omni.impl.set.CLASSPREFIXSetImpl.Checked)obj).clone();
    }
    public static void writeObject(Object obj,ObjectOutputStream oos) throws IOException{
      ((Externalizable)obj).writeExternal(oos);
    }
    public static int state(Object obj){
      return ((omni.impl.set.CLASSPREFIXSetImpl)obj).state;
    }
  }
  static interface Descending extends CLASSPREFIXSetImpl{
    public static omni.impl.set.CLASSPREFIXSetImpl.Descending clone(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl.Descending)((omni.impl.set.CLASSPREFIXSetImpl.Descending)obj).clone();
    }
    public static void writeObject(Object obj,ObjectOutputStream oos) throws IOException{
      ((Externalizable)obj).writeExternal(oos);
    }
    public static int state(Object obj){
      return ((omni.impl.set.CLASSPREFIXSetImpl)obj).state;
    }
    static interface Checked extends Descending{
      public static omni.impl.set.CLASSPREFIXSetImpl.Descending.Checked clone(Object obj){
        return (omni.impl.set.CLASSPREFIXSetImpl.Descending.Checked)((omni.impl.set.CLASSPREFIXSetImpl.Descending.Checked)obj).clone();
      }
      public static void writeObject(Object obj,ObjectOutputStream oos) throws IOException{
        ((Externalizable)obj).writeExternal(oos);
      }
      public static int state(Object obj){
        return ((omni.impl.set.CLASSPREFIXSetImpl)obj).state;
      }
    }
  }
  static interface AbstractFullView extends AbstractCLASSPREFIXSet{
    static final Field rootField=prepareFieldForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"AbstractFullView","root");
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
  }
  static interface DescendingView extends AbstractFullView{
    static final Method writeReplaceMethod=prepareMethodForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"DescendingView","writeReplace");
  
    public static Method cloneMethod=prepareMethodForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"DescendingView","clone");
    public static omni.impl.set.CLASSPREFIXSetImpl.Descending clone(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl.Descending)callMethod(cloneMethod,obj);
    }
    public static void writeObject(Object obj,ObjectOutputStream oos) throws IOException{
        writeReplaceHelper(obj,oos,writeReplaceMethod);
      }
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
    static interface Checked extends DescendingView{
      static final Method writeReplaceMethod=prepareMethodForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"DescendingView"+DOLLARSIGN+"Checked","writeReplace");
	  static final Method writeObjectMethod=prepareMethodForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"DescendingView"+DOLLARSIGN+"Checked"+DOLLARSIGN+"SerializationIntermediate","writeObject",ObjectOutputStream.class);
      
      public static Method cloneMethod=prepareMethodForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"DescendingView"+DOLLARSIGN+"Checked","clone");
      public static omni.impl.set.CLASSPREFIXSetImpl.Descending.Checked clone(Object obj){
        return (omni.impl.set.CLASSPREFIXSetImpl.Descending.Checked)callMethod(cloneMethod,obj);
      }
      public static void writeObject(Object obj,ObjectOutputStream oos) throws IOException{
        writeReplaceHelper(obj,oos,writeReplaceMethod,writeObjectMethod);
      }
      static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
        return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
      }
    }
  }
  static interface AscendingView extends AbstractFullView{
    static final Method writeReplaceMethod=prepareMethodForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"AscendingView","writeReplace");
  
    public static Method cloneMethod=prepareMethodForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"AscendingView","clone");
    public static omni.impl.set.CLASSPREFIXSetImpl clone(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)callMethod(cloneMethod,obj);
    }
    public static void writeObject(Object obj,ObjectOutputStream oos) throws IOException{
        writeReplaceHelper(obj,oos,writeReplaceMethod);
      }
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
    static interface Checked extends AscendingView{
      static final Method writeReplaceMethod=prepareMethodForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"AscendingView"+DOLLARSIGN+"Checked","writeReplace");
  	  static final Method writeObjectMethod=prepareMethodForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"AscendingView"+DOLLARSIGN+"Checked"+DOLLARSIGN+"SerializationIntermediate","writeObject",ObjectOutputStream.class);
      public static Method cloneMethod=prepareMethodForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"AscendingView"+DOLLARSIGN+"Checked","clone");
      public static omni.impl.set.CLASSPREFIXSetImpl.Checked clone(Object obj){
        return (omni.impl.set.CLASSPREFIXSetImpl.Checked)callMethod(cloneMethod,obj);
      }
      public static void writeObject(Object obj,ObjectOutputStream oos) throws IOException{
        writeReplaceHelper(obj,oos,writeReplaceMethod,writeObjectMethod);
      }
      static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
        return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
      }
    }
  }
  static interface AbstractSingleView extends AbstractCLASSPREFIXSet{
    static final Field rootField=prepareFieldForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"AbstractFullView","root");
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
  }
  static interface UncheckedTrueView extends AbstractSingleView{
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
    static interface Descending extends UncheckedTrueView{
      static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
        return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
      }
    }
    static interface Checked extends UncheckedTrueView{
      static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
        return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
      }
      static interface Descending extends Checked{
        static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
          return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
        }
      }
    }
  }
  static interface UncheckedFalseView extends AbstractSingleView{
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
    static interface Descending extends UncheckedFalseView{
      static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
        return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
      }
    }
    static interface Checked extends UncheckedFalseView{
      static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
        return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
      }
      static interface Descending extends Checked{
        static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
          return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
        }
      }
    }
  }
  static interface UncheckedAscendingFullItr{
    static final Field rootField=prepareFieldForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"UncheckedAscendingFullItr","root");
    static final Field itrStateField=prepareFieldForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"UncheckedAscendingFullItr","itrState");
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
    static int itrState(Object obj){
      return getIntValue(itrStateField,obj);
    }
  }
  static interface CheckedAscendingFullItr extends UncheckedAscendingFullItr{
    static final Field expectedRootStateField=prepareFieldForClassName("omni.impl.set.CLASSPREFIXSetImpl"+DOLLARSIGN+"CheckedAscendingFullItr","expectedRootState");
    
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
    static int expectedRootState(Object obj){
      return getIntValue(expectedRootStateField,obj);
    }
    static int itrState(Object obj){
      return getIntValue(itrStateField,obj);
    }
  }
  static interface UncheckedDescendingFullItr extends UncheckedAscendingFullItr{
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
    static int itrState(Object obj){
      return getIntValue(itrStateField,obj);
    }
  }
  static interface CheckedDescendingFullItr extends CheckedAscendingFullItr{
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
    static int expectedRootState(Object obj){
      return getIntValue(expectedRootStateField,obj);
    }
    static int itrState(Object obj){
      return getIntValue(itrStateField,obj);
    }
  }
  static interface UncheckedTrueItr extends UncheckedAscendingFullItr{
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
    static int itrState(Object obj){
      return getIntValue(itrStateField,obj);
    }
  }
  static interface UncheckedFalseItr extends UncheckedTrueItr{
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
    static int itrState(Object obj){
      return getIntValue(itrStateField,obj);
    }
  }
  static interface CheckedTrueItr extends UncheckedAscendingFullItr{
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
    static int itrState(Object obj){
      return getIntValue(itrStateField,obj);
    }
  }
  static interface CheckedFalseItr extends CheckedTrueItr{
    static omni.impl.set.CLASSPREFIXSetImpl root(Object obj){
      return (omni.impl.set.CLASSPREFIXSetImpl)getValue(rootField,obj);
    }
    static int itrState(Object obj){
      return getIntValue(itrStateField,obj);
    }
  }
}
#ELSEIFSWITCH CLASSPREFIX==Byte
//TODO ByteSet
#ELSE
static interface CLASSPREFIXOpenAddressHashSet
  #IFSWITCH CLASSPREFIX==Char,Short,Int,Long
  extends AbstractIntegralTypeOpenAddressHashSet{
  public static long word0(Object obj){
    return ((omni.impl.set.CLASSPREFIXOpenAddressHashSetTYPEPARAMETER)obj).word0;
  }
  public static long word1(Object obj){
    return ((omni.impl.set.CLASSPREFIXOpenAddressHashSetTYPEPARAMETER)obj).word1;
  }
  public static long word2(Object obj){
    return ((omni.impl.set.CLASSPREFIXOpenAddressHashSetTYPEPARAMETER)obj).word2;
  }
  public static long word3(Object obj){
    return ((omni.impl.set.CLASSPREFIXOpenAddressHashSetTYPEPARAMETER)obj).word3;
  }
  public static int tableSize(Object obj){
    return ((omni.impl.set.CLASSPREFIXOpenAddressHashSetTYPEPARAMETER)obj).tableSize;
  }
  #ELSE
  extends AbstractOpenAddressHashSet{
  #ENDIF
  #IFSWITCH CLASSPREFIX==Ref
  public static final Object DELETED=getValue(prepareFieldForClassName("omni.impl.set.CLASSPREFIXOpenAddressHashSet","DELETED"),null);
  public static final Object NULL=getValue(prepareFieldForClassName("omni.impl.set.CLASSPREFIXOpenAddressHashSet","NULL"),null);
  #ENDIF
  
  public static int size(Object obj){
    return ((omni.impl.set.CLASSPREFIXOpenAddressHashSetTYPEPARAMETER)obj).size;
  }
  public static int maxTableSize(Object obj){
    return ((omni.impl.set.CLASSPREFIXOpenAddressHashSetTYPEPARAMETER)obj).maxTableSize;
  }
  public static float loadFactor(Object obj){
    return ((omni.impl.set.CLASSPREFIXOpenAddressHashSetTYPEPARAMETER)obj).loadFactor;
  }
  public static void writeObject(Object obj,ObjectOutput oos) throws IOException{
    ((Externalizable)obj).writeExternal(oos);
  }
  #IFSWITCH CLASSPREFIX==Double
    public static long[] table(Object obj){
  #ELSEIFSWITCH CLASSPREFIX==Float
    public static int[] table(Object obj){
  #ELSEIFSWITCH CLASSPREFIX==Ref
    public static Object[] table(Object obj){
  #ELSE
    public static ARRTYPE[] table(Object obj){
  #ENDIF
    return ((omni.impl.set.CLASSPREFIXOpenAddressHashSetTYPEPARAMETER)obj).table;
  }
  public static interface Itr{
    static final Field rootField=prepareFieldForClassName("omni.impl.set.CLASSPREFIXOpenAddressHashSet"+DOLLARSIGN+"Itr","root");
    public static omni.impl.set.CLASSPREFIXOpenAddressHashSetTYPEPARAMETER root(Object obj){
      return (omni.impl.set.CLASSPREFIXOpenAddressHashSetTYPEPARAMETER)getValue(rootField,obj);
    }
    static final Field offsetField=prepareFieldForClassName("omni.impl.set.CLASSPREFIXOpenAddressHashSet"+DOLLARSIGN+"Itr","offset");
    public static int offset(Object obj){
      return getIntValue(offsetField,obj);
    }
  }
  public static interface Checked extends CLASSPREFIXOpenAddressHashSet{
    public static void writeObject(Object obj,ObjectOutput oos) throws IOException{
      ((Externalizable)obj).writeExternal(oos);
    }
    public static int size(Object obj){
      return ((omni.impl.set.CLASSPREFIXOpenAddressHashSet.CheckedTYPEPARAMETER)obj).size;
    }
    public static int maxTableSize(Object obj){
      return ((omni.impl.set.CLASSPREFIXOpenAddressHashSet.CheckedTYPEPARAMETER)obj).maxTableSize;
    }
    public static float loadFactor(Object obj){
      return ((omni.impl.set.CLASSPREFIXOpenAddressHashSet.CheckedTYPEPARAMETER)obj).loadFactor;
    }
    #IFSWITCH CLASSPREFIX==Char,Short,Int,Long
    public static long word0(Object obj){
      return ((omni.impl.set.CLASSPREFIXOpenAddressHashSet.CheckedTYPEPARAMETER)obj).word0;
    }
    public static long word1(Object obj){
      return ((omni.impl.set.CLASSPREFIXOpenAddressHashSet.CheckedTYPEPARAMETER)obj).word1;
    }
    public static long word2(Object obj){
      return ((omni.impl.set.CLASSPREFIXOpenAddressHashSet.CheckedTYPEPARAMETER)obj).word2;
    }
    public static long word3(Object obj){
      return ((omni.impl.set.CLASSPREFIXOpenAddressHashSet.CheckedTYPEPARAMETER)obj).word3;
    }
    public static int tableSize(Object obj){
      return ((omni.impl.set.CLASSPREFIXOpenAddressHashSet.CheckedTYPEPARAMETER)obj).tableSize;
    }
    #ENDIF
    #IFSWITCH CLASSPREFIX==Double
    public static long[] table(Object obj){
    #ELSEIFSWITCH CLASSPREFIX==Float
    public static int[] table(Object obj){
    #ELSEIFSWITCH CLASSPREFIX==Ref
    public static Object[] table(Object obj){
    #ELSE
    public static ARRTYPE[] table(Object obj){
    #ENDIF
      return ((omni.impl.set.CLASSPREFIXOpenAddressHashSet.CheckedTYPEPARAMETER)obj).table;
    }
    public static int modCount(Object obj){
      return ((omni.impl.set.CLASSPREFIXOpenAddressHashSet.CheckedTYPEPARAMETER)obj).modCount;
    }
    public static interface Itr{
      static final Field rootField=prepareFieldForClassName("omni.impl.set.CLASSPREFIXOpenAddressHashSet"+DOLLARSIGN+"Checked"+DOLLARSIGN+"Itr","root");
      public static omni.impl.set.CLASSPREFIXOpenAddressHashSet.CheckedTYPEPARAMETER root(Object obj){
        return (omni.impl.set.CLASSPREFIXOpenAddressHashSet.CheckedTYPEPARAMETER)getValue(rootField,obj);
      }
      static final Field offsetField=prepareFieldForClassName("omni.impl.set.CLASSPREFIXOpenAddressHashSet"+DOLLARSIGN+"Checked"+DOLLARSIGN+"Itr","offset");
      public static int offset(Object obj){
        return getIntValue(offsetField,obj);
      }
      static final Field modCountField=prepareFieldForClassName("omni.impl.set.CLASSPREFIXOpenAddressHashSet"+DOLLARSIGN+"Checked"+DOLLARSIGN+"Itr","modCount");
      public static int modCount(Object obj){
        return getIntValue(modCountField,obj);
      }
      static final Field lastRetField=prepareFieldForClassName("omni.impl.set.CLASSPREFIXOpenAddressHashSet"+DOLLARSIGN+"Checked"+DOLLARSIGN+"Itr","lastRet");
      public static int lastRet(Object obj){
        return getIntValue(lastRetField,obj);
      }
    }
  }
}
#ENDIF
#ENDDEF