#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl.seq;
import org.junit.jupiter.api.Assertions;
#IF OfDouble,OfLong,OfInt
import java.util.function.$TypeNameModifier$Consumer;
#ELSEIFNOT OfRef
import omni.function.$TypeNameModifier$Consumer;
#ENDIF
import omni.impl.$ClassPrefix$InputTestArgType;
import omni.impl.$ClassPrefix$OutputTestArgType;
#IF OfInt,OfLong,OfDouble
import java.util.function.$TypeNameModifier$Predicate;
#ELSEIFNOT OfRef
import omni.function.$TypeNameModifier$Predicate;
#ENDIF
import java.util.function.Consumer;
import omni.impl.FunctionCallType;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import omni.api.OmniCollection;
import java.util.function.Predicate;
import omni.impl.$SNode$;
import omni.api.OmniIterator;
import omni.api.OmniStack;
import omni.util.TypeUtil;
import omni.impl.QueryCastType;
@SuppressWarnings({"rawtypes","unchecked"})
class $ClassPrefix$SnglLnkSeqMonitor implements $ClassPrefix$SeqMonitor{
  static enum NestedType{
    QUEUE,
    STACK;
  }
  static enum QueryTester
  {
#IF OfRef
    ObjectNonNull(true){
      @Override boolean invokecontainsObject($ClassPrefix$ArrSeqMonitor seqMonitor){throw new UnsupportedOperationException();}
      @Override boolean invokecontainsBoxed($ClassPrefix$ArrSeqMonitor seqMonitor){throw new UnsupportedOperationException();}
      @Override boolean invokecontainsUnboxed($ClassPrefix$ArrSeqMonitor seqMonitor){throw new UnsupportedOperationException();}
      @Override boolean invokeremoveValObject($ClassPrefix$ArrSeqMonitor seqMonitor){throw new UnsupportedOperationException();}
      @Override boolean invokeremoveValBoxed($ClassPrefix$ArrSeqMonitor seqMonitor){throw new UnsupportedOperationException();}
      @Override boolean invokeremoveValUnboxed($ClassPrefix$ArrSeqMonitor seqMonitor){throw new UnsupportedOperationException();}
      @Override int invokesearchObject($ClassPrefix$ArrSeqMonitor seqMonitor){throw new UnsupportedOperationException();}
      @Override int invokesearchBoxed($ClassPrefix$ArrSeqMonitor seqMonitor){throw new UnsupportedOperationException();}
      @Override int invokesearchUnboxed($ClassPrefix$ArrSeqMonitor seqMonitor){throw new UnsupportedOperationException();}
      @Override void addEqualsVal($ClassPrefix$ArrSeqMonitor seqMonitor){throw new UnsupportedOperationException();}
      @Override void addNotEqualsVal($ClassPrefix$ArrSeqMonitor seqMonitor){
        seqMonitor.seq.add(new Object());
        ++seqMonitor.expectedSeqModCount;
        ++seqMonitor.expectedParentModCount;
        ++seqMonitor.expectedRootModCount;
        ++seqMonitor.expectedSeqSize;
        ++seqMonitor.expectedParentSize;
        ++seqMonitor.expectedRootSize;
      }
      @Override boolean invokecontainsMonitored($ClassPrefix$ArrSeqMonitor seqMonitor,MonitoredObject monitoredObject){
        return seqMonitor.seq.contains(monitoredObject);
      }
      @Override boolean invokeremoveValMonitored($ClassPrefix$ArrSeqMonitor seqMonitor,MonitoredObject monitoredObject){
        boolean ret=seqMonitor.seq.remove(monitoredObject);
        if(ret){
          ++seqMonitor.expectedSeqModCount;
          ++seqMonitor.expectedParentModCount;
          ++seqMonitor.expectedRootModCount;
          --seqMonitor.expectedSeqSize;
          --seqMonitor.expectedParentSize;
          --seqMonitor.expectedRootSize;
#IF OfRef
          Assertions.assertNull((($ClassPrefix$ArrSeq)seqMonitor.root).arr[seqMonitor.rootPreAlloc+seqMonitor.parentPreAlloc+seqMonitor.expectedRootSize+seqMonitor.parentPostAlloc+seqMonitor.rootPostAlloc]);
#ENDIF
        }
        return ret;
      }
      @Override int invokesearchMonitored($ClassPrefix$ArrSeqMonitor seqMonitor,MonitoredObject monitoredObject){
        return ((OmniStack.Of$ClassPrefix$)seqMonitor.seq).search(monitoredObject);
      }
      @Override int initContainsEnd($ClassPrefix$ArrSeqMonitor seqMonitor,MonitoredObject monitoredObject){
        Assertions.assertEquals(0,seqMonitor.expectedSeqSize);
        for(int i=0;i<99;++i){
          seqMonitor.seq.add(new Object());
        }
        seqMonitor.seq.add(monitoredObject);
        seqMonitor.expectedSeqModCount+=100;
        seqMonitor.expectedParentModCount+=100;
        seqMonitor.expectedRootModCount+=100;
        seqMonitor.expectedSeqSize+=100;
        seqMonitor.expectedParentSize+=100;
        seqMonitor.expectedRootSize+=100;
        return seqMonitor.expectedSeqSize-1;
      }
      @Override int initContainsMiddle($ClassPrefix$ArrSeqMonitor seqMonitor,MonitoredObject monitoredObject){
        Assertions.assertEquals(0,seqMonitor.expectedSeqSize);
        for(int i=0;i<50;++i){
          seqMonitor.seq.add(new Object());
        }
        seqMonitor.seq.add(monitoredObject);
        for(int i=51;i<100;++i){
          seqMonitor.seq.add(new Object());
        }
        seqMonitor.expectedSeqModCount+=100;
        seqMonitor.expectedParentModCount+=100;
        seqMonitor.expectedRootModCount+=100;
        seqMonitor.expectedSeqSize+=100;
        seqMonitor.expectedParentSize+=100;
        seqMonitor.expectedRootSize+=100;
        return seqMonitor.expectedSeqSize/2;
      }
      @Override int initContainsBeginning($ClassPrefix$ArrSeqMonitor seqMonitor,MonitoredObject monitoredObject){
        Assertions.assertEquals(0,seqMonitor.expectedSeqSize);
        seqMonitor.seq.add(monitoredObject);
        for(int i=1;i<100;++i){
          seqMonitor.seq.add(new Object());
        }
        seqMonitor.expectedSeqModCount+=100;
        seqMonitor.expectedParentModCount+=100;
        seqMonitor.expectedRootModCount+=100;
        seqMonitor.expectedSeqSize+=100;
        seqMonitor.expectedParentSize+=100;
        seqMonitor.expectedRootSize+=100;
        return 0;
      }
    },
#ENDIF
  #MACRO QueryTesterImpl<null,Boolean,Boolean>(null,false)
  #MACRO QueryTesterImpl<null,Byte,Byte>(null,false)
  #MACRO QueryTesterImpl<null,Character,Character>(null,false)
  #MACRO QueryTesterImpl<null,Short,Short>(null,false)
  #MACRO QueryTesterImpl<null,Integer,Integer>(null,false)
  #MACRO QueryTesterImpl<null,Long,Long>(null,false)
  #MACRO QueryTesterImpl<null,Float,Float>(null,false)
  #MACRO QueryTesterImpl<null,Double,Double>(null,false)
  #MACRO QueryTesterImpl<null,Object,Object>(null,false)
  #MACRO QueryTesterImpl<false,Boolean,boolean>(false,true)
  #MACRO QueryTesterImpl<true,Boolean,boolean>(true,false)
  #MACRO QueryTesterImpl<0,Byte,byte>(0,true)
  #MACRO QueryTesterImpl<pos1,Byte,byte>(1,false)
  #MACRO QueryTesterImpl<pos2,Byte,byte>(2,false)
  #MACRO QueryTesterImpl<neg1,Byte,byte>(-1,false)
  #MACRO QueryTesterImpl<0,Character,char>(0,true)
  #MACRO QueryTesterImpl<pos1,Character,char>(1,false)
  #MACRO QueryTesterImpl<pos2,Character,char>(2,false)
  #MACRO QueryTesterImpl<MAX_BYTE_PLUS1,Character,char>(((char)Byte.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MAX_SHORT_PLUS1,Character,char>(((char)Short.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<0,Short,short>(0,true)
  #MACRO QueryTesterImpl<pos1,Short,short>(1,false)
  #MACRO QueryTesterImpl<pos2,Short,short>(2,false)
  #MACRO QueryTesterImpl<neg1,Short,short>(-1,false)
  #MACRO QueryTesterImpl<MAX_BYTE_PLUS1,Short,short>(((short)Byte.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_BYTE_MINUS1,Short,short>(((short)Byte.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<0,Integer,int>(0,true)
  #MACRO QueryTesterImpl<pos1,Integer,int>(1,false)
  #MACRO QueryTesterImpl<pos2,Integer,int>(2,false)
  #MACRO QueryTesterImpl<neg1,Integer,int>(-1,false)
  #MACRO QueryTesterImpl<MAX_BYTE_PLUS1,Integer,int>(((int)Byte.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_BYTE_MINUS1,Integer,int>(((int)Byte.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<MAX_SHORT_PLUS1,Integer,int>(((int)Short.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_SHORT_MINUS1,Integer,int>(((int)Short.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<MAX_CHAR_PLUS1,Integer,int>(((int)Character.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MAX_SAFE_INT_PLUS1,Integer,int>(TypeUtil.MAX_SAFE_INT+1,false)
  #MACRO QueryTesterImpl<MIN_SAFE_INT_MINUS1,Integer,int>(TypeUtil.MIN_SAFE_INT-1,false)
  #MACRO QueryTesterImpl<0,Long,long>(0,true)
  #MACRO QueryTesterImpl<pos1,Long,long>(1,false)
  #MACRO QueryTesterImpl<pos2,Long,long>(2,false)
  #MACRO QueryTesterImpl<neg1,Long,long>(-1,false)
  #MACRO QueryTesterImpl<MAX_BYTE_PLUS1,Long,long>(((long)Byte.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_BYTE_MINUS1,Long,long>(((long)Byte.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<MAX_SHORT_PLUS1,Long,long>(((long)Short.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_SHORT_MINUS1,Long,long>(((long)Short.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<MAX_CHAR_PLUS1,Long,long>(((long)Character.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MAX_SAFE_INT_PLUS1,Long,long>(((long)TypeUtil.MAX_SAFE_INT)+1,false)
  #MACRO QueryTesterImpl<MIN_SAFE_INT_MINUS1,Long,long>(((long)TypeUtil.MIN_SAFE_INT)-1,false)
  #MACRO QueryTesterImpl<MAX_INT_PLUS1,Long,long>(((long)Integer.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_INT_MINUS1,Long,long>(((long)Integer.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<MAX_SAFE_LONG_PLUS1,Long,long>(((long)TypeUtil.MAX_SAFE_LONG)+1,false)
  #MACRO QueryTesterImpl<MIN_SAFE_LONG_MINUS1,Long,long>(((long)TypeUtil.MIN_SAFE_LONG)-1,false)
  #MACRO QueryTesterImpl<pos0,Float,float>(0.0F,true)
  #MACRO QueryTesterImpl<neg0,Float,float>(-0.0F,true)
  #MACRO QueryTesterImpl<pos1,Float,float>(1,false)
  #MACRO QueryTesterImpl<pos2,Float,float>(2,false)
  #MACRO QueryTesterImpl<neg1,Float,float>(-1,false)
  #MACRO QueryTesterImpl<MAX_BYTE_PLUS1,Float,float>(((float)Byte.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_BYTE_MINUS1,Float,float>(((float)Byte.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<MAX_SHORT_PLUS1,Float,float>(((float)Short.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_SHORT_MINUS1,Float,float>(((float)Short.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<MAX_CHAR_PLUS1,Float,float>(((float)Character.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MAX_INT_PLUS1,Float,float>(((float)Integer.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_INT_MINUS1,Float,float>(((float)Integer.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<MAX_LONG_PLUS1,Float,float>(((float)Long.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_LONG_MINUS1,Float,float>(((float)Long.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<MIN_FLOAT_VALUE,Float,float>(Float.MIN_VALUE,false)
  #MACRO QueryTesterImpl<MAX_FLOAT_VALUE,Float,float>(Float.MAX_VALUE,false)
  #MACRO QueryTesterImpl<NaN,Float,float>(Float.NaN,false)
  #MACRO QueryTesterImpl<pos0,Double,double>(0.0D,true)
  #MACRO QueryTesterImpl<neg0,Double,double>(-0.0D,true)
  #MACRO QueryTesterImpl<pos1,Double,double>(1,false)
  #MACRO QueryTesterImpl<pos2,Double,double>(2,false)
  #MACRO QueryTesterImpl<neg1,Double,double>(-1,false)
  #MACRO QueryTesterImpl<MAX_BYTE_PLUS1,Double,double>(((double)Byte.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_BYTE_MINUS1,Double,double>(((double)Byte.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<MAX_SHORT_PLUS1,Double,double>(((double)Short.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_SHORT_MINUS1,Double,double>(((double)Short.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<MAX_CHAR_PLUS1,Double,double>(((double)Character.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MAX_SAFE_INT_PLUS1,Double,double>(((double)TypeUtil.MAX_SAFE_INT)+1,false)
  #MACRO QueryTesterImpl<MIN_SAFE_INT_MINUS1,Double,double>(((double)TypeUtil.MIN_SAFE_INT)-1,false)
  #MACRO QueryTesterImpl<MAX_INT_PLUS1,Double,double>(((double)Integer.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_INT_MINUS1,Double,double>(((double)Integer.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<MAX_LONG_PLUS1,Double,double>(((double)Long.MAX_VALUE)+1,false)
  #MACRO QueryTesterImpl<MIN_LONG_MINUS1,Double,double>(((double)Long.MIN_VALUE)-1,false)
  #MACRO QueryTesterImpl<MIN_FLOAT_VALUE,Double,double>(Float.MIN_VALUE,false)
  #MACRO QueryTesterImpl<MAX_FLOAT_VALUE,Double,double>(Float.MAX_VALUE,false)
  #MACRO QueryTesterImpl<MIN_DOUBLE_VALUE,Double,double>(Double.MIN_VALUE,false)
  #MACRO QueryTesterImpl<MAX_DOUBLE_VALUE,Double,double>(Double.MAX_VALUE,false)
  #MACRO QueryTesterImpl<NaN,Double,double>(Double.NaN,false)
  ;

#MACRODEF QueryTesterImpl<VALUE_NAME,BOXED_TYPE,PRIMITIVE_TYPE>(PRIMITIVE_VAL,NOT_EQUALS_VAL)
BOXED_TYPEVALUE_NAME(false){
  @Override boolean invokecontainsObject($ClassPrefix$ArrSeqMonitor seqMonitor){return seqMonitor.seq.contains((Object)(PRIMITIVE_TYPE)(PRIMITIVE_VAL));}
  @Override boolean invokeremoveValObject($ClassPrefix$ArrSeqMonitor seqMonitor){
    boolean ret=seqMonitor.seq.remove((Object)(PRIMITIVE_TYPE)(PRIMITIVE_VAL));
    if(ret){
      ++seqMonitor.expectedSeqModCount;
      --seqMonitor.expectedSeqSize;
#IF OfRef
      Assertions.assertNull((($ClassPrefix$ArrSeq)seqMonitor.root).arr[seqMonitor.rootPreAlloc+seqMonitor.parentPreAlloc+seqMonitor.expectedRootSize+seqMonitor.parentPostAlloc+seqMonitor.rootPostAlloc]);
#ENDIF
    }
    return ret;
  }
  @Override int invokesearchObject($ClassPrefix$ArrSeqMonitor seqMonitor){return ((OmniStack.Of$ClassPrefix$)seqMonitor.seq).search((Object)(PRIMITIVE_TYPE)(PRIMITIVE_VAL));}
  @Override boolean invokecontainsBoxed($ClassPrefix$ArrSeqMonitor seqMonitor){return seqMonitor.seq.contains((BOXED_TYPE)(PRIMITIVE_TYPE)(PRIMITIVE_VAL));}
#IFSWITCH BOXED_TYPE==Object
  @Override boolean invokeremoveValBoxed($ClassPrefix$ArrSeqMonitor seqMonitor){
    boolean ret=seqMonitor.seq.remove((BOXED_TYPE)(PRIMITIVE_TYPE)(PRIMITIVE_VAL));
    if(ret){
      ++seqMonitor.expectedSeqModCount;
      --seqMonitor.expectedSeqSize;
  #IF OfRef
      Assertions.assertNull((($ClassPrefix$ArrSeq)seqMonitor.root).arr[seqMonitor.rootPreAlloc+seqMonitor.parentPreAlloc+seqMonitor.expectedRootSize+seqMonitor.parentPostAlloc+seqMonitor.rootPostAlloc]);
  #ENDIF
    }
    return ret;
  }
#ELSE
  @Override boolean invokeremoveValBoxed($ClassPrefix$ArrSeqMonitor seqMonitor){
    boolean ret=seqMonitor.seq.removeVal((BOXED_TYPE)(PRIMITIVE_TYPE)(PRIMITIVE_VAL));
    if(ret){
      ++seqMonitor.expectedSeqModCount;
      --seqMonitor.expectedSeqSize;
  #IF OfRef
      Assertions.assertNull((($ClassPrefix$ArrSeq)seqMonitor.root).arr[seqMonitor.rootPreAlloc+seqMonitor.parentPreAlloc+seqMonitor.expectedRootSize+seqMonitor.parentPostAlloc+seqMonitor.rootPostAlloc]);
  #ENDIF
    }
    return ret;
  }
#ENDIF
  @Override int invokesearchBoxed($ClassPrefix$ArrSeqMonitor seqMonitor){return ((OmniStack.Of$ClassPrefix$)seqMonitor.seq).search((BOXED_TYPE)(PRIMITIVE_TYPE)(PRIMITIVE_VAL));}
  @Override boolean invokecontainsUnboxed($ClassPrefix$ArrSeqMonitor seqMonitor){return seqMonitor.seq.contains((PRIMITIVE_TYPE)(PRIMITIVE_VAL));}
#IFSWITCH PRIMITIVE_TYPE==Object
  @Override boolean invokeremoveValUnboxed($ClassPrefix$ArrSeqMonitor seqMonitor){
    boolean ret=seqMonitor.seq.remove((PRIMITIVE_TYPE)(PRIMITIVE_VAL));
    if(ret){
      ++seqMonitor.expectedSeqModCount;
      --seqMonitor.expectedSeqSize;
  #IF OfRef
      Assertions.assertNull((($ClassPrefix$ArrSeq)seqMonitor.root).arr[seqMonitor.rootPreAlloc+seqMonitor.parentPreAlloc+seqMonitor.expectedRootSize+seqMonitor.parentPostAlloc+seqMonitor.rootPostAlloc]);
  #ENDIF
    }
    return ret;
  }
#ELSE
  @Override boolean invokeremoveValUnboxed($ClassPrefix$ArrSeqMonitor seqMonitor){
    boolean ret=seqMonitor.seq.removeVal((PRIMITIVE_TYPE)(PRIMITIVE_VAL));
    if(ret){
      ++seqMonitor.expectedSeqModCount;
      --seqMonitor.expectedSeqSize;
  #IF OfRef
      Assertions.assertNull((($ClassPrefix$ArrSeq)seqMonitor.root).arr[seqMonitor.rootPreAlloc+seqMonitor.parentPreAlloc+seqMonitor.expectedRootSize+seqMonitor.parentPostAlloc+seqMonitor.rootPostAlloc]);
  #ENDIF
    }
    return ret;
  }
#ENDIF
  @Override int invokesearchUnboxed($ClassPrefix$ArrSeqMonitor seqMonitor){return ((OmniStack.Of$ClassPrefix$)seqMonitor.seq).search((PRIMITIVE_TYPE)(PRIMITIVE_VAL));}
  void addEqualsVal($ClassPrefix$ArrSeqMonitor seqMonitor){
#IF OfRef
    seqMonitor.seq.add((Object)(PRIMITIVE_TYPE)(PRIMITIVE_VAL));
    ++seqMonitor.expectedSeqModCount;
    ++seqMonitor.expectedSeqSize;
#ELSE
  #IFSWITCH VALUE_NAME==null
    throw new UnsupportedOperationException();
  #ELSE
    #IF OfBoolean
      #IFSWITCH PRIMITIVE_TYPE==boolean
    seqMonitor.seq.add((boolean)(PRIMITIVE_VAL));
      #ELSE
        #IFSWITCH VALUE_NAME==pos1
    seqMonitor.seq.add((boolean)(true));
        #ELSE
    seqMonitor.seq.add((boolean)((PRIMITIVE_VAL)==1));
        #ENDIF
      #ENDIF
    #ELSE
      #IFSWITCH PRIMITIVE_TYPE==boolean
    seqMonitor.seq.add(($exposedType$)$queryCastBoolean$(PRIMITIVE_VAL));
      #ELSE
    seqMonitor.seq.add(($exposedType$)(PRIMITIVE_VAL));
      #ENDIF
    #ENDIF
    ++seqMonitor.expectedSeqModCount;
    ++seqMonitor.expectedSeqSize;
  #ENDIF
#ENDIF
  }
  void addNotEqualsVal($ClassPrefix$ArrSeqMonitor seqMonitor){
    #IF OfRef
    seqMonitor.seq.add((Object)(boolean)NOT_EQUALS_VAL);
    #ELSE
    seqMonitor.seq.add((boolean)NOT_EQUALS_VAL);
    #ENDIF
    ++seqMonitor.expectedSeqModCount;
    ++seqMonitor.expectedSeqSize;
  }
},
#ENDDEF
    
    final boolean isObjectNonNull;
    QueryTester(boolean isObjectNonNull){
      this.isObjectNonNull=isObjectNonNull;
    }
    boolean invokecontains($ClassPrefix$ArrSeqMonitor seqMonitor,QueryCastType queryCastType){
      switch(queryCastType){
        case Unboxed:
          return invokecontainsUnboxed(seqMonitor);
        case ToBoxed:
          return invokecontainsBoxed(seqMonitor);
        case ToObject:
          return invokecontainsObject(seqMonitor);
        default:
          throw new Error("Unknown queryCastType "+queryCastType);
      }
    }
    boolean invokeremoveVal($ClassPrefix$ArrSeqMonitor seqMonitor,QueryCastType queryCastType){
      switch(queryCastType){
        case Unboxed:
          return invokeremoveValUnboxed(seqMonitor);
        case ToBoxed:
          return invokeremoveValBoxed(seqMonitor);
        case ToObject:
          return invokeremoveValObject(seqMonitor);
        default:
          throw new Error("Unknown queryCastType "+queryCastType);
      }
    }
    int invokesearch($ClassPrefix$ArrSeqMonitor seqMonitor,QueryCastType queryCastType){
      switch(queryCastType){
        case Unboxed:
          return invokesearchUnboxed(seqMonitor);
        case ToBoxed:
          return invokesearchBoxed(seqMonitor);
        case ToObject:
          return invokesearchObject(seqMonitor);
        default:
          throw new Error("Unknown queryCastType "+queryCastType);
      }
    }
    
    abstract boolean invokecontainsObject($ClassPrefix$ArrSeqMonitor seqMonitor);
    abstract boolean invokecontainsBoxed($ClassPrefix$ArrSeqMonitor seqMonitor);
    abstract boolean invokecontainsUnboxed($ClassPrefix$ArrSeqMonitor seqMonitor);
    abstract boolean invokeremoveValObject($ClassPrefix$ArrSeqMonitor seqMonitor);
    abstract boolean invokeremoveValBoxed($ClassPrefix$ArrSeqMonitor seqMonitor);
    abstract boolean invokeremoveValUnboxed($ClassPrefix$ArrSeqMonitor seqMonitor);
    abstract int invokesearchObject($ClassPrefix$ArrSeqMonitor seqMonitor);
    abstract int invokesearchBoxed($ClassPrefix$ArrSeqMonitor seqMonitor);
    abstract int invokesearchUnboxed($ClassPrefix$ArrSeqMonitor seqMonitor);
    abstract void addEqualsVal($ClassPrefix$ArrSeqMonitor seqMonitor);
    abstract void addNotEqualsVal($ClassPrefix$ArrSeqMonitor seqMonitor);
    void initDoesNotContain($ClassPrefix$ArrSeqMonitor seqMonitor){
      for(int i=0;i<100;++i){
        addNotEqualsVal(seqMonitor);
      }
    }
    int initContainsEnd($ClassPrefix$ArrSeqMonitor seqMonitor){
      Assertions.assertEquals(0,seqMonitor.expectedSeqSize);
      for(int i=0;i<99;++i){
        addNotEqualsVal(seqMonitor);
      }
      addEqualsVal(seqMonitor);
      return seqMonitor.expectedSeqSize-1;
    }
    int initContainsMiddle($ClassPrefix$ArrSeqMonitor seqMonitor){
      Assertions.assertEquals(0,seqMonitor.expectedSeqSize);
      for(int i=0;i<50;++i){
        addNotEqualsVal(seqMonitor);
      }
      addEqualsVal(seqMonitor);
      for(int i=51;i<100;++i){
        addNotEqualsVal(seqMonitor);
      }
      return seqMonitor.expectedSeqSize/2;
    }
    int initContainsBeginning($ClassPrefix$ArrSeqMonitor seqMonitor){
      addEqualsVal(seqMonitor);
      for(int i=1;i<100;++i){
        addNotEqualsVal(seqMonitor);
      }
      return 0;
    }
#IF OfRef
    boolean invokecontainsMonitored($ClassPrefix$ArrSeqMonitor seqMonitor,MonitoredObject monitoredObject){throw new UnsupportedOperationException();}
    boolean invokeremoveValMonitored($ClassPrefix$ArrSeqMonitor seqMonitor,MonitoredObject monitoredObject){throw new UnsupportedOperationException();}
    int invokesearchMonitored($ClassPrefix$ArrSeqMonitor seqMonitor,MonitoredObject monitoredObject){throw new UnsupportedOperationException();}
    int initContainsEnd($ClassPrefix$ArrSeqMonitor seqMonitor,MonitoredObject monitoredObject){throw new UnsupportedOperationException();}
    int initContainsMiddle($ClassPrefix$ArrSeqMonitor seqMonitor,MonitoredObject monitoredObject){throw new UnsupportedOperationException();}
    int initContainsBeginning($ClassPrefix$ArrSeqMonitor seqMonitor,MonitoredObject monitoredObject){throw new UnsupportedOperationException();}
#ENDIF
  };
  NestedType nestedType;
  CheckedType checkedType;
  final $ClassPrefix$SnglLnkSeq seq;
  int expectedSeqSize;
  int expectedSeqModCount;
  $ClassPrefix$SnglLnkSeqMonitor(NestedType nestedType,CheckedType checkedType){
    this.nestedType=nestedType;
    this.checkedType=checkedType;
    switch(nestedType){
      case QUEUE:
        this.seq=checkedType.checked?new $ClassPrefix$SnglLnkSeq.CheckedQueue():new $ClassPrefix$SnglLnkSeq.UncheckedQueue();
        break;
      case STACK:
        this.seq=checkedType.checked?new $ClassPrefix$SnglLnkSeq.CheckedStack():new $ClassPrefix$SnglLnkSeq.UncheckedStack();
        break;
      default:
        throw new Error("unknown nested type "+nestedType);
    }
  }
  public int getExpectedSeqSize(){
    return this.expectedSeqSize;
  }
  public void illegalAdd(PreModScenario preModScenario){
    switch(preModScenario){
      case ModSeq:
        $ClassPrefix$InputTestArgType.ARRAY_TYPE.callCollectionAdd(seq,0);
        ++expectedSeqModCount;
        ++expectedSeqSize;
        break;
      case NoMod:
        break;
      default:
        throw new Error("Unknown preModScenario "+preModScenario);
    }
  }
#IF OfRef
  public boolean add(Object obj){
    boolean ret=seq.add(obj);
    if(ret)
    {
      ++expectedSeqSize;
      ++expectedSeqModCount;
    }
    return ret;
  }
#ENDIF
  public boolean add(int val,$ClassPrefix$InputTestArgType inputArgType){
    boolean ret=inputArgType.callCollectionAdd(seq,val);
    if(ret){
      ++expectedSeqSize;
      ++expectedSeqModCount;
    }
    return ret;
  }
  public void push(int val,$ClassPrefix$InputTestArgType inputArgType){
    inputArgType.callStackPush(seq,val);
    ++expectedSeqSize;
    ++expectedSeqModCount;
  }
  public String toString(){
    StringBuilder builder=new StringBuilder();
    builder.append("$ClassPrefix$SnglLnkSeq.").append(checkedType.checked?"Checked":"Unchecked");
    switch(nestedType){
      case STACK:
        builder.append("Stack");
        break;
      case QUEUE:
        builder.append("Queue");
        break;
      default:
        throw new Error("Unknown nestedType "+nestedType);
    }
    return builder.toString();
  }
  public boolean isEmpty(){
    return seq.isEmpty();
  }
  public void forEach(MonitoredConsumer action,FunctionCallType functionCallType){
#IFNOT OfRef
    if(functionCallType==FunctionCallType.Boxed){
      seq.forEach((Consumer)action);
    }else
#ENDIF
    {
      seq.forEach(($TypeNameModifier$Consumer)action);
    }
  }
  public void clear(){
    int seqSize=expectedSeqSize;
    seq.clear();
    if(seqSize!=0){
      expectedSeqSize=0;
      ++expectedSeqModCount;
    }
  }
  public void pop(int expectedVal,$ClassPrefix$OutputTestArgType outputType){
    outputType.verifyStackPop(seq,expectedVal);
    --expectedSeqSize;
    ++expectedSeqModCount;
  }
  public void poll(int expectedVal,$ClassPrefix$OutputTestArgType outputType){
    outputType.verifyStackPoll(seq,expectedSeqSize,expectedVal);
    if(expectedSeqSize!=0){
      --expectedSeqSize;
      ++expectedSeqModCount;
    }
  }
  public void verifyRemoveIf(MonitoredRemoveIfPredicate pred,FunctionCallType functionCallType,int expectedNumRemoved,OmniCollection.Of$ClassPrefix$ clone){
#IF OfBoolean
    int seqSize=expectedSeqSize;
#ENDIF
    boolean retVal;
#IFNOT OfRef
    if(functionCallType==FunctionCallType.Boxed){
      retVal=seq.removeIf((Predicate)pred);
    }
    else
#ENDIF
    {
      retVal=seq.removeIf(($TypeNameModifier$Predicate)pred);
    }
    if(retVal){
      ++expectedSeqModCount;
      int numRemoved;
#IF OfBoolean
      int numTrue=0,numFalse=0;
      var cloneItr=clone.iterator();
      while(cloneItr.hasNext()){
        if(cloneItr.next$TypeNameModifier$()){
          ++numTrue;
        }else{
          ++numFalse;
        }
      }
      if(pred.removedVals.contains(true)){
        if(pred.removedVals.contains(false)){
          numRemoved=seqSize;
          Assertions.assertTrue(seq.isEmpty());
        }else{
          numRemoved=numTrue;
          Assertions.assertFalse(seq.contains(true));
        }
      }else{
        numRemoved=numFalse;
        Assertions.assertFalse(seq.contains(false));
      }
#ELSE
      numRemoved=pred.numRemoved;
      for(var removedVal:pred.removedVals){
        Assertions.assertFalse(seq.contains(removedVal));
      }
#ENDIF
      expectedSeqSize-=numRemoved;
      if(expectedNumRemoved!=-1){
        Assertions.assertEquals(expectedNumRemoved,numRemoved);
      }
    }else{
      Assertions.assertEquals(expectedSeqSize,clone.size());
      var seqItr=seq.iterator();
      var cloneItr=clone.iterator();
      for(int i=0;i<expectedSeqSize;++i){
#IF OfRef
        Assertions.assertSame(seqItr.next(),cloneItr.next());
#ELSE
        Assertions.assertEquals(seqItr.next$TypeNameModifier$(),cloneItr.next$TypeNameModifier$());
#ENDIF
      }
    }
    verifyStructuralIntegrity();
  }
  public void writeObject(ObjectOutputStream oos) throws IOException{
    oos.writeObject(seq);
  }
  public Object readObject(ObjectInputStream ois) throws IOException,ClassNotFoundException{
    return ois.readObject();
  }
  public void verifyStructuralIntegrity(){
    Assertions.assertEquals(expectedSeqSize,seq.size);
    if(checkedType.checked){
      switch(nestedType){
        case QUEUE:
          Assertions.assertEquals(expectedSeqModCount,(($ClassPrefix$SnglLnkSeq.CheckedQueue)seq).modCount);
          break;
        case STACK:
          Assertions.assertEquals(expectedSeqModCount,(($ClassPrefix$SnglLnkSeq.CheckedStack)seq).modCount);
          break;
        default:
          throw new Error("Unknown nested type "+nestedType);
      }
    }
    if(expectedSeqSize==0){
      Assertions.assertNull(seq.head);
    }else{
      $SNode$ node;
      Assertions.assertNotNull(node=seq.head);
      while(--expectedSeqSize!=0){
        Assertions.assertNotNull(node=node.next);
      }
      Assertions.assertNull(node.next);
    }
  }
  class UncheckedSnglLnkSeqItrMonitor implements ItrMonitor{
    final OmniIterator.Of$ClassPrefix$ itr;
    $SNode$ expectedPrev;
    $SNode$ expectedCurr;
    $SNode$ expectedNext;
    UncheckedSnglLnkSeqItrMonitor(){
      this.expectedNext=seq.head;
      this.itr=seq.iterator();
    }
    public void forEachRemaining(MonitoredConsumer action,FunctionCallType functionCallType){
#IFNOT OfRef
      if(functionCallType==FunctionCallType.Boxed){
        itr.forEachRemaining((Consumer)action);
      }else
#ENDIF
      {
        itr.forEachRemaining(($TypeNameModifier$Consumer)action);
      }
      $SNode$ expectedNext;
      if((expectedNext=this.expectedNext)!=null){
        $SNode$ expectedPrev,expectedCurr=this.expectedCurr;
        do{
          expectedPrev=expectedCurr;
        }while((expectedNext=(expectedCurr=expectedNext).next)!=null);
        this.expectedPrev=expectedPrev;
        this.expectedCurr=expectedCurr;
        this.expectedNext=null;
      }
    }
    public $ClassPrefix$SeqMonitor getSeqMonitor(){
      return $ClassPrefix$SnglLnkSeqMonitor.this;
    }
    public void verifyNext(int expectedVal,$ClassPrefix$OutputTestArgType outputType){
      outputType.verifyItrNext(itr,expectedVal);
      final $SNode$ expectedNext;
      this.expectedNext=(expectedNext=this.expectedNext).next;
      this.expectedPrev=this.expectedCurr;
      this.expectedCurr=expectedNext;
    }
    public void verifyIteratorState(){
      Assertions.assertSame(expectedPrev,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.AbstractItr.prev(itr));
      Assertions.assertSame(expectedCurr,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.AbstractItr.curr(itr));
      Assertions.assertSame(expectedNext,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.AbstractItr.next(itr));
      switch(nestedType)
      {
        case STACK:
          if(checkedType.checked)
          {
            Assertions.assertSame(seq,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.CheckedStack.Itr.parent(itr));
          }
          else
          {
            Assertions.assertSame(seq,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.UncheckedStack.Itr.parent(itr));
          }
          break;
        case QUEUE:
          if(checkedType.checked)
          {
            Assertions.assertSame(seq,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.CheckedQueue.Itr.parent(itr));
          }
          else
          {
            Assertions.assertSame(seq,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.UncheckedQueue.Itr.parent(itr));
          }
          break;
        default:
          throw new Error("Unknown nested type "+nestedType);
      }
    }
    public void iterateForward(){
      itr.next();
      final $SNode$ expectedNext;
      this.expectedNext=(expectedNext=this.expectedNext).next;
      this.expectedPrev=this.expectedCurr;
      this.expectedCurr=expectedNext;
    }
    public void remove(){
      itr.remove();
      --expectedSeqSize;
      ++expectedSeqModCount;
      this.expectedCurr=this.expectedPrev;
    }
    public boolean hasNext(){
      return itr.hasNext();
    }
  }
  class CheckedSnglLnkSeqItrMonitor extends UncheckedSnglLnkSeqItrMonitor
  {
    int expectedItrModCount;
    private CheckedSnglLnkSeqItrMonitor(){
      super();
      this.expectedItrModCount=expectedSeqModCount;
    }
    public void verifyIteratorState(){
      Assertions.assertSame(expectedPrev,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.AbstractItr.prev(itr));
      Assertions.assertSame(expectedCurr,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.AbstractItr.curr(itr));
      Assertions.assertSame(expectedNext,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.AbstractItr.next(itr));
      switch(nestedType)
      {
        case STACK:
          if(checkedType.checked)
          {
            Assertions.assertSame(seq,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.CheckedStack.Itr.parent(itr));
            Assertions.assertEquals(expectedItrModCount,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.CheckedStack.Itr.modCount(itr));
          }
          else
          {
            Assertions.assertSame(seq,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.UncheckedStack.Itr.parent(itr));
          }
          break;
        case QUEUE:
          if(checkedType.checked)
          {
            Assertions.assertSame(seq,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.CheckedQueue.Itr.parent(itr));
            Assertions.assertEquals(expectedItrModCount,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.CheckedQueue.Itr.modCount(itr));
          }
          else
          {
            Assertions.assertSame(seq,FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.UncheckedQueue.Itr.parent(itr));
          }
          break;
        default:
          throw new Error("Unknown nested type "+nestedType);
      }
      
    }
    @Override public void remove(){
      super.remove();
      ++expectedItrModCount;
    }
  }
  private static class SnglLnkSeqSequenceVerificationItr extends SequenceVerificationItr{
    $SNode$ curr;
    final $ClassPrefix$SnglLnkSeqMonitor seqMonitor;
    private SnglLnkSeqSequenceVerificationItr($ClassPrefix$SnglLnkSeqMonitor seqMonitor,$SNode$ curr){
      this.seqMonitor=seqMonitor;
      this.curr=curr;
    }
    @Override public SequenceVerificationItr verifyPostAlloc(int expectedVal){
      return this;
    }
    @Override public void verifyLiteralIndexAndIterate($ArrayType$ val){
#IF OfRef
      Assertions.assertSame(val,curr.val);
#ELSE
      Assertions.assertEquals(val,curr.val);
#ENDIF
      curr=curr.next;
    }
#IF OfRef
    @Override public void verifyIndexAndIterate(MonitoredObject monitoredObject){
      Object v;
      if((v=curr.val) instanceof MonitoredObject){
        Assertions.assertEquals(monitoredObject.compareVal,((MonitoredObject)v).compareVal);
      }else{
        Assertions.assertEquals(monitoredObject.compareVal,(Object)v);
      }
      curr=curr.next;
    }
#ENDIF
    @Override public void verifyIndexAndIterate($ClassPrefix$InputTestArgType inputArgType,int val){
      inputArgType.verifyVal(val,curr.val);
      curr=curr.next;
    }
    @Override public SequenceVerificationItr getPositiveOffset(int i){
      if(i<0){
        throw new Error("offset cannot be negative: "+i);
      }
      var currCopy=curr;
      while(i>0)
      {
        --i;
        currCopy=currCopy.next;
      }
      
      return new SnglLnkSeqSequenceVerificationItr(seqMonitor,currCopy);
    }
    @Override public SequenceVerificationItr skip(int i){
      if(i<0){
        throw new Error("offset cannot be negative: "+i);
      }
      while(i>0)
      {
        --i;
        curr=curr.next;
      }
      return this;
    }
    @Override public boolean equals(Object val){
      final SnglLnkSeqSequenceVerificationItr that;
      return val==this || (val instanceof SnglLnkSeqSequenceVerificationItr && (that=(SnglLnkSeqSequenceVerificationItr)val).seqMonitor.seq==this.seqMonitor.seq && that.curr==this.curr);
    }
    @Override public SequenceVerificationItr verifyRootPostAlloc(){
      return this;
    }
    @Override public SequenceVerificationItr verifyParentPostAlloc(){
      return this;
    }
  }
  public UncheckedSnglLnkSeqItrMonitor getItrMonitor(){
    return checkedType.checked
      ?new CheckedSnglLnkSeqItrMonitor()
      :new UncheckedSnglLnkSeqItrMonitor();
  }
  public SequenceVerificationItr verifyPreAlloc(){
    return new SnglLnkSeqSequenceVerificationItr(this,seq.head);
  }
  public SequenceVerificationItr verifyPreAlloc(int expectedVal){
    return new SnglLnkSeqSequenceVerificationItr(this,seq.head);
  }
  
}