#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl.seq;

import omni.impl.seq.$ClassPrefix$ArrSeq.UncheckedStack;
import omni.impl.seq.$ClassPrefix$ArrSeq.CheckedStack;
import omni.util.TypeConversionUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.NoSuchElementException;
#IF OfRef
@SuppressWarnings({"rawtypes","unchecked"}) 
#ENDIF
public class $ClassPrefix$ArrSeqStackTest
{

  #MACRO StructImpl<UncheckedStack>()
  #MACRO StructImpl<CheckedStack>()

}


#MACRODEF StructImpl<STRUCTNAME>()


#MACRO TestOutputMethods<DEFAULT>($ArrayType$,$TypeNameModifier$,$defaultVal$,OmniArray.Of$ClassPrefix$.DEFAULT_ARR)
#IFNOT OfRef
#MACRO TestOutputMethods<DEFAULT>($BoxedType$,,null,OmniArray.Of$ClassPrefix$.DEFAULT_BOXED_ARR)
  #IF OfBoolean
#MACRO TestOutputMethods<DEFAULT>(double$ArrayType$,Double,Double.NaN,OmniArray.OfDouble.DEFAULT_ARR)
#MACRO TestOutputMethods<DEFAULT>(float$ArrayType$,Float,Float.NaN,OmniArray.OfFloat.DEFAULT_ARR)
#MACRO TestOutputMethods<DEFAULT>(long$ArrayType$,Long,Long.MIN_VALUE,OmniArray.OfLong.DEFAULT_ARR)
#MACRO TestOutputMethods<DEFAULT>(int$ArrayType$,Int,Integer.MIN_VALUE,OmniArray.OfInt.DEFAULT_ARR)
#MACRO TestOutputMethods<DEFAULT>(short$ArrayType$,Short,Short.MIN_VALUE,OmniArray.OfShort.DEFAULT_ARR)
#MACRO TestOutputMethods<DEFAULT>(char$ArrayType$,Char,Character.MIN_VALUE,OmniArray.OfChar.DEFAULT_ARR)
#MACRO TestOutputMethods<DEFAULT>(byte$ArrayType$,Byte,Byte.MIN_VALUE,OmniArray.OfByte.DEFAULT_ARR)
  #ELSEIFNOT OfDouble
#MACRO TestOutputMethods<DEFAULT>(double,Double,Double.NaN,OmniArray.OfDouble.DEFAULT_ARR)
    #IFNOT OfFloat
#MACRO TestOutputMethods<DEFAULT>(float,Float,Float.NaN,OmniArray.OfFloat.DEFAULT_ARR)
      #IFNOT OfLong
#MACRO TestOutputMethods<DEFAULT>(long,Long,Long.MIN_VALUE,OmniArray.OfLong.DEFAULT_ARR)
        #IFNOT OfInt
#MACRO TestOutputMethods<DEFAULT>(int,Int,Integer.MIN_VALUE,OmniArray.OfInt.DEFAULT_ARR)
          #IFNOT OfShort,OfChar
#MACRO TestOutputMethods<DEFAULT>(short,Short,Short.MIN_VALUE,OmniArray.OfShort.DEFAULT_ARR)
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF  



#ENDDEF


#MACRODEF TestOutputMethods<INITIALCAPACITY>(OUTPUTTYPE,OUTPUTMODIFIER,DEFAULTVAL,DEFAULTARR)
#IFSWITCH STRUCTNAME==CheckedStack
@Test
public void testSTRUCTNAMEpopOUTPUTMODIFIER_void_seqIsEmpty(){
  #MACRO ConstructionRoutine()
  Assertions.assertThrows(NoSuchElementException.class,()->seq.popOUTPUTMODIFIER());
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
}
#ENDIF
@Test
public void testSTRUCTNAMEpopOUTPUTMODIFIER_void_seqIsNotEmpty(){
  #MACRO ConstructionRoutine()
  #MACRO PushAscending(100,$ArrayType$)
  for(int i=0;i<100;++i)
  {
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(100-i-1),seq.popOUTPUTMODIFIER());
    Assertions.assertEquals(100-i-1,seq.size());
#IFSWITCH STRUCTNAME==CheckedStack
    Assertions.assertEquals(100+i+1,seq.modCount);
#ENDIF
  }
}
@Test
public void testSTRUCTNAMEpollOUTPUTMODIFIER_void_seqIsEmpty(){
  #MACRO ConstructionRoutine()
  Assertions.assertEquals(DEFAULTVAL,seq.pollOUTPUTMODIFIER());
  Assertions.assertEquals(0,seq.size());
#IFSWITCH STRUCTNAME==CheckedStack
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
}
@Test
public void testSTRUCTNAMEpeekOUTPUTMODIFIER_void_seqIsEmpty(){
  #MACRO ConstructionRoutine()
  Assertions.assertEquals(DEFAULTVAL,seq.peekOUTPUTMODIFIER());
  Assertions.assertEquals(0,seq.size());
#IFSWITCH STRUCTNAME==CheckedStack
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
}
@Test
public void testSTRUCTNAMEpollOUTPUTMODIFIER_void_seqIsNotEmpty(){
  #MACRO ConstructionRoutine()
  #MACRO PushAscending(100,$ArrayType$)
  for(int i=0;i<100;++i)
  {
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(100-i-1),seq.pollOUTPUTMODIFIER());
    Assertions.assertEquals(100-i-1,seq.size());
#IFSWITCH STRUCTNAME==CheckedStack
    Assertions.assertEquals(100+i+1,seq.modCount);
#ENDIF
  }
  Assertions.assertEquals(DEFAULTVAL,seq.pollOUTPUTMODIFIER());
  Assertions.assertEquals(0,seq.size());
#IFSWITCH STRUCTNAME==CheckedStack
  Assertions.assertEquals(200,seq.modCount);
#ENDIF
}

@Test
public void testSTRUCTNAMEpeekOUTPUTMODIFIER_void_seqIsNotEmpty(){
  #MACRO ConstructionRoutine()
  for(int i=0;i<100;++i)
  {
    seq.push(TypeConversionUtil.convertTo$ArrayType$(i));
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(i),seq.peekOUTPUTMODIFIER());
    Assertions.assertEquals(i+1,seq.size());
#IFSWITCH STRUCTNAME==CheckedStack
    Assertions.assertEquals(i+1,seq.modCount);
#ENDIF
  }
  for(int i=0;i<100;++i)
  {
    var peeked=seq.peekOUTPUTMODIFIER();
    var polled=seq.pollOUTPUTMODIFIER();
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(100-i-1),peeked);
#IF OfRef
    Assertions.assertSame(polled,peeked);
#ELSE
    Assertions.assertEquals(polled,peeked);
#ENDIF
    Assertions.assertEquals(100-i-1,seq.size());
#IFSWITCH STRUCTNAME==CheckedStack
    Assertions.assertEquals(100+i+1,seq.modCount);
#ENDIF
  }
  Assertions.assertEquals(DEFAULTVAL,seq.peekOUTPUTMODIFIER());
  Assertions.assertEquals(0,seq.size());
#IFSWITCH STRUCTNAME==CheckedStack
  Assertions.assertEquals(200,seq.modCount);
#ENDIF
}
#ENDDEF




#MACRODEF ConstructionRoutine()
#IFSWITCH INITIALCAPACITY==DEFAULT
STRUCTNAME seq=new STRUCTNAME();
#ELSEIFSWITCH INITIALCAPACITY==NULL
STRUCTNAME seq=new STRUCTNAME(0,null);
#ELSE
STRUCTNAME seq=new STRUCTNAME(INITIALCAPACITY);
#ENDIF
#ENDDEF

#MACRODEF PushAscending(NUM_TO_PUSH,INPUTTYPE)
for(int i=0;i<NUM_TO_PUSH;++i)
{
  seq.push(TypeConversionUtil.convertToINPUTTYPE(i));
}
#ENDDEF