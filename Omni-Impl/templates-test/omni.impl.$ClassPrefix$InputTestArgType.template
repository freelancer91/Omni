#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl;
import omni.util.TypeConversionUtil;
import omni.api.OmniCollection;
import omni.api.OmniList;
import omni.api.OmniStack;
import omni.api.OmniQueue;
import omni.api.OmniDeque;
import omni.api.OmniListIterator;
import org.junit.jupiter.api.Assertions;
#IF OfRef
@SuppressWarnings({"rawtypes","unchecked"}) 
#ENDIF
public enum $ClassPrefix$InputTestArgType{
  #MACRO InputTestArgTypeImpl<ARRAY_TYPE,$ArrayType$,$ArrayType$,$ArrayType$>()
#IFNOT OfRef
  ,
  #MACRO InputTestArgTypeImpl<BOXED_TYPE,$BoxedType$,$ArrayType$,$ArrayType$>()
  #IFNOT OfBoolean
  ,
  #MACRO InputTestArgTypeImpl<PRIMITIVE_BOOLEAN,boolean,$ArrayType$,boolean>()
  ,
  #MACRO InputTestArgTypeImpl<BOXED_BOOLEAN,Boolean,$ArrayType$,boolean>()
    #IFNOT OfByte,OfChar
  ,
  #MACRO InputTestArgTypeImpl<PRIMITIVE_BYTE,byte,$ArrayType$,byte>()
  ,
  #MACRO InputTestArgTypeImpl<BOXED_BYTE,Byte,$ArrayType$,byte>()
      #IFNOT OfShort
  ,
  #MACRO InputTestArgTypeImpl<PRIMTIVE_SHORT,short,$ArrayType$,short>()
  ,
  #MACRO InputTestArgTypeImpl<BOXED_SHORT,Short,$ArrayType$,short>()
  ,
  #MACRO InputTestArgTypeImpl<PRIMITIVE_CHAR,char,$ArrayType$,char>()
  ,
  #MACRO InputTestArgTypeImpl<BOXED_CHAR,Character,$ArrayType$,char>()
        #IFNOT OfInt
  ,
  #MACRO InputTestArgTypeImpl<PRIMITIVE_INT,int,$ArrayType$,int>()
  ,
  #MACRO InputTestArgTypeImpl<BOXED_INT,Integer,$ArrayType$,int>()
          #IFNOT OfLong
  ,
  #MACRO InputTestArgTypeImpl<PRIMITIVE_LONG,long,$ArrayType$,long>()
  ,
  #MACRO InputTestArgTypeImpl<BOXED_LONG,Long,$ArrayType$,long>()
            #IFNOT OfFloat
  ,
  #MACRO InputTestArgTypeImpl<PRIMITIVE_FLOAT,float,$ArrayType$,float>()
  ,
  #MACRO InputTestArgTypeImpl<BOXED_FLOAT,Float,$ArrayType$,float>()
            #ENDIF
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF
  ;
#MACRODEF InputTestArgTypeImpl<VALUE_NAME,INPUTTYPE,OUTPUTTYPE,PRIMITIVE_TYPE>()
VALUE_NAME{
  public void callDequeAddLast(OmniCollection.Of$ClassPrefix$ seq,int valToConvert){((OmniDeque.Of$ClassPrefix$)seq).addLast(TypeConversionUtil.convertToINPUTTYPE(valToConvert));}
  public void callDequeAddFirst(OmniCollection.Of$ClassPrefix$ seq,int valToConvert){((OmniDeque.Of$ClassPrefix$)seq).addFirst(TypeConversionUtil.convertToINPUTTYPE(valToConvert));}
  public boolean callDequeOfferLast(OmniCollection.Of$ClassPrefix$ seq,int valToConvert){return ((OmniDeque.Of$ClassPrefix$)seq).offerLast(TypeConversionUtil.convertToINPUTTYPE(valToConvert));}
  public boolean callDequeOfferFirst(OmniCollection.Of$ClassPrefix$ seq,int valToConvert){return ((OmniDeque.Of$ClassPrefix$)seq).offerFirst(TypeConversionUtil.convertToINPUTTYPE(valToConvert));}
  public boolean callQueueOffer(OmniCollection.Of$ClassPrefix$ seq,int valToConvert){return ((OmniQueue.Of$ClassPrefix$)seq).offer(TypeConversionUtil.convertToINPUTTYPE(valToConvert));}
  public void callListItrAdd(OmniListIterator.Of$ClassPrefix$ itr,int valToConvert){itr.add(TypeConversionUtil.convertToINPUTTYPE(valToConvert));}
  public void callListItrSet(OmniListIterator.Of$ClassPrefix$ itr,int valToConvert){itr.set(TypeConversionUtil.convertToINPUTTYPE(valToConvert));}
  public void callListPut(OmniCollection.Of$ClassPrefix$ seq,int index,int valToConvert){((OmniList.Of$ClassPrefix$)seq).put(index,TypeConversionUtil.convertToINPUTTYPE(valToConvert));}
  public void callListAdd(OmniCollection.Of$ClassPrefix$ seq,int index,int valToConvert){((OmniList.Of$ClassPrefix$)seq).add(index,TypeConversionUtil.convertToINPUTTYPE(valToConvert));}
  public void callStackPush(OmniCollection.Of$ClassPrefix$ seq,int valToConvert){((OmniStack.Of$ClassPrefix$)seq).push(TypeConversionUtil.convertToINPUTTYPE(valToConvert));}
  public boolean callCollectionAdd(OmniCollection.Of$ClassPrefix$ seq,int valToConvert){return seq.add(TypeConversionUtil.convertToINPUTTYPE(valToConvert));}
#IF OfDouble,OfFloat,OfLong,OfInt
  #IFSWITCH VALUE_NAME==PRIMITIVE_BOOLEAN,BOXED_BOOLEAN,PRIMITIVE_BYTE,BOXED_BYTE,PRIMITIVE_CHAR,BOXED_CHAR,PRIMITIVE_SHORT,BOXED_SHORT
  public void verifyVal(int expectedValToConvert,$ArrayType$ actualVal){Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPEPRIMITIVE_TYPE(expectedValToConvert),actualVal);}
  #ELSE
  public void verifyVal(int expectedValToConvert,$ArrayType$ actualVal){Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedValToConvert),actualVal);}
  #ENDIF
#ELSEIF OfShort
  #IFSWITCH VALUE_NAME==PRIMITIVE_BOOLEAN,BOXED_BOOLEAN,PRIMITIVE_BYTE,BOXED_BYTE
  public void verifyVal(int expectedValToConvert,$ArrayType$ actualVal){Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPEPRIMITIVE_TYPE(expectedValToConvert),actualVal);}
  #ELSE
  public void verifyVal(int expectedValToConvert,$ArrayType$ actualVal){Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedValToConvert),actualVal);}
  #ENDIF
#ELSEIF OfChar,OfByte
  #IFSWITCH VALUE_NAME==PRIMITIVE_BOOLEAN,BOXED_BOOLEAN
  public void verifyVal(int expectedValToConvert,$ArrayType$ actualVal){Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPEPRIMITIVE_TYPE(expectedValToConvert),actualVal);}
  #ELSE
  public void verifyVal(int expectedValToConvert,$ArrayType$ actualVal){Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedValToConvert),actualVal);}
  #ENDIF
#ELSE
  public void verifyVal(int expectedValToConvert,$ArrayType$ actualVal){Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(expectedValToConvert),actualVal);}
#ENDIF
}
#ENDDEF
    public abstract void callDequeAddLast(OmniCollection.Of$ClassPrefix$ seq,int valToConvert);
    public abstract void callDequeAddFirst(OmniCollection.Of$ClassPrefix$ seq,int valToConvert);
    public abstract boolean callDequeOfferLast(OmniCollection.Of$ClassPrefix$ seq,int valToConvert);
    public abstract boolean callDequeOfferFirst(OmniCollection.Of$ClassPrefix$ seq,int valToConvert);
    public abstract boolean callQueueOffer(OmniCollection.Of$ClassPrefix$ seq,int valToConvert);
    public abstract void callListItrAdd(OmniListIterator.Of$ClassPrefix$ itr,int valToConvert);
    public abstract void callListItrSet(OmniListIterator.Of$ClassPrefix$ itr,int valToConvert);
    public abstract void callListPut(OmniCollection.Of$ClassPrefix$ seq,int index,int valToConvert);
    public abstract void callListAdd(OmniCollection.Of$ClassPrefix$ seq,int index,int valToConvert);
    public abstract void callStackPush(OmniCollection.Of$ClassPrefix$ seq,int valToConvert);
    public abstract boolean callCollectionAdd(OmniCollection.Of$ClassPrefix$ seq,int valToConvert);
    public abstract void verifyVal(int expectedValToConvert,$ArrayType$ actualVal);
}