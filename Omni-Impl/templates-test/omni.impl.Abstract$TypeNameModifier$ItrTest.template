#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
package omni.impl;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import omni.util.$ArrayType$ArrayBuilder;
import omni.util.EqualityUtil;
import omni.util.ArrCopy;
import java.util.Random;
import java.util.function.Consumer;
#IF OfBoolean
import omni.util.TypeUtil;
#ENDIF
#IF OfBoolean,OfByte,OfChar,OfShort,OfFloat
import omni.function.$TypeNameModifier$Consumer;
#ELSE
import java.util.function.$TypeNameModifier$Consumer;
#ENDIF
public class Abstract$TypeNameModifier$ItrTest 
{
  private static class TestItr extends Abstract$TypeNameModifier$Itr implements Cloneable
  {
    $ArrayType$[] arr;
    int index;
    TestItr(){
      this.index=0;
      this.arr=new $ArrayType$[1000];
      $ArrayType$ArrayBuilder.Randomized.buildUnchecked(this.arr,0,arr.length,new Random(),0);
      
    }
    private TestItr(int index,$ArrayType$[] arr)
    {
      this.index=index;
      this.arr=arr;
    }
    public Object clone()
    {
      $ArrayType$[] copy=new $ArrayType$[arr.length];
      ArrCopy.uncheckedCopy(arr,0,copy,0,arr.length);
      return new TestItr(this.index,copy);
    }
    
    @Override
    public void remove(){
      throw new UnsupportedOperationException();
    }
    @Override
    public void forEachRemaining($TypeNameModifier$Consumer action){
      throw new UnsupportedOperationException();
    }
    @Override
    public void forEachRemaining(Consumer<? super $BoxedType$> action){
      throw new UnsupportedOperationException();
    }
    @Override
    public boolean hasNext(){
      return this.index<arr.length;
    }
    @Override
    public $exposedType$ next$TypeNameModifier$()
    {
      return ($exposedType$)arr[this.index++];
    }
  };
  
  #MACRO TestNext($BoxedType$,,($BoxedType$))
#IFNOT OfDouble
  #MACRO TestNext(double,Double,$castToDouble$)
  #IFNOT OfFloat
  #MACRO TestNext(float,Float,$castToFloat$)
    #IFNOT OfLong
  #MACRO TestNext(long,Long,$castToLong$)
      #IFNOT OfInt
  #MACRO TestNext(int,Int,$castToInt$)
        #IFNOT OfShort,OfChar
  #MACRO TestNext(short,Short,$castToShort$)
          #IFNOT OfByte
  #MACRO TestNext(byte,Byte,$castToByte$)
  #MACRO TestNext(char,Char,$castToChar$)
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF
  
}

#MACRODEF TestNext(RETTYPE,CLASSPREFIX,CAST)
@Test
public void testNextCLASSPREFIX()
{
  TestItr itr=new TestItr();
  TestItr copy=(TestItr)itr.clone();
  while(itr.hasNext())
  {
    Assertions.assertTrue(EqualityUtil.isEqual(CAST(itr.next$TypeNameModifier$()),copy.nextCLASSPREFIX()));
  }
}
#ENDDEF