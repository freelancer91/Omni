#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl.set;
import omni.impl.FunctionCallType;
import omni.impl.$ClassPrefix$InputTestArgType;
import omni.impl.MonitoredObjectInputStream;
import omni.impl.MonitoredObjectOutputStream;
import omni.impl.CheckedType;
import java.util.ConcurrentModificationException;
import java.io.File;
import java.io.IOException;
#IF OfInt,OfLong,OfDouble
import java.util.function.$TypeNameModifier$Predicate;
#ELSEIFNOT OfRef
import omni.function.$TypeNameModifier$Predicate;
#ENDIF
#IF OfDouble,OfLong,OfInt
import java.util.function.$TypeNameModifier$Consumer;
#ELSEIFNOT OfRef
import omni.function.$TypeNameModifier$Consumer;
#ENDIF
import java.util.function.IntFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import omni.api.OmniSet;
import java.io.ObjectOutputStream;
import java.util.Random;
import java.util.HashSet;
import java.util.ArrayList;
import omni.api.OmniIterator;
import java.util.function.UnaryOperator;
#IF OfInt,OfLong,OfDouble
import java.util.function.$UnaryOperator$;
#ELSEIFNOT OfRef,OfBoolean
import omni.function.$UnaryOperator$;
#ENDIF
@SuppressWarnings({"rawtypes","unchecked"})
abstract class Abstract$ClassPrefix$SetMonitor<SET extends OmniSet.Of$ClassPrefix$>{
  final CheckedType checkedType;
  SET set;
  Abstract$ClassPrefix$SetMonitor(CheckedType checkedType)
  {
    this.checkedType=checkedType;
  }
  abstract void verifyAdd($ClassPrefix$InputTestArgType inputArgType,int val);
  abstract void illegalMod(PreModScenario preModScenario);
  abstract AbstractItrMonitor getItrMonitor();
  abstract void verifyStructuralIntegrity();
  abstract void writeObject(ObjectOutputStream oos) throws IOException;
  abstract void clear();
  abstract void verifyRemoveIf(MonitoredRemoveIfPredicate predicate,FunctionCallType functionCallType,int numExpectedCalls);
  void forEach(MonitoredConsumer action,FunctionCallType functionCallType){
 #IFNOT OfRef
    if(functionCallType==FunctionCallType.Boxed){
      set.forEach((Consumer)action);
    }else
  #ENDIF
    {
      set.forEach(($TypeNameModifier$Consumer)action);
    }
  }
  static class MonitoredArrayConstructor
#IF OfRef
    implements IntFunction<Integer[]>
#ELSE
    implements IntFunction<$BoxedType$[]>
#ENDIF
  {
    int numCalls;
#IF OfRef
    @Override public Integer[] apply(int arrSize){
      ++numCalls;
      return new Integer[arrSize];
    }
#ELSE
    @Override public $BoxedType$[] apply(int arrSize){
      ++numCalls;
      return new $BoxedType$[arrSize];
    }
#ENDIF
  }
  static class MonitoredUnaryOperator implements $UnaryOperator$
#IFNOT OfRef
    ,UnaryOperator
#ENDIF
  {
    ArrayList encounteredValues=new ArrayList();
    public $ArrayType$ $applyMethod$($ArrayType$ val){
      encounteredValues.add(val);
      #IF OfRef
      return Integer.valueOf((Integer)val)+1;
      #ELSEIF OfBoolean
      return !val;
      #ELSE
      return ($ArrayType$)(val+1);
      #ENDIF
    }
#IFNOT OfRef
    public Object apply(Object val){
      return $applyMethod$(($ArrayType$)val);
    }
#ENDIF
  }
  static enum MonitoredRemoveIfPredicateGen
  {
#IF OfBoolean
    RemoveTrue(null,false){
      @Override MonitoredRemoveIfPredicate getMonitoredRemoveIfPredicate(Abstract$ClassPrefix$SetMonitor setMonitor,long randSeed,int numExpectedCalls,double threshold){
        return new MonitoredRemoveIfPredicate(){
          @Override boolean testImpl($ArrayType$ val){
            return val;
          }
        };
      }
    },
    RemoveFalse(null,false){
      @Override MonitoredRemoveIfPredicate getMonitoredRemoveIfPredicate(Abstract$ClassPrefix$SetMonitor setMonitor,long randSeed,int numExpectedCalls,double threshold){
        return new MonitoredRemoveIfPredicate(){
          @Override boolean testImpl($ArrayType$ val){
            return !val;
          }
        };
      }
    },
#ELSE
   //TODO come up with a quicker way to test than using random sequences
    Random(null,true){
      @Override MonitoredRemoveIfPredicate getMonitoredRemoveIfPredicate(Abstract$ClassPrefix$SetMonitor setMonitor,long randSeed,int numExpectedCalls,double threshold){
        return new MonitoredRemoveIfPredicate(){
          final Random rand=new Random(randSeed);
          @Override boolean testImpl($ArrayType$ val){
            return rand.nextDouble()>=threshold;
          }
        };
      }
    },
   
#ENDIF
    RemoveAll(null,false){
      @Override MonitoredRemoveIfPredicate getMonitoredRemoveIfPredicate(Abstract$ClassPrefix$SetMonitor setMonitor,long randSeed,int numExpectedCalls,double threshold){
        return new MonitoredRemoveIfPredicate(){
          @Override boolean testImpl($ArrayType$ val){
            return true;
          }
        };
      }
    },
    RemoveNone(null,false){
      @Override MonitoredRemoveIfPredicate getMonitoredRemoveIfPredicate(Abstract$ClassPrefix$SetMonitor setMonitor,long randSeed,int numExpectedCalls,double threshold){
        return new MonitoredRemoveIfPredicate(){
          @Override boolean testImpl($ArrayType$ val){
            return false;
          }
        };
      }
    },
    
    Throw(IndexOutOfBoundsException.class,true){
      @Override MonitoredRemoveIfPredicate getMonitoredRemoveIfPredicate(Abstract$ClassPrefix$SetMonitor setMonitor,long randSeed,int numExpectedCalls,double threshold){
        return new MonitoredRemoveIfPredicate(){
          final Random rand=new Random(randSeed);
          @Override boolean testImpl($ArrayType$ val){
            if(callCounter>rand.nextInt(numExpectedCalls))
            {
              throw new IndexOutOfBoundsException();
            }
            return rand.nextDouble()>=threshold;
          }
        };
      }
    },
    ModSet(ConcurrentModificationException.class,true){
      @Override MonitoredRemoveIfPredicate getMonitoredRemoveIfPredicate(Abstract$ClassPrefix$SetMonitor setMonitor,long randSeed,int numExpectedCalls,double threshold){
        return new MonitoredRemoveIfPredicate(){
          final Random rand=new Random(randSeed);
          @Override boolean testImpl($ArrayType$ val){
            if(callCounter>rand.nextInt(numExpectedCalls))
            {
              setMonitor.illegalMod(PreModScenario.ModSet);
            }
            return rand.nextBoolean();
          }
        };
      }
    },
    ThrowModSet(ConcurrentModificationException.class,true){
      @Override MonitoredRemoveIfPredicate getMonitoredRemoveIfPredicate(Abstract$ClassPrefix$SetMonitor setMonitor,long randSeed,int numExpectedCalls,double threshold){
        return new MonitoredRemoveIfPredicate(){
          final Random rand=new Random(randSeed);
          @Override boolean testImpl($ArrayType$ val){
            if(callCounter>rand.nextInt(numExpectedCalls))
            {
              setMonitor.illegalMod(PreModScenario.ModSet);
              throw new IndexOutOfBoundsException();
            }
            return rand.nextBoolean();
          }
        };
      }
    },
    ;
    final Class<? extends Throwable> expectedException;
    final boolean isRandomized;
    MonitoredRemoveIfPredicateGen(Class<? extends Throwable> expectedException,boolean isRandomized){
      this.expectedException=expectedException;
      this.isRandomized=isRandomized;
    }
    abstract MonitoredRemoveIfPredicate getMonitoredRemoveIfPredicate(Abstract$ClassPrefix$SetMonitor setMonitor,long randSeed,int numExpectedCalls,double threshold);
  }
  static enum MonitoredFunctionGen{
    NoThrow(null,false){
      @Override MonitoredConsumer getMonitoredConsumer(Abstract$ClassPrefix$SetMonitor setMonitor){
        return new MonitoredConsumer();
      }
      @Override MonitoredConsumer getMonitoredConsumer(AbstractItrMonitor itrMonitor){
        return new MonitoredConsumer();
      }
      @Override MonitoredUnaryOperator getMonitoredUnaryOperator(Abstract$ClassPrefix$SetMonitor setMonitor){
        return new MonitoredUnaryOperator();
      }
      @Override MonitoredArrayConstructor getMonitoredArrayConstructor(Abstract$ClassPrefix$SetMonitor setMonitor){
        return new MonitoredArrayConstructor();
      }
      @Override MonitoredObjectInputStream getMonitoredObjectInputStream(File file,Abstract$ClassPrefix$SetMonitor setMonitor) throws IOException{
        return new MonitoredObjectInputStream(file){
          protected void throwingCall(){}
          public omni.impl.MonitoredFunctionGen getMonitoredFunctionGen(){
            return omni.impl.MonitoredFunctionGen.NoThrow;
          }
        };
      }
      @Override MonitoredObjectOutputStream getMonitoredObjectOutputStream(File file,Abstract$ClassPrefix$SetMonitor setMonitor) throws IOException{
        return new MonitoredObjectOutputStream(file){
          protected void throwingCall(){}
          public omni.impl.MonitoredFunctionGen getMonitoredFunctionGen(){
            return omni.impl.MonitoredFunctionGen.NoThrow;
          }
        };
      }
    },
    Throw(IndexOutOfBoundsException.class,false){
      @Override MonitoredConsumer getMonitoredConsumer(Abstract$ClassPrefix$SetMonitor seqMonitor){
        return new ThrowingMonitoredConsumer();
      }
      @Override MonitoredConsumer getMonitoredConsumer(AbstractItrMonitor itrMonitor){
        return new ThrowingMonitoredConsumer();
      }
      @Override MonitoredUnaryOperator getMonitoredUnaryOperator(Abstract$ClassPrefix$SetMonitor setMonitor){
        return new MonitoredUnaryOperator(){
          @Override public $ArrayType$ $applyMethod$($ArrayType$ val){
            super.$applyMethod$(val);
            throw new IndexOutOfBoundsException();
          }
        };
      }
      @Override MonitoredArrayConstructor getMonitoredArrayConstructor(Abstract$ClassPrefix$SetMonitor setMonitor){
        return new MonitoredArrayConstructor(){
          #IF OfRef
          @Override public Integer[] apply(int arrSize){
          #ELSE
          @Override public $BoxedType$[] apply(int arrSize){
          #ENDIF
            ++numCalls;
            throw new IndexOutOfBoundsException();
          }
        };
      }
      @Override MonitoredObjectInputStream getMonitoredObjectInputStream(File file,Abstract$ClassPrefix$SetMonitor setMonitor) throws IOException{
        return new MonitoredObjectInputStream(file){
          @Override protected void throwingCall(){
            throw new IndexOutOfBoundsException();
          }
          public omni.impl.MonitoredFunctionGen getMonitoredFunctionGen(){
            return omni.impl.MonitoredFunctionGen.ThrowIOB;
          }
        };
      }
      @Override MonitoredObjectOutputStream getMonitoredObjectOutputStream(File file,Abstract$ClassPrefix$SetMonitor setMonitor) throws IOException{
        return new MonitoredObjectOutputStream(file){
          @Override protected void throwingCall(){
            throw new IndexOutOfBoundsException();
          }
          public omni.impl.MonitoredFunctionGen getMonitoredFunctionGen(){
            return omni.impl.MonitoredFunctionGen.ThrowIOB;
          }
        };
      }
    },
    ModItr(ConcurrentModificationException.class,true){
      @Override MonitoredConsumer getMonitoredConsumer(AbstractItrMonitor itrMonitor){
        return new MonitoredConsumer(){
          public void accept($ArrayType$ val){
            super.accept(val);
            itrMonitor.iterateForward();
            itrMonitor.remove();
          }
        };
      }
    },
    ModSet(ConcurrentModificationException.class,false){
      @Override MonitoredConsumer getMonitoredConsumer(Abstract$ClassPrefix$SetMonitor setMonitor){
        return new MonitoredConsumer(){
          public void accept($ArrayType$ val){
            super.accept(val);
            setMonitor.illegalMod(PreModScenario.ModSet);
          }
        };
      }
      @Override MonitoredConsumer getMonitoredConsumer(AbstractItrMonitor itrMonitor){
        return new MonitoredConsumer(){
          public void accept($ArrayType$ val){
            super.accept(val);
            itrMonitor.getSetMonitor().illegalMod(PreModScenario.ModSet);
          }
        };
      }
      @Override MonitoredUnaryOperator getMonitoredUnaryOperator(Abstract$ClassPrefix$SetMonitor setMonitor){
        return new MonitoredUnaryOperator(){
          @Override public $ArrayType$ $applyMethod$($ArrayType$ val){
            var ret=super.$applyMethod$(val);
            setMonitor.illegalMod(PreModScenario.ModSet);
            return ret;
          }
        };
      }
      @Override MonitoredArrayConstructor getMonitoredArrayConstructor(Abstract$ClassPrefix$SetMonitor setMonitor){
        return new MonitoredArrayConstructor(){
          #IF OfRef
          @Override public Integer[] apply(int arrSize){
          #ELSE
          @Override public $BoxedType$[] apply(int arrSize){
          #ENDIF
            ++numCalls;
            setMonitor.illegalMod(PreModScenario.ModSet);
          #IF OfRef
            return new Integer[arrSize];
          #ELSE
            return new $BoxedType$[arrSize];
          #ENDIF
          }
        };
      }
      @Override MonitoredObjectInputStream getMonitoredObjectInputStream(File file,Abstract$ClassPrefix$SetMonitor setMonitor) throws IOException{
        return new MonitoredObjectInputStream(file){
          @Override protected void throwingCall(){
            setMonitor.illegalMod(PreModScenario.ModSet);
          }
          public omni.impl.MonitoredFunctionGen getMonitoredFunctionGen(){
            return omni.impl.MonitoredFunctionGen.ModCollection;
          }
        };
      }
      @Override MonitoredObjectOutputStream getMonitoredObjectOutputStream(File file,Abstract$ClassPrefix$SetMonitor setMonitor) throws IOException{
        return new MonitoredObjectOutputStream(file){
          @Override protected void throwingCall(){
            setMonitor.illegalMod(PreModScenario.ModSet);
          }
          public omni.impl.MonitoredFunctionGen getMonitoredFunctionGen(){
            return omni.impl.MonitoredFunctionGen.ModCollection;
          }
        };
      }
    },
   
    
    ThrowModItr(ConcurrentModificationException.class,true){
      @Override MonitoredConsumer getMonitoredConsumer(AbstractItrMonitor itrMonitor){
        return new MonitoredConsumer(){
          public void accept($ArrayType$ val){
            super.accept(val);
            itrMonitor.iterateForward();
            itrMonitor.remove();
            throw new IndexOutOfBoundsException();
          }
        };
      }
      
    },
    ThrowModSet(ConcurrentModificationException.class,false){
      @Override MonitoredConsumer getMonitoredConsumer(Abstract$ClassPrefix$SetMonitor setMonitor){
        return new MonitoredConsumer(){
          public void accept($ArrayType$ val){
            super.accept(val);
            setMonitor.illegalMod(PreModScenario.ModSet);
            throw new IndexOutOfBoundsException();
          }
        };
      }
      @Override MonitoredConsumer getMonitoredConsumer(AbstractItrMonitor itrMonitor){
        return new MonitoredConsumer(){
          public void accept($ArrayType$ val){
            super.accept(val);
            itrMonitor.getSetMonitor().illegalMod(PreModScenario.ModSet);
            throw new IndexOutOfBoundsException();
          }
        };
      }
      @Override MonitoredUnaryOperator getMonitoredUnaryOperator(Abstract$ClassPrefix$SetMonitor setMonitor){
        return new MonitoredUnaryOperator(){
          @Override public $ArrayType$ $applyMethod$($ArrayType$ val){
            super.$applyMethod$(val);
            setMonitor.illegalMod(PreModScenario.ModSet);
            throw new IndexOutOfBoundsException();
          }
        };
      }
      @Override MonitoredArrayConstructor getMonitoredArrayConstructor(Abstract$ClassPrefix$SetMonitor setMonitor){
        return new MonitoredArrayConstructor(){
          #IF OfRef
          @Override public Integer[] apply(int arrSize){
          #ELSE
          @Override public $BoxedType$[] apply(int arrSize){
          #ENDIF
            ++numCalls;
            setMonitor.illegalMod(PreModScenario.ModSet);
            throw new IndexOutOfBoundsException();
          }
        };
      }
      @Override MonitoredObjectInputStream getMonitoredObjectInputStream(File file,Abstract$ClassPrefix$SetMonitor setMonitor) throws IOException{
        return new MonitoredObjectInputStream(file){
          @Override protected void throwingCall(){
            setMonitor.illegalMod(PreModScenario.ModSet);
            throw new IndexOutOfBoundsException();
          }
          public omni.impl.MonitoredFunctionGen getMonitoredFunctionGen(){
            return omni.impl.MonitoredFunctionGen.ThrowIOBModCollection;
          }
        };
      }
      @Override MonitoredObjectOutputStream getMonitoredObjectOutputStream(File file,Abstract$ClassPrefix$SetMonitor setMonitor) throws IOException{
        return new MonitoredObjectOutputStream(file){
          @Override protected void throwingCall(){
            setMonitor.illegalMod(PreModScenario.ModSet);
            throw new IndexOutOfBoundsException();
          }
          public omni.impl.MonitoredFunctionGen getMonitoredFunctionGen(){
            return omni.impl.MonitoredFunctionGen.ThrowIOBModCollection;
          }
        };
      }
    },
    
    ;
    final Class<? extends Throwable> expectedException;
    final boolean appliesToItr;
    MonitoredFunctionGen(Class<? extends Throwable> expectedException,boolean appliesToItr){
      this.expectedException=expectedException;
      this.appliesToItr=appliesToItr;
    }
    MonitoredUnaryOperator getMonitoredUnaryOperator(Abstract$ClassPrefix$SetMonitor setMonitor){
      throw new UnsupportedOperationException();
    }
    MonitoredConsumer getMonitoredConsumer(Abstract$ClassPrefix$SetMonitor setMonitor){
      throw new UnsupportedOperationException();
    }
    abstract MonitoredConsumer getMonitoredConsumer(AbstractItrMonitor itrMonitor);
    MonitoredArrayConstructor getMonitoredArrayConstructor(Abstract$ClassPrefix$SetMonitor setMonitor){
      throw new UnsupportedOperationException();
    }
    MonitoredObjectInputStream getMonitoredObjectInputStream(File file,Abstract$ClassPrefix$SetMonitor setMonitor) throws IOException{
      throw new UnsupportedOperationException();
    }
    MonitoredObjectOutputStream getMonitoredObjectOutputStream(File file,Abstract$ClassPrefix$SetMonitor setMonitor) throws IOException{
      throw new UnsupportedOperationException();
    }
  }
  static class MonitoredConsumer implements $TypeNameModifier$Consumer
#IFNOT OfRef
    ,Consumer
#ENDIF
  {
    ArrayList encounteredValues=new ArrayList();
    public void accept($ArrayType$ val){
      encounteredValues.add(val);
    }
#IFNOT OfRef
    public void accept(Object val){
      accept(($exposedType$)val);
    }
#ENDIF
  }
  public static class ThrowingMonitoredConsumer extends MonitoredConsumer{
    public void accept($ArrayType$ val){
      super.accept(val);
      throw new IndexOutOfBoundsException();
    }
  }
  static abstract class MonitoredRemoveIfPredicate implements $TypeNameModifier$Predicate
#IFNOT OfRef
    ,Predicate<$BoxedType$>
#ENDIF
  {
    final HashSet removedVals=new HashSet();
    final HashSet retainedVals=new HashSet();
    int callCounter;
    @Override public String toString(){
      return removedVals.toString();
    }
    abstract boolean testImpl($ArrayType$ val);
    @Override public MonitoredRemoveIfPredicate negate()
    {
      //not worth implementing but must declare
      return null;
    }
    @Override public boolean test($ArrayType$ val)
    {
      ++callCounter;
      if(retainedVals.contains(val))
      {
        return false;
      }
      if(removedVals.contains(val))
      {
        return true;
      }
      if(testImpl(val))
      {
        removedVals.add(val);
        return true;
      }
      retainedVals.add(val);
      return false;
    }
#IFNOT OfRef
    @Override public boolean test($BoxedType$ val)
    {
      return test(($ArrayType$)val);
    }
#ENDIF
  }
#IF OfRef
  
  static class IOBThrowingMonitoredObject extends MonitoredObject{
    IOBThrowingMonitoredObject(int compareVal){
      super(compareVal);
    }
    @Override public int compareTo(MonitoredObject that){
      ++numCompareToCalls;
      throw new IndexOutOfBoundsException();
    }
  }
  static class ModSetMonitoredObject extends MonitoredObject{
    final Abstract$ClassPrefix$SetMonitor setMonitor;
    ModSetMonitoredObject(Abstract$ClassPrefix$SetMonitor setMonitor,int compareVal){
      super(compareVal);
      this.setMonitor=setMonitor;
    }
    @Override public int compareTo(MonitoredObject that){
      ++numCompareToCalls;
      setMonitor.illegalMod(PreModScenario.ModSet);
      return Integer.compare(compareVal,that.compareVal);
    }
  }
 
  
  static class ModSetIOBThrowingMonitoredObject extends MonitoredObject{
    final Abstract$ClassPrefix$SetMonitor setMonitor;
    ModSetIOBThrowingMonitoredObject(Abstract$ClassPrefix$SetMonitor setMonitor,int compareVal){
      super(compareVal);
      this.setMonitor=setMonitor;
    }
    @Override public int compareTo(MonitoredObject that){
      ++numCompareToCalls;
      setMonitor.illegalMod(PreModScenario.ModSet);
      throw new IndexOutOfBoundsException();
    }
  }
 
 
  static class MonitoredObject implements Comparable<MonitoredObject>{
    int numEqualsCalls;
    int numHashCodeCalls;
    int numToStringCalls;
    int numCompareToCalls;
    int compareVal;
    MonitoredObject(){
    }
    MonitoredObject(int compareVal){
      this.compareVal=compareVal;
    }
    @Override public int compareTo(MonitoredObject that){
      return Integer.compare(compareVal,that.compareVal);
    }
    @Override public boolean equals(Object obj){
      ++numEqualsCalls;
      return super.equals(this);
    }
    @Override public int hashCode(){
      ++numHashCodeCalls;
      return super.hashCode();
    }
    @Override public String toString(){
      ++numToStringCalls;
      return super.toString();
    }
  }
#ENDIF

  //TODO queryTester
  //TODO verifyHashCode
  //TODO verifyToString
  //TODO verifyToArray
  
  abstract static class AbstractItrMonitor{
     OmniIterator.Of$ClassPrefix$ itr;
     AbstractItrMonitor(OmniIterator.Of$ClassPrefix$ itr){
       this.itr=itr;
     }
     void iterateForward(){
       itr.next$TypeNameModifier$();
       moveExpectedIteratorStateForward();
     }
     abstract void forEachRemaining(MonitoredConsumer action,FunctionCallType functionCallType);
     abstract void remove();
     abstract Abstract$ClassPrefix$SetMonitor getSetMonitor();
     abstract void verifyIteratorState();
     abstract void moveExpectedIteratorStateForward();
  }
 
  

  
}