#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl.seq;
import org.junit.jupiter.api.Test;
import omni.util.TypeConversionUtil;
import omni.impl.seq.$ClassPrefix$ArrSeq.UncheckedList;
import omni.impl.seq.$ClassPrefix$ArrSeq.CheckedList;
import omni.impl.seq.$ClassPrefix$ArrSeq.UncheckedStack;
import omni.impl.seq.$ClassPrefix$ArrSeq.CheckedStack;
import omni.api.QueryTestUtil;
#IF OfRef
@SuppressWarnings({"rawtypes","unchecked"}) 
#ENDIF
public class $ClassPrefix$ArrSeqQueryTest
{
  //TODO place sanity checks for checked sequence modification behavior
  #MACRO Impl<UncheckedList,removeVal>()
  #MACRO Impl<UncheckedStack,removeVal>()
  #MACRO Impl<CheckedList,removeVal>()
  #MACRO Impl<CheckedStack,removeVal>()
  #MACRO Impl<CheckedSubList,removeVal>()
  #MACRO Impl<UncheckedSubList,removeVal>()
  
  
  #MACRO Impl<UncheckedList,contains>()
  #MACRO Impl<UncheckedStack,contains>()
  #MACRO Impl<CheckedList,contains>()
  #MACRO Impl<CheckedStack,contains>()
  #MACRO Impl<CheckedSubList,contains>()
  #MACRO Impl<UncheckedSubList,contains>()
  
  #MACRO Impl<UncheckedList,indexOf>()
  #MACRO Impl<CheckedList,indexOf>()
  #MACRO Impl<CheckedSubList,indexOf>()
  #MACRO Impl<UncheckedSubList,indexOf>()
  
  #MACRO Impl<UncheckedList,lastIndexOf>()
  #MACRO Impl<CheckedList,lastIndexOf>()
  #MACRO Impl<CheckedSubList,lastIndexOf>()
  #MACRO Impl<UncheckedSubList,lastIndexOf>()
  
  #MACRO Impl<UncheckedStack,search>()
  #MACRO Impl<CheckedStack,search>()

}

#MACRODEF ConstructSeq()
#IFSWITCH STRUCTNAME==CheckedSubList,UncheckedSubList
  #IFSWITCH STRUCTNAME==CheckedSubList
var root=new CheckedList();
  #ELSE
var root=new UncheckedList();
  #ENDIF
var subList=root.subList(0,0);
var seq=subList.subList(0,0);
#ELSE
var seq=new STRUCTNAME();
#ENDIF
#ENDDEF

#MACRODEF Impl<STRUCTNAME,METHODNAME>()
@Test
public void testSTRUCTNAMEMETHODNAMEDouble()
{
#IF OfRef
  QueryTestUtil.testMETHODNAMEDouble(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(Double.valueOf((double)3));
    seq.add(Double.valueOf((double)0));
  #ELSE
    seq.add(Double.valueOf((double)0));
    seq.add(Double.valueOf((double)3));
  #ENDIF
    return seq;
  },(double)0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEDouble(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(Double.valueOf((double)3));
    seq.add(Double.valueOf(Double.NaN));
  #ELSE
    seq.add(Double.valueOf(Double.NaN));
    seq.add(Double.valueOf((double)3));
  #ENDIF
    return seq;
  },(double)Double.NaN
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSEIF OfBoolean
  QueryTestUtil.testMETHODNAMEDouble(()->
  {
    #MACRO ConstructSeq()
    seq.add(false);
    return seq;
  },false
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEDouble(()->
  {
    #MACRO ConstructSeq()
    seq.add(true);
    return seq;
  },true
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
#ELSEIF OfByte,OfChar,OfShort,OfInt,OfLong
  QueryTestUtil.testMETHODNAMEDouble(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0);
  #ELSE
    seq.add(($exposedType$)0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  }
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSEIF OfFloat
  QueryTestUtil.testMETHODNAMEDouble(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0);
  #ELSE
    seq.add(($exposedType$)0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },(float)0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEDouble(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add((float)Float.NaN);
  #ELSE
    seq.add((float)Float.NaN);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },(float)Float.NaN
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSE
  QueryTestUtil.testMETHODNAMEDouble(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0);
#ELSE
    seq.add(($exposedType$)0);
    seq.add(($exposedType$)3);
#ENDIF
    return seq;
  },(double)0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEDouble(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)Double.NaN);
#ELSE
    seq.add(($exposedType$)Double.NaN);
    seq.add(($exposedType$)3);
#ENDIF
    return seq;
  },(double)Double.NaN
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ENDIF
}
@Test
public void testSTRUCTNAMEMETHODNAMEFloat()
{
#IF OfRef
  QueryTestUtil.testMETHODNAMEFloat(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(Float.valueOf((float)3));
    seq.add(Float.valueOf((float)0));
  #ELSE
    seq.add(Float.valueOf((float)0));
    seq.add(Float.valueOf((float)3));
  #ENDIF
    return seq;
  },(float)0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEFloat(()->
  {
    #MACRO ConstructSeq()
    
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add((float)3);
    seq.add((float)Float.NaN);
  #ELSE
    seq.add((float)Float.NaN);
    seq.add((float)3);
  #ENDIF
    return seq;
  },(float)Float.NaN
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSEIF OfBoolean
  QueryTestUtil.testMETHODNAMEFloat(()->
  {
    #MACRO ConstructSeq()
    seq.add(false);
    return seq;
  },false
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEFloat(()->
  {
    #MACRO ConstructSeq()
    seq.add(true);
    return seq;
  },true
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
#ELSEIF OfByte,OfChar,OfShort,OfInt,OfLong
  QueryTestUtil.testMETHODNAMEFloat(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0);
  #ELSE
    seq.add(($exposedType$)0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  }
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSEIF OfFloat
  QueryTestUtil.testMETHODNAMEFloat(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0);
  #ELSE
    seq.add(($exposedType$)0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },(float)0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEFloat(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)Float.NaN);
  #ELSE
    seq.add(($exposedType$)Float.NaN);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },($exposedType$)Float.NaN
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSE
  QueryTestUtil.testMETHODNAMEFloat(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0);
  #ELSE
    seq.add(($exposedType$)0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },($exposedType$)0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEFloat(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)Double.NaN);
  #ELSE
    seq.add(($exposedType$)Double.NaN);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },($exposedType$)Double.NaN
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ENDIF
}
@Test
public void testSTRUCTNAMEMETHODNAMELong()
{
#IF OfRef
  QueryTestUtil.testMETHODNAMELong(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(Long.valueOf((long)3));
    seq.add(Long.valueOf((long)0));
#ELSE
    seq.add(Long.valueOf((long)0));
    seq.add(Long.valueOf((long)3));
#ENDIF
    return seq;
  }
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSEIF OfBoolean
  QueryTestUtil.testMETHODNAMELong(()->
  {
    #MACRO ConstructSeq()
    seq.add(false);
    return seq;
  },false
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMELong(()->
  {
    #MACRO ConstructSeq()
    seq.add(true);
    return seq;
  },true
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
#ELSEIF OfByte,OfShort,OfInt,OfLong,OfChar
  QueryTestUtil.testMETHODNAMELong(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0);
#ELSE
    seq.add(($exposedType$)0);
    seq.add(($exposedType$)3);
#ENDIF
    return seq;
  }
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSE
  QueryTestUtil.testMETHODNAMELong(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)-0.0);
#ELSE
    seq.add(($exposedType$)-0.0);
    seq.add(($exposedType$)3);
#ENDIF
    return seq;
  },($exposedType$)-0.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMELong(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0.0);
#ELSE
    seq.add(($exposedType$)0.0);
    seq.add(($exposedType$)3);
#ENDIF
    return seq;
  },($exposedType$)0.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMELong(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)1.0);
#ELSE
    seq.add(($exposedType$)1.0);
    seq.add(($exposedType$)3);
#ENDIF
    return seq;
  },($exposedType$)1.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ENDIF
}
@Test
public void testSTRUCTNAMEMETHODNAMEInt()
{
#IF OfRef
  QueryTestUtil.testMETHODNAMEInt(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(Integer.valueOf((int)3));
    seq.add(Integer.valueOf((int)0));
#ELSE
    seq.add(Integer.valueOf((int)0));
    seq.add(Integer.valueOf((int)3));
#ENDIF
    return seq;
  }
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSEIF OfBoolean
  QueryTestUtil.testMETHODNAMEInt(()->
  {
    #MACRO ConstructSeq()
    seq.add(false);
    return seq;
  },false
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEInt(()->
  {
    #MACRO ConstructSeq()
    seq.add(true);
    return seq;
  },true
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
#ELSEIF OfByte,OfShort,OfInt,OfLong,OfChar
  QueryTestUtil.testMETHODNAMEInt(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0);
#ELSE
    seq.add(($exposedType$)0);
    seq.add(($exposedType$)3);
#ENDIF
    return seq;
  }
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSE
  QueryTestUtil.testMETHODNAMEInt(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)-0.0);
#ELSE
    seq.add(($exposedType$)-0.0);
    seq.add(($exposedType$)3);
#ENDIF
    return seq;
  },($exposedType$)-0.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEInt(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0.0);
#ELSE
    seq.add(($exposedType$)0.0);
    seq.add(($exposedType$)3);
#ENDIF
    return seq;
  },($exposedType$)0.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEInt(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)1.0);
#ELSE
    seq.add(($exposedType$)1.0);
    seq.add(($exposedType$)3);
#ENDIF
    return seq;
  },($exposedType$)1.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ENDIF
}
@Test
public void testSTRUCTNAMEMETHODNAMEShort()
{
#IF OfRef
  QueryTestUtil.testMETHODNAMEShort(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(Short.valueOf((short)3));
    seq.add(Short.valueOf((short)0));
  #ELSE
    seq.add(Short.valueOf((short)0));
    seq.add(Short.valueOf((short)3));
  #ENDIF
    return seq;
  }
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSEIF OfBoolean
  QueryTestUtil.testMETHODNAMEShort(()->
  {
    #MACRO ConstructSeq()
    seq.add(false);
    return seq;
  },false
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEShort(()->
  {
    #MACRO ConstructSeq()
    seq.add(true);
    return seq;
  },true
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
#ELSEIF OfByte,OfShort,OfInt,OfLong,OfChar
  QueryTestUtil.testMETHODNAMEShort(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0);
  #ELSE
    seq.add(($exposedType$)0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  }
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSE
  QueryTestUtil.testMETHODNAMEShort(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)-0.0);
  #ELSE
    seq.add(($exposedType$)-0.0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },($exposedType$)-0.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEShort(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0.0);
  #ELSE
    seq.add(($exposedType$)0.0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },($exposedType$)0.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEShort(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)1.0);
  #ELSE
    seq.add(($exposedType$)1.0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },($exposedType$)1.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ENDIF
}
@Test
public void testSTRUCTNAMEMETHODNAMEChar()
{
#IF OfRef
  QueryTestUtil.testMETHODNAMEChar(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(Character.valueOf((char)3));
    seq.add(Character.valueOf((char)0));
  #ELSE
    seq.add(Character.valueOf((char)0));
    seq.add(Character.valueOf((char)3));
  #ENDIF
    return seq;
  }
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSEIF OfBoolean
  QueryTestUtil.testMETHODNAMEChar(()->
  {
    #MACRO ConstructSeq()
    seq.add(false);
    return seq;
  },false
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEChar(()->
  {
    #MACRO ConstructSeq()
    seq.add(true);
    return seq;
  },true
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
#ELSEIF OfByte,OfShort,OfInt,OfLong,OfChar
  QueryTestUtil.testMETHODNAMEChar(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0);
  #ELSE
    seq.add(($exposedType$)0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  }
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSE
  QueryTestUtil.testMETHODNAMEChar(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)-0.0);
  #ELSE
    seq.add(($exposedType$)-0.0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },($exposedType$)-0.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEChar(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0.0);
  #ELSE
    seq.add(($exposedType$)0.0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },($exposedType$)0.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEChar(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)1.0);
  #ELSE
    seq.add(($exposedType$)1.0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },($exposedType$)1.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ENDIF
}
@Test
public void testSTRUCTNAMEMETHODNAMEByte()
{
#IF OfRef
  
  QueryTestUtil.testMETHODNAMEByte(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(Byte.valueOf((byte)3));
    seq.add(Byte.valueOf((byte)0));
  #ELSE
    seq.add(Byte.valueOf((byte)0));
    seq.add(Byte.valueOf((byte)3));
  #ENDIF
    return seq;
  }
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSEIF OfBoolean
  
  QueryTestUtil.testMETHODNAMEByte(()->
  {
    #MACRO ConstructSeq()
    seq.add(false);
    return seq;
  },false
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEByte(()->
  {
    #MACRO ConstructSeq()
    seq.add(true);
    return seq;
  },true
  #IFSWITCH METHODNAME==indexOf
  ,0
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,1
  #ENDIF
  );
#ELSEIF OfByte,OfShort,OfInt,OfLong,OfChar
  QueryTestUtil.testMETHODNAMEByte(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0);
  #ELSE
    seq.add(($exposedType$)0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  }
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ELSE
  QueryTestUtil.testMETHODNAMEByte(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)-0.0);
  #ELSE
    seq.add(($exposedType$)-0.0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },($exposedType$)-0.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEByte(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)0.0);
  #ELSE
    seq.add(($exposedType$)0.0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },($exposedType$)0.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
  QueryTestUtil.testMETHODNAMEByte(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(($exposedType$)3);
    seq.add(($exposedType$)1.0);
  #ELSE
    seq.add(($exposedType$)1.0);
    seq.add(($exposedType$)3);
  #ENDIF
    return seq;
  },($exposedType$)1.0
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ENDIF
}
@Test
public void testSTRUCTNAMEMETHODNAMEBoolean()
{

  QueryTestUtil.testMETHODNAMEBoolean(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
  #IF OfRef
    seq.add(Integer.valueOf(3));
    seq.add(Boolean.TRUE);
  #ELSE
    #IFNOT OfBoolean
    seq.add(($exposedType$)3);
    #ENDIF
    seq.add(true);
  #ENDIF
#ELSE
  #IF OfRef
    seq.add(Boolean.TRUE);
    seq.add(Integer.valueOf(3));
  #ELSE
    seq.add(true);
    #IFNOT OfBoolean
    seq.add(($exposedType$)3);
    #ENDIF
  #ENDIF
#ENDIF
    return seq;
  },true
#IFSWITCH METHODNAME==indexOf
  #IF OfBoolean
  ,0
  #ELSE
  ,1
  #ENDIF
#ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
#ELSEIFSWITCH METHODNAME==search
  #IF OfBoolean
  ,1
  #ELSE
  ,2
  #ENDIF
#ENDIF
  );
  

  QueryTestUtil.testMETHODNAMEBoolean(()->
  {
    #MACRO ConstructSeq()
#IFSWITCH METHODNAME==removeVal,contains,indexOf
  #IF OfRef
    seq.add(Integer.valueOf(3));
    seq.add(Boolean.FALSE);
  #ELSE
    #IFNOT OfBoolean
    seq.add(($exposedType$)3);
    #ENDIF
    seq.add(false);
  #ENDIF
#ELSE
  #IF OfRef
    seq.add(Boolean.FALSE);
    seq.add(Integer.valueOf(3));
  #ELSE
    seq.add(false);
    #IFNOT OfBoolean
    seq.add(($exposedType$)3);
    #ENDIF
  #ENDIF
#ENDIF
    return seq;
  },false
#IFSWITCH METHODNAME==indexOf
  #IF OfBoolean
  ,0
  #ELSE
  ,1
  #ENDIF
#ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
#ELSEIFSWITCH METHODNAME==search
  #IF OfBoolean
  ,1
  #ELSE
  ,2
  #ENDIF
#ENDIF
  );  
}
@Test
public void testSTRUCTNAMEMETHODNAMENull()
{
  
  QueryTestUtil.testMETHODNAMENullReturnNegative(()->
  {
    #MACRO ConstructSeq()
    seq.add(TypeConversionUtil.convertTo$ArrayType$(0));
    return seq;
  });
  
#IF OfRef
  QueryTestUtil.testMETHODNAMENullReturnPositive(()->
  {
    #MACRO ConstructSeq()
  #IFSWITCH METHODNAME==removeVal,contains,indexOf
    seq.add(TypeConversionUtil.convertTo$ArrayType$(0));
    seq.add((Integer)null);
  #ELSE
    seq.add((Integer)null);
    seq.add(TypeConversionUtil.convertTo$ArrayType$(0));
  #ENDIF
    return seq;
  }
  #IFSWITCH METHODNAME==indexOf
  ,1
  #ELSEIFSWITCH METHODNAME==lastIndexOf
  ,0
  #ELSEIFSWITCH METHODNAME==search
  ,2
  #ENDIF
  );
#ENDIF
}
@Test
public void testEmptySTRUCTNAMEMETHODNAME()
{
  
  
  QueryTestUtil.testEmptyMETHODNAME(()->
  {
    #MACRO ConstructSeq()
    return seq;
  });
  
  
}
#ENDDEF