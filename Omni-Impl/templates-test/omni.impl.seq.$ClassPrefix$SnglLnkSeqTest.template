#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl.seq;
import omni.util.TypeConversionUtil;
import org.junit.jupiter.api.Assertions;
import omni.impl.$ClassPrefix$InputTestArgType;
import omni.impl.$ClassPrefix$OutputTestArgType;
import org.junit.jupiter.params.provider.Arguments;
import java.util.NoSuchElementException;
import java.util.stream.Stream;
import omni.util.OmniArray;
import omni.impl.FunctionCallType;
import omni.impl.QueryCastType;
import java.io.File;
import org.junit.jupiter.api.Tag;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import org.junit.jupiter.api.parallel.Execution;
import org.junit.jupiter.api.parallel.ExecutionMode;
import omni.impl.seq.$ClassPrefix$SnglLnkSeqMonitor.NestedType;
import omni.impl.seq.$ClassPrefix$SeqMonitor.CheckedType;
import omni.impl.seq.$ClassPrefix$SeqMonitor.PreModScenario;
import omni.impl.seq.$ClassPrefix$SeqMonitor.SequenceLocation;
import omni.impl.seq.$ClassPrefix$SeqMonitor.SequenceContentsScenario;
import omni.impl.seq.$ClassPrefix$SeqMonitor.ListItrSetScenario;
import omni.impl.seq.$ClassPrefix$SeqMonitor.ItrType;
import omni.impl.seq.$ClassPrefix$SeqMonitor.IterationScenario;
import omni.impl.seq.$ClassPrefix$SeqMonitor.ItrRemoveScenario;
import omni.impl.seq.$ClassPrefix$SeqMonitor.MonitoredFunctionGen;
import omni.impl.seq.$ClassPrefix$SeqMonitor.MonitoredComparatorGen;
import omni.impl.seq.$ClassPrefix$SeqMonitor.MonitoredRemoveIfPredicateGen;
import java.nio.file.Files;
#IF OfRef
import omni.impl.seq.$ClassPrefix$SeqMonitor.MonitoredObjectGen;
import omni.impl.seq.$ClassPrefix$SeqMonitor.MonitoredObject;
#ENDIF
import omni.impl.seq.$ClassPrefix$SeqMonitor.SequenceVerificationItr;
import omni.impl.seq.$ClassPrefix$SnglLnkSeqMonitor.QueryTester;
import omni.api.OmniCollection;
import omni.api.OmniList;
import java.util.ArrayList;
#IF OfRef
@SuppressWarnings({"rawtypes","unchecked"})
#ENDIF
@Tag("SnglLnkSeq")
@Execution(ExecutionMode.CONCURRENT)
public class $ClassPrefix$SnglLnkSeqTest{
  @FunctionalInterface
  interface ArgBuilder{
    void buildArgs(Stream.Builder<Arguments> streamBuilder,NestedType nestedType,CheckedType checkedType);
    static Stream<Arguments> buildSeqArgs(ArgBuilder argBuilder){
      Stream.Builder<Arguments> streamBuilder=Stream.builder();
      for(var nestedType:NestedType.values()){
        for(var checkedType:CheckedType.values()){
          argBuilder.buildArgs(streamBuilder,nestedType,checkedType);
        }
      }
      return streamBuilder.build();
    }
  }
  #MACRO TestMethods(true)
#MACRODEF TestMethods(PARALLEL)
#MACRO testConstructor_void<PARALLEL>()
#MACRO testItrnext_void<PARALLEL>()
#MACRO testItrremove_void<PARALLEL>()
#MACRO testItrforEachRemaining_Consumer<PARALLEL>()
#MACRO testforEach_Consumer<false>()
#ENDDEF
#MACRODEF testforEach_Consumer<PARALLEL>()
static Stream<Arguments> getforEach_ConsumerArgs(){
  return ArgBuilder.buildSeqArgs((streamBuilder,nestedType,checkedType)->{
    for(var monitoredFunctionGen:MonitoredFunctionGen.values()){
      if(monitoredFunctionGen.appliesToRoot&&(checkedType.checked || monitoredFunctionGen.expectedException==null)){
        for(var seqContentsScenario:SequenceContentsScenario.values()){
          streamBuilder.accept(Arguments.of(new $ClassPrefix$SnglLnkSeqMonitor(nestedType,checkedType),monitoredFunctionGen,seqContentsScenario,FunctionCallType.Unboxed));
#IFNOT OfRef
          streamBuilder.accept(Arguments.of(new $ClassPrefix$SnglLnkSeqMonitor(nestedType,checkedType),monitoredFunctionGen,seqContentsScenario,FunctionCallType.Boxed));
#ENDIF
        }
      }
    }
  });
}
#IFSWITCH PARALLEL==true
@org.junit.jupiter.api.Test
public void testforEach_Consumer(){
  getforEach_ConsumerArgs().parallel().map(Arguments::get).forEach(args->{
      testforEach_ConsumerHelper(($ClassPrefix$SnglLnkSeqMonitor)args[0],(MonitoredFunctionGen)args[1],(SequenceContentsScenario)args[2],(FunctionCallType)args[3]);
  });
}
private static void testforEach_ConsumerHelper
#ELSE
@org.junit.jupiter.params.ParameterizedTest
@org.junit.jupiter.params.provider.MethodSource("getforEach_ConsumerArgs")
public void testforEach_Consumer
#ENDIF
($ClassPrefix$SnglLnkSeqMonitor seqMonitor,MonitoredFunctionGen monitoredFunctionGen,SequenceContentsScenario seqContentsScenario,FunctionCallType functionCallType){
  int numToAdd=seqContentsScenario.nonEmpty?100:0;
  for(int i=0;i<numToAdd;++i){
    seqMonitor.add(i);
  }
  var monitoredConsumer=monitoredFunctionGen.getMonitoredConsumer(seqMonitor);
  int numExpectedIteratedValues;
  if(monitoredFunctionGen.expectedException==null || !seqContentsScenario.nonEmpty){
    seqMonitor.forEach(monitoredConsumer,functionCallType);
    seqMonitor.verifyStructuralIntegrity();
    seqMonitor.verifyPreAlloc().verifyNaturalAscending(numToAdd).verifyPostAlloc();
    numExpectedIteratedValues=numToAdd;
  }else{
    Assertions.assertThrows(monitoredFunctionGen.expectedException,()->seqMonitor.forEach(monitoredConsumer,functionCallType));
    seqMonitor.verifyStructuralIntegrity();
    var verifyItr=seqMonitor.verifyPreAlloc();
    switch(monitoredFunctionGen)
    {
      case Throw:
        numExpectedIteratedValues=1;
        verifyItr.verifyNaturalAscending(numToAdd);
        break;
      case ModSeq:
        numExpectedIteratedValues=numToAdd;
        if(seqMonitor.nestedType.forwardIteration)
        {
          verifyItr.verifyAscending(numToAdd);
          for(int i=0;i<numToAdd;++i){
            verifyItr.verifyIllegalAdd();
          }
        }
        else
        {
          for(int i=0;i<numToAdd;++i){
            verifyItr.verifyIllegalAdd();
          }
          verifyItr.verifyDescending(numToAdd);
        }
        break;
      case ThrowModSeq:
        numExpectedIteratedValues=1;
        if(seqMonitor.nestedType.forwardIteration)
        {
          verifyItr.verifyAscending(numToAdd).verifyIllegalAdd();
        }
        else
        {
          verifyItr.verifyIllegalAdd().verifyDescending(numToAdd);
        }
        break;
      default:
        throw new Error("Unknown monitored function gen "+monitoredFunctionGen);
    }
    verifyItr.verifyPostAlloc();
  }
  Assertions.assertEquals(numExpectedIteratedValues,monitoredConsumer.encounteredValues.size());
  //TODO verify iterated values
}
#ENDDEF
#MACRODEF testItrforEachRemaining_Consumer<PARALLEL>()
static Stream<Arguments> getItrforEachRemaining_ConsumerArgs(){
  return ArgBuilder.buildSeqArgs((streamBuilder,nestedType,checkedType)->{
    for(var preModScenario:PreModScenario.values()){
      if(checkedType.checked || preModScenario.expectedException==null){
        for(var monitoredFunctionGen:MonitoredFunctionGen.values()){
          if((monitoredFunctionGen.expectedException==null || checkedType.checked) && (preModScenario.appliesToRootItr&&monitoredFunctionGen.appliesToRootItr)){
            for(var seqContentsScenario:SequenceContentsScenario.values()){
              streamBuilder.accept(Arguments.of(new $ClassPrefix$SnglLnkSeqMonitor(nestedType,checkedType),preModScenario,monitoredFunctionGen,seqContentsScenario,FunctionCallType.Unboxed));
#IFNOT OfRef
              streamBuilder.accept(Arguments.of(new $ClassPrefix$SnglLnkSeqMonitor(nestedType,checkedType),preModScenario,monitoredFunctionGen,seqContentsScenario,FunctionCallType.Boxed));
#ENDIF
            }
          }
        }
      }
    }
  });
  
}
#IFSWITCH PARALLEL==true
@org.junit.jupiter.api.Test
public void testItrforEachRemaining_Consumer(){
  getItrforEachRemaining_ConsumerArgs().parallel().map(Arguments::get).forEach(args->{
      testItrforEachRemaining_ConsumerHelper(($ClassPrefix$SnglLnkSeqMonitor)args[0],(PreModScenario)args[1],(MonitoredFunctionGen)args[2],(SequenceContentsScenario)args[3],(FunctionCallType)args[4]);
  });
}
private static void testItrforEachRemaining_ConsumerHelper
#ELSE
@org.junit.jupiter.params.ParameterizedTest
@org.junit.jupiter.params.provider.MethodSource("getItrforEachRemaining_ConsumerArgs")
public void testItrforEachRemaining_Consumer
#ENDIF
($ClassPrefix$SnglLnkSeqMonitor seqMonitor,PreModScenario preModScenario,MonitoredFunctionGen monitoredFunctionGen,SequenceContentsScenario seqContentsScenario,FunctionCallType functionCallType){
  int numToAdd=seqContentsScenario.nonEmpty?100:0;
  for(int i=0;i<numToAdd;++i){
    seqMonitor.add(i);
  }
  var itrMonitor=seqMonitor.getItrMonitor();
  seqMonitor.illegalAdd(preModScenario);
  var monitoredConsumer=monitoredFunctionGen.getMonitoredConsumer(itrMonitor);
  int numExpectedIteratedValues;
  if(preModScenario.expectedException==null || !seqContentsScenario.nonEmpty){
    if(monitoredFunctionGen.expectedException==null || !seqContentsScenario.nonEmpty){
      itrMonitor.forEachRemaining(monitoredConsumer,functionCallType);
      itrMonitor.verifyIteratorState();
      seqMonitor.verifyStructuralIntegrity();
      seqMonitor.verifyPreAlloc(preModScenario).verifyNaturalAscending(numToAdd).verifyPostAlloc(preModScenario);
      numExpectedIteratedValues=numToAdd;
    }else{
      Assertions.assertThrows(monitoredFunctionGen.expectedException,()->itrMonitor.forEachRemaining(monitoredConsumer,functionCallType));
      seqMonitor.verifyStructuralIntegrity();
      itrMonitor.verifyIteratorState();
      
      switch(monitoredFunctionGen){
        case ThrowModItr:
          numExpectedIteratedValues=1;
          var verifyItr=seqMonitor.verifyPreAlloc(preModScenario);
          if(seqMonitor.nestedType.forwardIteration){
            verifyItr.verifyAscending(1,numToAdd-1);
          }else{
            verifyItr.verifyDescending(numToAdd-1);
          }
          verifyItr.verifyPostAlloc(preModScenario);
          break;
        case ModItr:
          numExpectedIteratedValues=numToAdd;
          seqMonitor.verifyPreAlloc(preModScenario).verifyPostAlloc(preModScenario);
          break;
        case Throw:
          numExpectedIteratedValues=1;
          seqMonitor.verifyPreAlloc(preModScenario).verifyNaturalAscending(numToAdd).verifyPostAlloc(preModScenario);
          break;
        case ModSeq:
          numExpectedIteratedValues=numToAdd;
          verifyItr=seqMonitor.verifyPreAlloc(preModScenario);
          if(seqMonitor.nestedType.forwardIteration)
          {
            verifyItr.verifyAscending(numToAdd);
            for(int i=0;i<numToAdd;++i){
              verifyItr.verifyIllegalAdd();
            }
          }
          else
          {
            for(int i=0;i<numToAdd;++i){
              verifyItr.verifyIllegalAdd();
            }
            verifyItr.verifyDescending(numToAdd);
          }
          verifyItr.verifyPostAlloc(preModScenario);
          break;
        case ThrowModSeq:
          numExpectedIteratedValues=1;
          seqMonitor.verifyPreAlloc(PreModScenario.ModSeq).verifyNaturalAscending(numToAdd).verifyPostAlloc(PreModScenario.ModSeq);
          break;
        default:
          throw new Error("Unknown monitored function gen "+monitoredFunctionGen);
      }
    }
  }else{
    Assertions.assertThrows(preModScenario.expectedException,()->itrMonitor.forEachRemaining(monitoredConsumer,functionCallType));
    seqMonitor.verifyStructuralIntegrity();
    itrMonitor.verifyIteratorState();
    switch(monitoredFunctionGen){
        case ThrowModItr:
          numExpectedIteratedValues=1;
          seqMonitor.verifyPreAlloc(preModScenario).verifyNaturalAscending(numToAdd).verifyPostAlloc(preModScenario);
          break;
        case ModItr:
          numExpectedIteratedValues=1;
          //verification in tis situation is tricky. Just skip it
          break;
        case NoThrow:
          numExpectedIteratedValues=numToAdd;
          if(preModScenario==PreModScenario.ModSeq && seqMonitor.nestedType.forwardIteration){
            ++numExpectedIteratedValues;
          }
          seqMonitor.verifyPreAlloc(preModScenario).verifyNaturalAscending(numToAdd).verifyPostAlloc(preModScenario);
          break;
        case Throw:
          numExpectedIteratedValues=1;
          seqMonitor.verifyPreAlloc(preModScenario).verifyNaturalAscending(numToAdd).verifyPostAlloc(preModScenario);
          break;
        case ModSeq:
          var verifyItr=seqMonitor.verifyPreAlloc(preModScenario);
          if(seqMonitor.nestedType.forwardIteration)
          {
            verifyItr.verifyAscending(numToAdd);
            if(preModScenario==PreModScenario.ModSeq)
            {
              numExpectedIteratedValues=numToAdd+1;
            }
            else
            {
              numExpectedIteratedValues=1;
            }
            for(int i=0;i<numExpectedIteratedValues;++i)
            {
              verifyItr.verifyIllegalAdd();
            }
          }
          else
          {
            if(preModScenario==PreModScenario.ModSeq)
            {
              numExpectedIteratedValues=numToAdd;
            }
            else
            {
              numExpectedIteratedValues=1;
            }
            
            for(int i=0;i<numExpectedIteratedValues;++i)
            {
              verifyItr.verifyIllegalAdd();
            }
            verifyItr.verifyDescending(numToAdd);
            
          }

          verifyItr.verifyPostAlloc(preModScenario);
          break;
        
        case ThrowModSeq:
          verifyItr=seqMonitor.verifyPreAlloc(preModScenario);
          if(seqMonitor.nestedType.forwardIteration)
          {
            verifyItr.verifyAscending(numToAdd).verifyIllegalAdd();
          }
          else
          {
            verifyItr.verifyIllegalAdd().verifyDescending(numToAdd);
          }
          verifyItr.verifyPostAlloc(preModScenario);
          numExpectedIteratedValues=1;
          break;
       
        default:
          throw new Error("Unknown monitored function gen "+monitoredFunctionGen);
    }
  }
  Assertions.assertEquals(numExpectedIteratedValues,monitoredConsumer.encounteredValues.size());
  //TODO verify the iterated values

}
#ENDDEF
#MACRODEF testItrremove_void<PARALLEL>()
static Stream<Arguments> getItrremove_voidArgs(){
  return ArgBuilder.buildSeqArgs((streamBuilder,nestedType,checkedType)->{
    for(var removeScenario:ItrRemoveScenario.values()){
      if(removeScenario.validWithForwardItr && (checkedType.checked || removeScenario.expectedException==null)){
        for(var sequenceContentsScenario:SequenceContentsScenario.values()){
          if(sequenceContentsScenario.nonEmpty || removeScenario.validWithEmptySeq){
            for(var preModScenario:PreModScenario.values()){
              if(preModScenario.appliesToRootItr && (checkedType.checked || preModScenario.expectedException==null)){
                for(var seqLocation:SequenceLocation.values()){
                  if(seqLocation.expectedException==null && (sequenceContentsScenario.nonEmpty || seqLocation==SequenceLocation.BEGINNING) && (seqLocation!=SequenceLocation.END || removeScenario!=ItrRemoveScenario.PostInit) && (removeScenario!=ItrRemoveScenario.PostInit || seqLocation==SequenceLocation.BEGINNING)){
                    streamBuilder.accept(Arguments.of(new $ClassPrefix$SnglLnkSeqMonitor(nestedType,checkedType),removeScenario,preModScenario,sequenceContentsScenario,seqLocation));
                  }
                }
              }
            }
          }
        }
      }
    }
  });
}
#IFSWITCH PARALLEL==true
@org.junit.jupiter.api.Test
public void testItrremove_void(){
  getItrremove_voidArgs().parallel().map(Arguments::get).forEach(args->{
      testItrremove_voidHelper(($ClassPrefix$SnglLnkSeqMonitor)args[0],(ItrRemoveScenario)args[1],(PreModScenario)args[2],(SequenceContentsScenario)args[3],(SequenceLocation)args[4]);
  });
}
private static void testItrremove_voidHelper
#ELSE
@org.junit.jupiter.params.ParameterizedTest
@org.junit.jupiter.params.provider.MethodSource("getItrremove_voidArgs")
public void testItrremove_void
#ENDIF
($ClassPrefix$SnglLnkSeqMonitor seqMonitor,ItrRemoveScenario removeScenario,PreModScenario preModScenario,SequenceContentsScenario seqContentsScenario,SequenceLocation seqLocation){
  int numToAdd=seqContentsScenario.nonEmpty?100:0;
  for(int i=0;i<numToAdd;++i){
    seqMonitor.add(i);
  }
  var itrMonitor=seqMonitor.getItrMonitor();
  
  switch(seqLocation)
  {
    case BEGINNING:
      break;
    case MIDDLE:
      for(int i=0,bound=numToAdd/2;i<bound;++i)
      {
        itrMonitor.iterateForward();
      }
      break;
    case END:
      for(int i=0;i<numToAdd;++i)
      {
        itrMonitor.iterateForward();
      }
      break;
    default:
      throw new Error("Unknown seqLocation "+seqLocation);
  }
  switch(removeScenario){
    case PostNext:
      if(seqLocation==SequenceLocation.BEGINNING)
      {
        itrMonitor.iterateForward();
      }
      break;
    case PostRemove:
      if(seqLocation==SequenceLocation.BEGINNING)
      {
        itrMonitor.iterateForward();
      }
      itrMonitor.remove();
    case PostInit:
      break;
    default:
       throw new Error("unknown remove scenario "+removeScenario);
  }
  seqMonitor.illegalAdd(preModScenario);
  SequenceVerificationItr verifyItr;
  if(removeScenario.expectedException==null){
    if(preModScenario.expectedException==null){
      itrMonitor.remove();
      itrMonitor.verifyIteratorState();
      seqMonitor.verifyStructuralIntegrity();
      while(itrMonitor.hasNext()){
        itrMonitor.iterateForward();
        itrMonitor.remove();
        itrMonitor.verifyIteratorState();
        seqMonitor.verifyStructuralIntegrity();
      }
      Assertions.assertFalse(itrMonitor.hasNext());
      if(seqLocation==SequenceLocation.BEGINNING)
      {
        Assertions.assertTrue(seqMonitor.isEmpty());
      }
      return;
    }else{
      Assertions.assertThrows(preModScenario.expectedException,()->itrMonitor.remove());
      itrMonitor.verifyIteratorState();
      seqMonitor.verifyStructuralIntegrity();
      verifyItr=seqMonitor.verifyPreAlloc(preModScenario).verifyNaturalAscending(numToAdd);
    }
  }else{
    Assertions.assertThrows(removeScenario.expectedException,()->itrMonitor.remove());
    itrMonitor.verifyIteratorState();
    seqMonitor.verifyStructuralIntegrity();
    verifyItr=seqMonitor.verifyPreAlloc(preModScenario);
    switch(removeScenario){
      case PostInit:
        verifyItr.verifyNaturalAscending(numToAdd);
        break;
      case PostRemove:
        if(seqMonitor.nestedType.forwardIteration)
        {
          switch(seqLocation)
          {
            case BEGINNING:
              verifyItr.verifyAscending(1,numToAdd-1);
              break;
            case MIDDLE:
              verifyItr.verifyAscending((numToAdd/2)-1).verifyAscending(numToAdd/2,numToAdd/2);
              break;
            case END:
              verifyItr.verifyAscending(numToAdd-1);
              break;
            default:
             throw new Error("Unknown seqLocation "+seqLocation);
          }

        }else{
          switch(seqLocation)
          {
            case BEGINNING:
              verifyItr.verifyDescending(numToAdd-1);
              break;
            case MIDDLE:
              verifyItr.verifyDescending(numToAdd,(numToAdd/2)-1).verifyDescending(numToAdd/2);
              break;
            case END:
              verifyItr.verifyDescending(numToAdd,numToAdd-1);
              break;
            default:
               throw new Error("Unknown seqLocation "+seqLocation);
          }
        }
        break;
      default:
        throw new Error("unknown remove scenario "+removeScenario);
    }
  }
  verifyItr.verifyPostAlloc(preModScenario);
}
#ENDDEF
#MACRODEF testItrnext_void<PARALLEL>()
static Stream<Arguments> getItrnext_voidArgs(){
  return ArgBuilder.buildSeqArgs((streamBuilder,nestedType,checkedType)->{
    for(var itrScenario:IterationScenario.values()){
      if(checkedType.checked || itrScenario==IterationScenario.NoMod){
        for(var seqContentsScenario:SequenceContentsScenario.values()){
          if(seqContentsScenario.nonEmpty || itrScenario.validWithEmptySeq){
            if(itrScenario.preModScenario.appliesToRootItr){
              for(var outputType:$ClassPrefix$OutputTestArgType.values()){
                streamBuilder.accept(Arguments.of(new $ClassPrefix$SnglLnkSeqMonitor(nestedType,checkedType),itrScenario,seqContentsScenario,outputType));
              }
            }
          }
        }
      }
    }
  });
}
#IFSWITCH PARALLEL==true
@org.junit.jupiter.api.Test
public void testItrnext_void(){
  getItrnext_voidArgs().parallel().map(Arguments::get).forEach(args->{
      testItrnext_voidHelper(($ClassPrefix$SnglLnkSeqMonitor)args[0],(IterationScenario)args[1],(SequenceContentsScenario)args[2],($ClassPrefix$OutputTestArgType)args[3]);
  });
}
private static void testItrnext_voidHelper
#ELSE
@org.junit.jupiter.params.ParameterizedTest
@org.junit.jupiter.params.provider.MethodSource("getItrnext_voidArgs")
public void testItrnext_void
#ENDIF
($ClassPrefix$SnglLnkSeqMonitor seqMonitor,IterationScenario itrScenario,SequenceContentsScenario seqContentsScenario,$ClassPrefix$OutputTestArgType outputType){
  int numToAdd=seqContentsScenario.nonEmpty?100:0;
  for(int i=0;i<numToAdd;++i)
  {
    seqMonitor.add(i);
  }
  var itrMonitor=seqMonitor.getItrMonitor();
  switch(itrScenario){
    case NoMod:
    case ModSeqSupercedesThrowNSEE:
      for(int i=0;;++i){
        if(i==numToAdd){
          Assertions.assertFalse(itrMonitor.hasNext());
          break;
        }
        Assertions.assertTrue(itrMonitor.hasNext());
        itrMonitor.verifyNext(seqMonitor.nestedType==NestedType.STACK?numToAdd-i-1:i,outputType);
        itrMonitor.verifyIteratorState();
        seqMonitor.verifyStructuralIntegrity();
      }
    case ModSeq:
      break;
    default:
      throw new Error("unknown itr scenario "+itrScenario);
  }
  if(seqMonitor.checkedType.checked)
  {
    seqMonitor.illegalAdd(itrScenario.preModScenario);
    Assertions.assertThrows(itrScenario.expectedException,()->itrMonitor.iterateForward());
  }
  itrMonitor.verifyIteratorState();
  seqMonitor.verifyStructuralIntegrity();
  seqMonitor.verifyPreAlloc(itrScenario.preModScenario).verifyNaturalAscending(numToAdd).verifyPostAlloc(itrScenario.preModScenario);
}
#ENDDEF
#MACRODEF testConstructor_void<PARALLEL>()
static Stream<Arguments> getConstructor_voidArgs(){
  return ArgBuilder.buildSeqArgs((streamBuilder,nestedType,checkedType)->{
    streamBuilder.accept(Arguments.of(new $ClassPrefix$SnglLnkSeqMonitor(nestedType,checkedType)));
  });
}
#IFSWITCH PARALLEL==true
@org.junit.jupiter.api.Test
public void testConstructor_void(){
  getConstructor_voidArgs().parallel().map(Arguments::get).forEach(args->{
      testConstructor_voidHelper(($ClassPrefix$SnglLnkSeqMonitor)args[0]);
  });
}
private static void testConstructor_voidHelper
#ELSE
@org.junit.jupiter.params.ParameterizedTest
@org.junit.jupiter.params.provider.MethodSource("getConstructor_voidArgs")
public void testConstructor_void
#ENDIF
($ClassPrefix$SnglLnkSeqMonitor seqMonitor){
  if(seqMonitor.checkedType.checked){
    Assertions.assertEquals(0,seqMonitor.nestedType==NestedType.QUEUE?FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.CheckedQueue.modCount(seqMonitor.seq):FieldAndMethodAccessor.$ClassPrefix$SnglLnkSeq.CheckedStack.modCount(seqMonitor.seq));
  }
  Assertions.assertEquals(0,seqMonitor.seq.size);
  Assertions.assertNull(seqMonitor.seq.head);
}
#ENDDEF

}