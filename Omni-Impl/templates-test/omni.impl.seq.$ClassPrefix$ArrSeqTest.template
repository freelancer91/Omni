#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl.seq;
//import omni.impl.seq.$ClassPrefix$ArrSeq.UncheckedList;
//import omni.impl.seq.$ClassPrefix$ArrSeq.CheckedList;
//import omni.impl.seq.$ClassPrefix$ArrSeq.UncheckedStack;
//import omni.impl.seq.$ClassPrefix$ArrSeq.CheckedStack;
import omni.util.TypeConversionUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.function.IntFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
#IF OfInt,OfLong,OfDouble
import java.util.function.$TypeNameModifier$Consumer;
import java.util.function.$TypeNameModifier$Predicate;
#ELSEIFNOT OfRef
import omni.function.$TypeNameModifier$Consumer;
import omni.function.$TypeNameModifier$Predicate;
#ENDIF
import java.util.ConcurrentModificationException;
import omni.util.OmniArray;
@SuppressWarnings({"rawtypes","unchecked"}) 
public class $ClassPrefix$ArrSeqTest{
  #MACRO StructImpl<UncheckedStack>()
  #MACRO StructImpl<UncheckedList>()
  #MACRO StructImpl<CheckedStack>()
  #MACRO StructImpl<CheckedList>()
  
  #MACRO SubListImpl<0,0,0,0,Checked>()
  #MACRO SubListImpl<0,0,0,0,Unchecked>()
  
  #MACRO SubListImpl<0,0,0,10,Checked>()
  #MACRO SubListImpl<0,0,0,10,Unchecked>()
  
  #MACRO SubListImpl<0,0,10,0,Checked>()
  #MACRO SubListImpl<0,0,10,0,Unchecked>()
  
  #MACRO SubListImpl<0,0,10,10,Checked>()
  #MACRO SubListImpl<0,0,10,10,Unchecked>()
  
  #MACRO SubListImpl<0,10,0,0,Checked>()
  #MACRO SubListImpl<0,10,0,0,Unchecked>()
  
  #MACRO SubListImpl<0,10,0,10,Checked>()
  #MACRO SubListImpl<0,10,0,10,Unchecked>()
  
  #MACRO SubListImpl<0,10,10,0,Checked>()
  #MACRO SubListImpl<0,10,10,0,Unchecked>()
  
  #MACRO SubListImpl<0,10,10,10,Checked>()
  #MACRO SubListImpl<0,10,10,10,Unchecked>()
  
  #MACRO SubListImpl<10,0,0,0,Checked>()
  #MACRO SubListImpl<10,0,0,0,Unchecked>()
  
  #MACRO SubListImpl<10,0,0,10,Checked>()
  #MACRO SubListImpl<10,0,0,10,Unchecked>()
  
  #MACRO SubListImpl<10,0,10,0,Checked>()
  #MACRO SubListImpl<10,0,10,0,Unchecked>()
  
  #MACRO SubListImpl<10,0,10,10,Checked>()
  #MACRO SubListImpl<10,0,10,10,Unchecked>()
  
  #MACRO SubListImpl<10,10,0,0,Checked>()
  #MACRO SubListImpl<10,10,0,0,Unchecked>()
  
  #MACRO SubListImpl<10,10,0,10,Checked>()
  #MACRO SubListImpl<10,10,0,10,Unchecked>()
  
  #MACRO SubListImpl<10,10,10,0,Checked>()
  #MACRO SubListImpl<10,10,10,0,Unchecked>()
  
  #MACRO SubListImpl<10,10,10,10,Checked>()
  #MACRO SubListImpl<10,10,10,10,Unchecked>()
  
  private static int getPrivateIntField(Object obj,String fieldName)
  {
    try
    {
      var field=obj.getClass().getDeclaredField(fieldName);
      field.setAccessible(true);
      return field.getInt(obj);
    }
    catch(Exception e)
    {
      throw new RuntimeException(e);
    }
  }
  private static Object getPrivateRefField(Object obj,String fieldName)
  {
    try
    {
      var field=obj.getClass().getDeclaredField(fieldName);
      field.setAccessible(true);
      return field.get(obj);
    }
    catch(Exception e)
    {
      throw new RuntimeException(e);
    }
  }


#MACRODEF SubListImpl<ROOTPREALLOC,SUBLISTPREALLOC,SUBLISTPOSTALLOC,ROOTPOSTALLOC,CHECKED>()



@Test
public void testCHECKEDListsubList_intint()
{
  #MACRO ConstructSubList
}
#ENDDEF
#MACRODEF ConstructSubList()
var root=new CHECKEDList();
for(int i=0;i<ROOTPREALLOC;++i)
{
  root.add(TypeConversionUtil.convertTo$ArrayType$(i));
}
for(int i=0;i<ROOTPOSTALLOC;++i)
{
  root.add(TypeConversionUtil.convertTo$ArrayType$(ROOTPREALLOC+SUBLISTPREALLOC+SUBLISTPOSTALLOC+i));
}
var subList=root.subList(ROOTPREALLOC,ROOTPREALLOC);
for(int i=0;i<SUBLISTPREALLOC+SUBLISTPOSTALLOC;++i)
{
  root.add(TypeConversionUtil.convertTo$ArrayType$(ROOTPREALLOC+i));
}
var seq=subList.subList(SUBLISTPREALLOC,SUBLISTPREALLOC);
Class<?> subListClass=seq.getClass();
Field subListrootOffsetField=subListClass.getDeclaredField("rootOffset");
subListrootOffsetField.setAccessible(true);
Field subListsizeField=subListClass.getDeclaredField("size");
subListsizeField.setAccessible(true);
Field subListparentField=subListClass.getDeclaredField("parent");
subListparentField.setAccessible(true);
Field subListrootField=subListClass.getDeclaredField("root");
subListrootField.setAccessible(true);
#IFSWITCH CHECKED==Checked
Field subListmodCountField=subListClass.getDeclaredField("modCount");
subListmodCountField.setAccessible(true);
#ENDIF
#ENDDEF
  
  
#MACRODEF StructImpl<STRUCTNAME>()
#MACRO TestConstructor<DEFAULT>()
#MACRO TestConstructor<NULL>()
#MACRO TestConstructor<50>()
#MACRO TestConstructor<0>()
#MACRO TestConstructor<10>()
#MACRO TestClone<DEFAULT>()
#MACRO TestClone<NULL>()
#MACRO TestClone<50>()
#MACRO TestClone<0>()
#MACRO TestClone<10>()
#MACRO TestMiscMethods<DEFAULT>()
#MACRO TestForEachMethods<DEFAULT>(,)
#MACRO TestRemoveIfMethods<DEFAULT,>()
#IFNOT OfRef
#MACRO TestForEachMethods<DEFAULT>($TypeNameModifier$,)
#MACRO TestRemoveIfMethods<DEFAULT,$TypeNameModifier$>()
#ENDIF
#MACRO TestInputMethods<DEFAULT>($ArrayType$,$ArrayType$)
#MACRO TestInputMethods<NULL>($ArrayType$,$ArrayType$)
#MACRO TestInputMethods<50>($ArrayType$,$ArrayType$)
#IFNOT OfRef
#MACRO TestInputMethods<DEFAULT>($BoxedType$,$ArrayType$)
#MACRO TestInputMethods<NULL>($BoxedType$,$ArrayType$)
#MACRO TestInputMethods<50>($BoxedType$,$ArrayType$)
  #IFNOT OfBoolean
#MACRO TestInputMethods<DEFAULT>(boolean,$ArrayType$boolean)
#MACRO TestInputMethods<NULL>(boolean,$ArrayType$boolean)
#MACRO TestInputMethods<50>(boolean,$ArrayType$boolean)
#MACRO TestInputMethods<DEFAULT>(Boolean,$ArrayType$boolean)
#MACRO TestInputMethods<NULL>(Boolean,$ArrayType$boolean)
#MACRO TestInputMethods<50>(Boolean,$ArrayType$boolean)
    #IFNOT OfByte,OfChar
#MACRO TestInputMethods<DEFAULT>(byte,$ArrayType$)
#MACRO TestInputMethods<NULL>(byte,$ArrayType$)
#MACRO TestInputMethods<50>(byte,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(Byte,$ArrayType$)
#MACRO TestInputMethods<NULL>(Byte,$ArrayType$)
#MACRO TestInputMethods<50>(Byte,$ArrayType$)
      #IFNOT OfShort
#MACRO TestInputMethods<DEFAULT>(char,$ArrayType$)
#MACRO TestInputMethods<NULL>(char,$ArrayType$)
#MACRO TestInputMethods<50>(char,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(Character,$ArrayType$)
#MACRO TestInputMethods<NULL>(Character,$ArrayType$)
#MACRO TestInputMethods<50>(Character,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(short,$ArrayType$)
#MACRO TestInputMethods<NULL>(short,$ArrayType$)
#MACRO TestInputMethods<50>(short,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(Short,$ArrayType$)
#MACRO TestInputMethods<NULL>(Short,$ArrayType$)
#MACRO TestInputMethods<50>(Short,$ArrayType$)
        #IFNOT OfInt
#MACRO TestInputMethods<DEFAULT>(int,$ArrayType$)
#MACRO TestInputMethods<NULL>(int,$ArrayType$)
#MACRO TestInputMethods<50>(int,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(Integer,$ArrayType$)
#MACRO TestInputMethods<NULL>(Integer,$ArrayType$)
#MACRO TestInputMethods<50>(Integer,$ArrayType$)
          #IFNOT OfLong
#MACRO TestInputMethods<DEFAULT>(long,$ArrayType$)
#MACRO TestInputMethods<NULL>(long,$ArrayType$)
#MACRO TestInputMethods<50>(long,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(Long,$ArrayType$)
#MACRO TestInputMethods<NULL>(Long,$ArrayType$)
#MACRO TestInputMethods<50>(Long,$ArrayType$)
            #IFNOT OfFloat
#MACRO TestInputMethods<DEFAULT>(float,$ArrayType$)
#MACRO TestInputMethods<NULL>(float,$ArrayType$)
#MACRO TestInputMethods<50>(float,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(Float,$ArrayType$)
#MACRO TestInputMethods<NULL>(Float,$ArrayType$)
#MACRO TestInputMethods<50>(Float,$ArrayType$)
            #ENDIF
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF

#MACRO TestOutputMethods<DEFAULT>($ArrayType$,$TypeNameModifier$,$defaultVal$,OmniArray.Of$ClassPrefix$.DEFAULT_ARR)
#IFNOT OfRef
#MACRO TestOutputMethods<DEFAULT>($BoxedType$,,null,OmniArray.Of$ClassPrefix$.DEFAULT_BOXED_ARR)
  #IFNOT OfDouble
#MACRO TestOutputMethods<DEFAULT>(double,Double,Double.NaN,OmniArray.OfDouble.DEFAULT_ARR)
    #IFNOT OfFloat
#MACRO TestOutputMethods<DEFAULT>(float,Float,Float.NaN,OmniArray.OfFloat.DEFAULT_ARR)
      #IFNOT OfLong
#MACRO TestOutputMethods<DEFAULT>(long,Long,Long.MIN_VALUE,OmniArray.OfLong.DEFAULT_ARR)
        #IFNOT OfInt
#MACRO TestOutputMethods<DEFAULT>(int,Int,Integer.MIN_VALUE,OmniArray.OfInt.DEFAULT_ARR)
          #IFNOT OfShort,OfChar
#MACRO TestOutputMethods<DEFAULT>(short,Short,Short.MIN_VALUE,OmniArray.OfShort.DEFAULT_ARR)
            #IFNOT OfByte
#MACRO TestOutputMethods<DEFAULT>(char,Char,Character.MIN_VALUE,OmniArray.OfChar.DEFAULT_ARR)
#MACRO TestOutputMethods<DEFAULT>(byte,Byte,Byte.MIN_VALUE,OmniArray.OfByte.DEFAULT_ARR)
            #ENDIF
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF
#ENDDEF
}
#MACRODEF VerifyBooleanRemoveIfNonModHelper(INITVAL,LENGTH)
currVal=INITVAL;
trueCount=0;
falseCount=0;
for(int i=0;;){
  Assertions.assertEquals(currVal,seq.arr[i]);
  if(currVal){
    ++trueCount;
  }else{
    ++falseCount;
  }
  if((trueCount+falseCount)==LENGTH){
    break;
  }
  if(((++i)%period)==0){
    currVal=!currVal;
  }
}
#ENDDEF
#MACRODEF VerifyBooleanRemoveIfNonMod(INITVAL,LENGTH)
Assertions.assertEquals(LENGTH,seq.size());
#MACRO VerifyBooleanRemoveIfNonModHelper(INITVAL,LENGTH)
if(falseCount!=LENGTH && trueCount!=LENGTH){
  Assertions.assertEquals(LENGTH+4,seq.modCount);
  Assertions.assertEquals(2,filter.callCount);
}else{
  Assertions.assertEquals(LENGTH+2,seq.modCount);
  Assertions.assertEquals(1,filter.callCount);
}
#ENDDEF
#MACRODEF InitNonBooleanRemoveIf(LENGTH)
#MACRO ConstructionRoutine()
for(int i=0;i<LENGTH;++i){
  seq.add(TypeConversionUtil.convertTo$ArrayType$(i));
}
#ENDDEF
#MACRODEF InitBooleanRemoveIf(INITVAL,LENGTH)
#MACRO ConstructionRoutine()
boolean currVal=INITVAL;
int trueCount=0;
int falseCount=0;
for(int i=0;;){
  seq.add(currVal);
  if(currVal){
    ++trueCount;
  }else{
    ++falseCount;
  }
  if((trueCount+falseCount)==LENGTH){
    break;
  }
  if(((++i)%period)==0){
    currVal=!currVal;
  }
}
#ENDDEF
#MACRODEF BooleanRemoveIfNonEmptyRemoveTrue(FIRSTVAL)
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_FirstValFIRSTVAL_RemoveTrue(){
  for(int period=1;period<=10;++period){
    #MACRO InitBooleanRemoveIf(FIRSTVAL,10)
    var filter=new $ClassPrefix$MonitoredPredicate.RemoveTruePredicate();
    Assertions.assertEquals(trueCount!=0,seq.removeIf((OUTPUTMODIFIERPredicate)filter));
    Assertions.assertEquals(falseCount,seq.size());
    for(int i=0;i<falseCount;++i){
      Assertions.assertFalse(seq.arr[i]);
    }
    Assertions.assertEquals(falseCount==0||trueCount==0?1:2,filter.callCount);
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
    Assertions.assertEquals(trueCount==0?10:11,seq.modCount);
#ENDIF
  }
}
#ENDDEF
#MACRODEF BooleanRemoveIfNonEmptyRemoveFalse(FIRSTVAL)
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_FirstValFIRSTVAL_RemoveFalse(){
  for(int period=1;period<=10;++period){
    #MACRO InitBooleanRemoveIf(FIRSTVAL,10)
    var filter=new $ClassPrefix$MonitoredPredicate.RemoveFalsePredicate();
    Assertions.assertEquals(falseCount!=0,seq.removeIf((OUTPUTMODIFIERPredicate)filter));
    Assertions.assertEquals(trueCount,seq.size());
    for(int i=0;i<trueCount;++i){
      Assertions.assertTrue(seq.arr[i]);
    }
    Assertions.assertEquals(falseCount==0||trueCount==0?1:2,filter.callCount);
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
    Assertions.assertEquals(falseCount==0?10:11,seq.modCount);
#ENDIF
  }
}
#ENDDEF
#MACRODEF BooleanRemoveIfNonEmptyRemoveAll(FIRSTVAL)
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_FirstValFIRSTVAL_RemoveAll(){
  for(int period=1;period<=10;++period){
    #MACRO InitBooleanRemoveIf(FIRSTVAL,10)
    var filter=new $ClassPrefix$MonitoredPredicate.RemoveAllPredicate();
    Assertions.assertTrue(seq.removeIf((OUTPUTMODIFIERPredicate)filter));
    Assertions.assertEquals(0,seq.size());
    Assertions.assertEquals(falseCount==0||trueCount==0?1:2,filter.callCount);
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
    Assertions.assertEquals(11,seq.modCount);
#ENDIF
  }
}
#ENDDEF
#MACRODEF BooleanRemoveIfNonEmptyRemoveNone(FIRSTVAL)
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_FirstValFIRSTVAL_RemoveNone(){
  for(int period=1;period<=10;++period){
    #MACRO InitBooleanRemoveIf(FIRSTVAL,10)
    var filter=new $ClassPrefix$MonitoredPredicate.RemoveNonePredicate();
    Assertions.assertFalse(seq.removeIf((OUTPUTMODIFIERPredicate)filter));
    Assertions.assertEquals(10,seq.size());
    Assertions.assertEquals(falseCount==0||trueCount==0?1:2,filter.callCount);
    #MACRO VerifyBooleanRemoveIfNonModHelper(FIRSTVAL,10)
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
    Assertions.assertEquals(10,seq.modCount);
#ENDIF
  }
}
#ENDDEF
#MACRODEF TestRemoveIfMethods<INITIALCAPACITY,OUTPUTMODIFIER>()
#IF OfBoolean
#MACRO EmptyRemoveIfTest<false>(RemoveTruePredicate)
#MACRO EmptyRemoveIfTest<false>(RemoveFalsePredicate)
#MACRO BooleanRemoveIfNonEmptyRemoveTrue(true)
#MACRO BooleanRemoveIfNonEmptyRemoveTrue(false)
#MACRO BooleanRemoveIfNonEmptyRemoveFalse(true)
#MACRO BooleanRemoveIfNonEmptyRemoveFalse(false)
#MACRO BooleanRemoveIfNonEmptyRemoveAll(true)
#MACRO BooleanRemoveIfNonEmptyRemoveAll(false)
#MACRO BooleanRemoveIfNonEmptyRemoveNone(true)
#MACRO BooleanRemoveIfNonEmptyRemoveNone(false)
  #IFSWITCH STRUCTNAME==CheckedList,CheckedStack
#MACRO TestRemoveIfBooleanNonEmptyModding(true,RemoveTrueArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO TestRemoveIfBooleanNonEmptyModding(true,RemoveFalseArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO TestRemoveIfBooleanNonEmptyModding(false,RemoveTrueArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO TestRemoveIfBooleanNonEmptyModding(false,RemoveFalseArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO TestRemoveIfBooleanNonEmptyModding(true,RemoveNoneArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO TestRemoveIfBooleanNonEmptyModding(true,RemoveAllArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO TestRemoveIfBooleanNonEmptyModding(false,RemoveNoneArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO TestRemoveIfBooleanNonEmptyModding(false,RemoveAllArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO TestRemoveIfBooleanNonEmptyThrowing(true)
#MACRO TestRemoveIfBooleanNonEmptyThrowing(false)
#MACRO TestRemoveIfBooleanNonEmptyThrowAndMod(false)
#MACRO TestRemoveIfBooleanNonEmptyThrowAndMod(true)
#MACRO EmptyRemoveIfTest<false>(RemoveTrueArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO EmptyRemoveIfTest<false>(RemoveFalseArrSeqSTRUCTNAMEModifyingPredicate)
  #ENDIF
#ELSE
  #IFSWITCH STRUCTNAME==CheckedList,CheckedStack
#MACRO EmptyRemoveIfTest<false>(RetainSecondArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO EmptyRemoveIfTest<false>(RetainSecondAndLastArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO EmptyRemoveIfTest<false>(RemoveFirstAndThirdArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO EmptyRemoveIfTest<false>(RemoveFirstArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO EmptyRemoveIfTest<false>(RemoveFirstAndSecondToLastArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO CheckedModdingNonEmptyNonBooleanRemoveIfTests(3)
#MACRO CheckedModdingNonEmptyNonBooleanRemoveIfTests(50)
#MACRO CheckedModdingNonEmptyNonBooleanRemoveIfTests(100)
  #ENDIF
#MACRO EmptyRemoveIfTest<false>(RetainSecondPredicate)
#MACRO EmptyRemoveIfTest<true>(RetainSecondAndLastPredicate)
#MACRO EmptyRemoveIfTest<false>(RemoveFirstAndThirdPredicate)
#MACRO EmptyRemoveIfTest<false>(RemoveFirstPredicate)
#MACRO EmptyRemoveIfTest<true>(RemoveFirstAndSecondToLastPredicate)  
#MACRO NonCheckedNonEmptyNonBooleanRemoveIfTests(3)
#MACRO NonCheckedNonEmptyNonBooleanRemoveIfTests(50)
#MACRO NonCheckedNonEmptyNonBooleanRemoveIfTests(100)
#ENDIF
#MACRO EmptyRemoveIfTest<false>(RemoveAllPredicate)
#MACRO EmptyRemoveIfTest<false>(RemoveNonePredicate)
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
#MACRO EmptyRemoveIfTest<false>(RemoveAllArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO EmptyRemoveIfTest<false>(RemoveNoneArrSeqSTRUCTNAMEModifyingPredicate)
#MACRO EmptyRemoveIfTest<false>(ThrowingPredicate)
#MACRO EmptyRemoveIfTest<false>(ModifyingArrSeqSTRUCTNAMEAndThrowingPredicate)
#ENDIF
#ENDDEF
#MACRODEF TestRemoveIfBooleanNonEmptyThrowing(FIRSTVAL)
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_FirstValFIRSTVAL_Throwing(){
  for(int period=1;period<=10;++period){
    #MACRO InitBooleanRemoveIf(FIRSTVAL,10)
    var filter=new $ClassPrefix$MonitoredPredicate.ThrowingPredicate();
    Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.removeIf((OUTPUTMODIFIERPredicate)filter));
    Assertions.assertEquals(10,seq.size());
    #MACRO VerifyBooleanRemoveIfNonModHelper(FIRSTVAL,10)
    Assertions.assertEquals(10,seq.modCount);
    Assertions.assertEquals(1,filter.callCount);
  }
}
#ENDDEF
#MACRODEF TestRemoveIfBooleanNonEmptyThrowAndMod(FIRSTVAL)
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_FirstValFIRSTVAL_ThrowAndMod(){
  for(int period=1;period<=10;++period){
    #MACRO InitBooleanRemoveIf(FIRSTVAL,10)
    var filter=new $ClassPrefix$MonitoredPredicate.ModifyingArrSeqSTRUCTNAMEAndThrowingPredicate(seq);
    Assertions.assertThrows(ConcurrentModificationException.class,()->seq.removeIf((OUTPUTMODIFIERPredicate)filter));
    Assertions.assertEquals(11,seq.size());
    #MACRO VerifyBooleanRemoveIfNonModHelper(FIRSTVAL,10)
    Assertions.assertEquals(FIRSTVAL,seq.arr[10]);
    Assertions.assertEquals(10+1,seq.modCount);
    Assertions.assertEquals(1,filter.callCount);
  }
}
#ENDDEF
#MACRODEF TestRemoveIfBooleanNonEmptyModding(FIRSTVAL,PREDICATETYPE)
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_FirstValFIRSTVAL_PREDICATETYPE(){
  for(int period=1;period<=10;++period){
    #MACRO InitBooleanRemoveIf(FIRSTVAL,10)
    var filter=new $ClassPrefix$MonitoredPredicate.PREDICATETYPE(seq);
    Assertions.assertThrows(ConcurrentModificationException.class,()->seq.removeIf((OUTPUTMODIFIERPredicate)filter));
    #MACRO VerifyBooleanRemoveIfNonMod(FIRSTVAL,10)
  }
}
#ENDDEF
#MACRODEF EmptyRemoveIfTest<USESIZEPARAMETER>(PREDICATETYPE)
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqIsEmpty_PREDICATETYPE()
{
  #MACRO InitNonBooleanRemoveIf(0)
#IFSWITCH USESIZEPARAMETER==true
  var filter=new $ClassPrefix$MonitoredPredicate.PREDICATETYPE(seq.size);
#ELSE
  var filter=new $ClassPrefix$MonitoredPredicate.PREDICATETYPE(seq);
#ENDIF
  Assertions.assertFalse(seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,filter.callCount);
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
}
#ENDDEF
#MACRODEF NonCheckedNonEmptyNonBooleanRemoveIfTests(LENGTH)
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RemoveAll(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RemoveAllPredicate();
  Assertions.assertTrue(seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(0,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RemoveNone(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RemoveNonePredicate();
  Assertions.assertFalse(seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(LENGTH,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RetainSecond(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RetainSecondPredicate();
  Assertions.assertTrue(seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(1,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RetainSecondAndLast(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RetainSecondAndLastPredicate(seq.size);
  Assertions.assertTrue(seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(2,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RemoveFirstAndThird(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RemoveFirstAndThirdPredicate();
  Assertions.assertTrue(seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(LENGTH-2,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RemoveFirst(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RemoveFirstPredicate();
  Assertions.assertTrue(seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(LENGTH-1,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RemoveFirstAndSecondToLast(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RemoveFirstAndSecondToLastPredicate(seq.size);
  Assertions.assertTrue(seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(LENGTH-2,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
}
#ENDDEF
#MACRODEF CheckedModdingNonEmptyNonBooleanRemoveIfTests(LENGTH)
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_ThrowAndMod(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.ModifyingArrSeqSTRUCTNAMEAndThrowingPredicate(seq);
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(LENGTH+1,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(1,filter.callCount);
  Assertions.assertEquals(LENGTH+1,seq.modCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_Throwing(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.ThrowingPredicate();
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(LENGTH,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(1,filter.callCount);
  Assertions.assertEquals(LENGTH,seq.modCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RemoveAllMod(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RemoveAllArrSeqSTRUCTNAMEModifyingPredicate(seq);
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(LENGTH,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
  Assertions.assertEquals(LENGTH*3,seq.modCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RemoveNoneMod(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RemoveNoneArrSeqSTRUCTNAMEModifyingPredicate(seq);
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(LENGTH,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
  Assertions.assertEquals(LENGTH*3,seq.modCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RetainSecondMod(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RetainSecondArrSeqSTRUCTNAMEModifyingPredicate(seq);
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(LENGTH,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
  Assertions.assertEquals(LENGTH*3,seq.modCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RetainSecondAndLastMod(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RetainSecondAndLastArrSeqSTRUCTNAMEModifyingPredicate(seq);
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(LENGTH,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
  Assertions.assertEquals(LENGTH*3,seq.modCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RemoveFirstAndThirdMod(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RemoveFirstAndThirdArrSeqSTRUCTNAMEModifyingPredicate(seq);
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(LENGTH,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
  Assertions.assertEquals(LENGTH*3,seq.modCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RemoveFirstMod(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RemoveFirstArrSeqSTRUCTNAMEModifyingPredicate(seq);
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(LENGTH,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
  Assertions.assertEquals(LENGTH*3,seq.modCount);
}
@Test
public void testSTRUCTNAMEremoveIf_OUTPUTMODIFIERPredicate_SeqSizeLENGTH_RemoveFirstAndSecondToLastMod(){
  #MACRO InitNonBooleanRemoveIf(LENGTH)
  var filter=new $ClassPrefix$MonitoredPredicate.RemoveFirstAndSecondToLastArrSeqSTRUCTNAMEModifyingPredicate(seq);
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.removeIf((OUTPUTMODIFIERPredicate)filter));
  Assertions.assertEquals(LENGTH,seq.size());
  filter.verifyArray(seq.arr,0,LENGTH);
  Assertions.assertEquals(LENGTH,filter.callCount);
  Assertions.assertEquals(LENGTH*3,seq.modCount);
}
#ENDDEF
#MACRODEF TestForEachMethods<INITIALCAPACITY>(OUTPUTMODIFIER,dummy)
@Test
public void testSTRUCTNAMEforEach_OUTPUTMODIFIERConsumer_SeqIsEmpty_NoMod(){
  #MACRO ConstructionRoutine()
  var consumer=new $ClassPrefix$MonitoredConsumer();
  seq.forEach((OUTPUTMODIFIERConsumer)consumer);
  Assertions.assertEquals(0,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
  Assertions.assertTrue(consumer.isEmpty());
}
@Test
public void testSTRUCTNAMEforEach_OUTPUTMODIFIERConsumer_SeqIsNotEmpty_NoMod(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
  var consumer=new $ClassPrefix$MonitoredConsumer();
  seq.forEach((OUTPUTMODIFIERConsumer)consumer);
  Assertions.assertEquals(100,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(100,seq.modCount);
#ENDIF
  Assertions.assertEquals(100,consumer.size());
  var seqIterator=seq.iterator();
  var consumerIterator=consumer.iterator();
  for(int i=0;i<100;++i)
  {
#IF OfRef
    Assertions.assertSame(consumerIterator.next(),seqIterator.next());
#ELSE
    Assertions.assertEquals(consumerIterator.next(),seqIterator.next());
#ENDIF
  }
}
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
@Test
public void testSTRUCTNAMEforEach_OUTPUTMODIFIERConsumer_SeqIsEmpty_ModdingConsumer(){
  #MACRO ConstructionRoutine()
  var consumer=new $ClassPrefix$MonitoredConsumer.ModifyingArrSeqSTRUCTNAMEConsumer(seq);
  seq.forEach((OUTPUTMODIFIERConsumer)consumer);
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
  Assertions.assertTrue(consumer.isEmpty());
}
@Test
public void testSTRUCTNAMEforEach_OUTPUTMODIFIERConsumer_SeqIsNotEmpty_ModdingConsumer(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
  var consumer=new $ClassPrefix$MonitoredConsumer.ModifyingArrSeqSTRUCTNAMEConsumer(seq);
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.forEach((OUTPUTMODIFIERConsumer)consumer));
  Assertions.assertEquals(100,seq.size());
  Assertions.assertEquals(300,seq.modCount);
  Assertions.assertEquals(100,consumer.size());
  var seqIterator=seq.iterator();
  var consumerIterator=consumer.iterator();
  for(int i=0;i<100;++i){
#IF OfRef
    Assertions.assertSame(consumerIterator.next(),seqIterator.next());
#ELSE
    Assertions.assertEquals(consumerIterator.next(),seqIterator.next());
#ENDIF
  }
}
@Test
public void testSTRUCTNAMEforEach_OUTPUTMODIFIERConsumer_SeqIsEmpty_ThrowingConsumer(){
  #MACRO ConstructionRoutine()
  var consumer=new $ClassPrefix$MonitoredConsumer.Throwing();
  seq.forEach((OUTPUTMODIFIERConsumer)consumer);
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
  Assertions.assertTrue(consumer.isEmpty());
}
@Test
public void testSTRUCTNAMEforEach_OUTPUTMODIFIERConsumer_SeqIsNotEmpty_ThrowingConsumer(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
  var consumer=new $ClassPrefix$MonitoredConsumer.Throwing();
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.forEach((OUTPUTMODIFIERConsumer)consumer));
  Assertions.assertEquals(100,seq.size());
  Assertions.assertEquals(100,seq.modCount);
  Assertions.assertEquals(1,consumer.size());
  var seqIterator=seq.iterator();
  var consumerIterator=consumer.iterator();
  for(int i=0;i<1;++i){
#IF OfRef
    Assertions.assertSame(consumerIterator.next(),seqIterator.next());
#ELSE
    Assertions.assertEquals(consumerIterator.next(),seqIterator.next());
#ENDIF
  }
}
@Test
public void testSTRUCTNAMEforEach_OUTPUTMODIFIERConsumer_SeqIsEmpty_ThrowingAndModdingConsumer(){
  #MACRO ConstructionRoutine()
  var consumer=new $ClassPrefix$MonitoredConsumer.ModifyingArrSeqSTRUCTNAMEAndThrowingConsumer(seq);
  seq.forEach((OUTPUTMODIFIERConsumer)consumer);
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
  Assertions.assertTrue(consumer.isEmpty());
}
@Test
public void testSTRUCTNAMEforEach_OUTPUTMODIFIERConsumer_SeqIsNotEmpty_ThrowingAndModdingConsumer(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
  var consumer=new $ClassPrefix$MonitoredConsumer.ModifyingArrSeqSTRUCTNAMEAndThrowingConsumer(seq);
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.forEach((OUTPUTMODIFIERConsumer)consumer));
  Assertions.assertEquals(100,seq.size());
  Assertions.assertEquals(102,seq.modCount);
  Assertions.assertEquals(1,consumer.size());
}
#ENDIF
#ENDDEF
#MACRODEF TestMiscMethods<INITIALCAPACITY>()
@Test
public void testSTRUCTNAMEtoArray_ObjectArray_zeroLengthArrayAndSequenceIsEmpty(){
  #MACRO ConstructionRoutine()
#IF OfRef
  Integer[] paramArr=new Integer[0];
#ELSE
  $BoxedType$[] paramArr=new $BoxedType$[0];
#ENDIF
  var result=seq.toArray(paramArr);
  Assertions.assertEquals(0,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
  Assertions.assertEquals(0,result.length);
  Assertions.assertNotSame(seq.arr,result);
  Assertions.assertSame(paramArr,result);
}
@Test
public void testSTRUCTNAMEtoArray_ObjectArray_zeroLengthArrayAndSequenceNotEmpty(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
#IF OfRef
  Integer[] paramArr=new Integer[0];
#ELSE
  $BoxedType$[] paramArr=new $BoxedType$[0];
#ENDIF
  var result=seq.toArray(paramArr);
  Assertions.assertEquals(100,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(100,seq.modCount);
#ENDIF
  Assertions.assertEquals(100,result.length);
  Assertions.assertNotSame(seq.arr,result);
  Assertions.assertNotSame(paramArr,result);
  var itr=seq.iterator();
  for(int i=0;i<100;++i){
#IF OfRef
    Assertions.assertSame(itr.next(),result[i]);
#ELSE
    Assertions.assertEquals(itr.next(),result[i]);
#ENDIF
  }
}
@Test
public void testSTRUCTNAMEtoArray_ObjectArray_nonzeroLengthArrayAndSequenceIsEmpty(){
  #MACRO ConstructionRoutine()
#IF OfRef
  Integer[] paramArr=new Integer[5];
#ELSE
  $BoxedType$[] paramArr=new $BoxedType$[5];
#ENDIF
  for(int i=0;i<paramArr.length;++i){
    paramArr[i]=TypeConversionUtil.convertTo$ArrayType$(paramArr.length);
  }
  var result=seq.toArray(paramArr);
  Assertions.assertEquals(0,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
  Assertions.assertEquals(5,result.length);
  Assertions.assertNotSame(seq.arr,result);
  Assertions.assertSame(paramArr,result);
  Assertions.assertNull(result[0]);
  for(int i=1;i<result.length;++i){
    Assertions.assertEquals((Object)TypeConversionUtil.convertTo$ArrayType$(paramArr.length),result[i]);
  }
}
@Test
public void testSTRUCTNAMEtoArray_ObjectArray_overSizedArray(){
  #MACRO ConstructionRoutine()
#IF OfRef
  Integer[] paramArr=new Integer[10];
#ELSE
  $BoxedType$[] paramArr=new $BoxedType$[10];
#ENDIF
  for(int i=0;i<paramArr.length;++i){
    paramArr[i]=TypeConversionUtil.convertTo$ArrayType$(paramArr.length);
  }
  #MACRO AddAscending(5,$ArrayType$)
  var result=seq.toArray(paramArr);
  Assertions.assertEquals(5,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(5,seq.modCount);
#ENDIF
  Assertions.assertEquals(10,result.length);
  Assertions.assertNotSame(seq.arr,result);
  Assertions.assertSame(paramArr,result);
  var itr=seq.iterator();
  for(int i=0;i<5;++i){
#IF OfRef
    Assertions.assertSame(itr.next(),result[i]);
#ELSE
    Assertions.assertEquals(itr.next(),result[i]);
#ENDIF
  }
  Assertions.assertNull(result[5]);
  for(int i=6;i<result.length;++i){
    Assertions.assertEquals((Object)TypeConversionUtil.convertTo$ArrayType$(paramArr.length),result[i]);
  }
}
@Test
public void testSTRUCTNAMEtoArray_ObjectArray_undersizedArray(){
  #MACRO ConstructionRoutine()
#IF OfRef
  Integer[] paramArr=new Integer[5];
#ELSE
  $BoxedType$[] paramArr=new $BoxedType$[5];
#ENDIF
  for(int i=0;i<paramArr.length;++i){
    paramArr[i]=TypeConversionUtil.convertTo$ArrayType$(10);
  }
  #MACRO AddAscending(10,$ArrayType$)
  var result=seq.toArray(paramArr);
  Assertions.assertEquals(10,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(10,seq.modCount);
#ENDIF
  Assertions.assertEquals(10,result.length);
  Assertions.assertNotSame(seq.arr,result);
  Assertions.assertNotSame(paramArr,result);
  var itr=seq.iterator();
  for(int i=0;i<10;++i){
#IF OfRef
    Assertions.assertSame(itr.next(),result[i]);
#ELSE
    Assertions.assertEquals(itr.next(),result[i]);
#ENDIF
  }
}
@Test
public void testSTRUCTNAMEtoArray_ObjectArray_exactSizeArray(){
  #MACRO ConstructionRoutine()
#IF OfRef
  Integer[] paramArr=new Integer[5];
#ELSE
  $BoxedType$[] paramArr=new $BoxedType$[5];
#ENDIF
  for(int i=0;i<paramArr.length;++i){
    paramArr[i]=TypeConversionUtil.convertTo$ArrayType$(5);
  }
  #MACRO AddAscending(5,$ArrayType$)
  var result=seq.toArray(paramArr);
  Assertions.assertEquals(5,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(5,seq.modCount);
#ENDIF
  Assertions.assertEquals(5,result.length);
  Assertions.assertNotSame(seq.arr,result);
  Assertions.assertSame(paramArr,result);
  var itr=seq.iterator();
  for(int i=0;i<5;++i){
#IF OfRef
    Assertions.assertSame(itr.next(),result[i]);
#ELSE
    Assertions.assertEquals(itr.next(),result[i]);
#ENDIF
  }
}
@Test
public void testSTRUCTNAMEtoArray_IntFunction_seqIsEmpty_nonMod(){
  #MACRO ConstructionRoutine()
#IF OfRef
  IntFunction<Integer[]> arrConstructor=Integer[]::new;
#ELSE
  IntFunction<$BoxedType$[]> arrConstructor=$BoxedType$[]::new;
#ENDIF
  var result=seq.toArray(arrConstructor);
  Assertions.assertEquals(0,seq.size());
  Assertions.assertNotSame(seq.arr,result);
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
  Assertions.assertEquals(0,result.length);
}
@Test
public void testSTRUCTNAMEtoArray_IntFunction_seqIsNotEmpty_nonMod(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
#IF OfRef
  IntFunction<Integer[]> arrConstructor=Integer[]::new;
#ELSE
  IntFunction<$BoxedType$[]> arrConstructor=$BoxedType$[]::new;
#ENDIF
  var result=seq.toArray(arrConstructor);
  Assertions.assertEquals(100,seq.size());
  Assertions.assertNotSame(seq.arr,result);
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(100,seq.modCount);
#ENDIF
  Assertions.assertEquals(100,result.length);
  var itr=seq.iterator();
  for(int i=0;i<100;++i){
#IF OfRef
    Assertions.assertSame(itr.next(),result[i]);
#ELSE
    Assertions.assertEquals(itr.next(),result[i]);
#ENDIF
  }
}
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
@Test
public void testSTRUCTNAMEtoArray_IntFunction_seqIsEmpty_moddingArrayConstructor(){
  #MACRO ConstructionRoutine()
  #IF OfRef
  IntFunction<Integer[]> arrConstructor=(int arrSize)->{
    seq.add(TypeConversionUtil.convertTo$ArrayType$(arrSize));
    return new Integer[arrSize];
  };
  #ELSE
  IntFunction<$BoxedType$[]> arrConstructor=(int arrSize)->{
    seq.add(TypeConversionUtil.convertTo$ArrayType$(arrSize));
    return new $BoxedType$[arrSize];
  };
  #ENDIF
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.toArray(arrConstructor));
  Assertions.assertEquals(1,seq.size());
  Assertions.assertEquals(TypeConversionUtil.convertTo$ArrayType$(0),seq.arr[0]);
  #IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(1,seq.modCount);
  #ENDIF
}
@Test
public void testSTRUCTNAMEtoArray_IntFunction_seqIsNotEmpty_moddingArrayConstructor(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
  #IF OfRef
  IntFunction<Integer[]> arrConstructor=(int arrSize)->{
    seq.add(TypeConversionUtil.convertTo$ArrayType$(arrSize));
    return new Integer[arrSize];
  };
  #ELSE
  IntFunction<$BoxedType$[]> arrConstructor=(int arrSize)->{
    seq.add(TypeConversionUtil.convertTo$ArrayType$(arrSize));
    return new $BoxedType$[arrSize];
  };
  #ENDIF
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.toArray(arrConstructor));
  Assertions.assertEquals(101,seq.size());
  Assertions.assertEquals(TypeConversionUtil.convertTo$ArrayType$(100),seq.arr[100]);
  #IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(101,seq.modCount);
  #ENDIF
}
@Test
public void testSTRUCTNAMEtoArray_IntFunction_seqIsEmpty_throwingArrayConstructor(){
  #MACRO ConstructionRoutine()
#IF OfRef
  IntFunction<Integer[]> arrConstructor=(int arrSize)->{
    throw new IndexOutOfBoundsException();
  };
#ELSE
  IntFunction<$BoxedType$[]> arrConstructor=(int arrSize)->{
    throw new IndexOutOfBoundsException();
  };
#ENDIF
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.toArray(arrConstructor));
  Assertions.assertEquals(0,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
}
@Test
public void testSTRUCTNAMEtoArray_IntFunction_seqIsNotEmpty_throwingArrayConstructor(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
#IF OfRef
  IntFunction<Integer[]> arrConstructor=(int arrSize)->{
    throw new IndexOutOfBoundsException();
  };
#ELSE
  IntFunction<$BoxedType$[]> arrConstructor=(int arrSize)->{
    throw new IndexOutOfBoundsException();
  };
#ENDIF
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.toArray(arrConstructor));
  Assertions.assertEquals(100,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(100,seq.modCount);
#ENDIF
}
@Test
public void testSTRUCTNAMEtoArray_IntFunction_seqIsEmpty_throwingAndModdingArrConstructor(){
  #MACRO ConstructionRoutine()
  #IF OfRef
  IntFunction<Integer[]> arrConstructor=(int arrSize)->{
    seq.add(TypeConversionUtil.convertTo$ArrayType$(arrSize));
    throw new IndexOutOfBoundsException();
  };
  #ELSE
  IntFunction<$BoxedType$[]> arrConstructor=(int arrSize)->{
    seq.add(TypeConversionUtil.convertTo$ArrayType$(arrSize));
    throw new IndexOutOfBoundsException();
  };
  #ENDIF
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.toArray(arrConstructor));
  Assertions.assertEquals(1,seq.size());
  Assertions.assertEquals(TypeConversionUtil.convertTo$ArrayType$(0),seq.arr[0]);
  #IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(1,seq.modCount);
  #ENDIF
}
@Test
public void testSTRUCTNAMEtoArray_IntFunction_seqIsNotEmpty_throwingAndModdingArrConstructor(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
  #IF OfRef
  IntFunction<Integer[]> arrConstructor=(int arrSize)->{
    seq.add(TypeConversionUtil.convertTo$ArrayType$(arrSize));
    throw new IndexOutOfBoundsException();
  };
  #ELSE
  IntFunction<$BoxedType$[]> arrConstructor=(int arrSize)->{
    seq.add(TypeConversionUtil.convertTo$ArrayType$(arrSize));
    throw new IndexOutOfBoundsException();
  };
  #ENDIF
  Assertions.assertThrows(ConcurrentModificationException.class,()->seq.toArray(arrConstructor));
  Assertions.assertEquals(101,seq.size());
  Assertions.assertEquals(TypeConversionUtil.convertTo$ArrayType$(100),seq.arr[100]);
  #IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(101,seq.modCount);
  #ENDIF
}
#ENDIF
@Test
public void testSTRUCTNAMEclear_void_seqIsEmpty(){
  #MACRO ConstructionRoutine()
  seq.clear();
  Assertions.assertTrue(seq.isEmpty());
#IFSWITCH STRUCTNAME==CheckedStack,CheckedList
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
}
@Test
public void testSTRUCTNAMEclear_void_seqIsNotEmpty(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
  seq.clear();
  Assertions.assertTrue(seq.isEmpty());
  for(int i=0;i<100;++i){
#IF OfRef
    Assertions.assertNull(seq.arr[i]);
#ELSE
    Assertions.assertEquals(TypeConversionUtil.convertTo$ArrayType$(i),seq.arr[i]);
#ENDIF
  }
#IFSWITCH STRUCTNAME==CheckedStack,CheckedList
  Assertions.assertEquals(101,seq.modCount);
#ENDIF
}
@Test
public void testSTRUCTNAMEisEmpty_void_seqIsEmpty(){
  #MACRO ConstructionRoutine()
  Assertions.assertTrue(seq.isEmpty());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
}
@Test
public void testSTRUCTNAMEisEmpty_void_seqIsNotEmpty(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
  Assertions.assertFalse(seq.isEmpty());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(100,seq.modCount);
#ENDIF
}
@Test
public void testSTRUCTNAMEisEmpty_void_seqIsBeingCleared(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
  var itr=seq.iterator();
  for(int i=100;--i>=0;){
    Assertions.assertFalse(seq.isEmpty());
    itr.next$TypeNameModifier$();
    itr.remove();
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
    Assertions.assertEquals(100+(100-i),seq.modCount);
#ENDIF
  }
  Assertions.assertTrue(seq.isEmpty());
}
@Test
public void testSTRUCTNAMEsize_void_seqIsEmpty(){
  #MACRO ConstructionRoutine()
  Assertions.assertEquals(0,seq.size);
  Assertions.assertEquals(seq.size,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
}
@Test
public void testSTRUCTNAMEsize_void_seqIsNotEmpty(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
  Assertions.assertEquals(100,seq.size);
  Assertions.assertEquals(seq.size,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(100,seq.modCount);
#ENDIF
}
@Test
public void testSTRUCTNAMEsize_void_seqIsBeingCleared(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
  var itr=seq.iterator();
  for(int i=100;--i>=0;){
    itr.next$TypeNameModifier$();
    itr.remove();
    Assertions.assertEquals(i,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
    Assertions.assertEquals(100+(100-i),seq.modCount);
#ENDIF
  }
}
#ENDDEF

#MACRODEF TestClone<INITIALCAPACITY>()
@Test
public void testSTRUCTNAMEClone_initialCapacityINITIALCAPACITY_seqIsEmpty()
{
  #MACRO ConstructionRoutine()
  var clone=($ClassPrefix$ArrSeq.STRUCTNAME)seq.clone();
  Assertions.assertEquals(0,clone.size());
  Assertions.assertEquals(0,seq.size());
  Assertions.assertSame(clone.arr,OmniArray.Of$ClassPrefix$.DEFAULT_ARR);
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(0,clone.modCount);
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
}

@Test
public void testSTRUCTNAMEClone_initialCapacityINITIALCAPACITY_seqIsNotEmpty()
{
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
  var clone=($ClassPrefix$ArrSeq.STRUCTNAME)seq.clone();
  Assertions.assertEquals(100,clone.size());
  Assertions.assertEquals(100,seq.size());
  Assertions.assertNotSame(seq.arr,clone.arr);
  for(int i=0;i<100;++i)
  {
    Assertions.assertEquals(TypeConversionUtil.convertTo$ArrayType$(i),clone.arr[i]);
#IF OfRef
    Assertions.assertSame(seq.arr[i],clone.arr[i]);
#ENDIF
  }
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(0,clone.modCount);
  Assertions.assertEquals(100,seq.modCount);
#ENDIF
}
#ENDDEF

#MACRODEF TestConstructor<INITIALCAPACITY>()
@Test
#IFSWITCH INITIALCAPACITY==DEFAULT
public void testSTRUCTNAMEconstructor_void_initialCapacityINITIALCAPACITY(){
#ELSEIFSWITCH INITIALCAPACITY==NULL
public void testSTRUCTNAMEconstructor_int$ArrayType$_initialCapacityINITIALCAPACITY(){
#ELSE
public void testSTRUCTNAMEconstructor_int_initialCapacityINITIALCAPACITY(){
#ENDIF
  #MACRO ConstructionRoutine()
  Assertions.assertEquals(0,seq.size);
#IFSWITCH INITIALCAPACITY==DEFAULT
  Assertions.assertSame(OmniArray.Of$ClassPrefix$.DEFAULT_ARR,seq.arr);
#ELSEIFSWITCH INITIALCAPACITY==NULL
  Assertions.assertNull(seq.arr);
#ELSE
  switch(INITIALCAPACITY){
  case 0:
    Assertions.assertNull(seq.arr);
    break;
  case OmniArray.DEFAULT_ARR_SEQ_CAP:
    Assertions.assertSame(OmniArray.Of$ClassPrefix$.DEFAULT_ARR,seq.arr);
    break;
  default:
    Assertions.assertNotNull(seq.arr);
    Assertions.assertEquals(INITIALCAPACITY,seq.arr.length);
  #IF OfRef
    for(int i=0;i<INITIALCAPACITY;++i){
      Assertions.assertNull(seq.arr[i]);
    }
  #ENDIF
  }
#ENDIF
#IFSWITCH STRUCTNAME==CheckedStack,CheckedList
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
}
#ENDDEF
#MACRODEF TestOutputMethods<INITIALCAPACITY>(OUTPUTTYPE,OUTPUTMODIFIER,DEFAULTVAL,DEFAULTARR)
@Test
public void testSTRUCTNAMEtoOUTPUTMODIFIERArray_void_seqIsEmpty(){
  #MACRO ConstructionRoutine()
  Assertions.assertSame(DEFAULTARR,seq.toOUTPUTMODIFIERArray());
  Assertions.assertEquals(0,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(0,seq.modCount);
#ENDIF
}
@Test
public void testSTRUCTNAMEtoOUTPUTMODIFIERArray_void_seqIsNotEmpty(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,$ArrayType$)
  var result=seq.toOUTPUTMODIFIERArray();
  Assertions.assertEquals(100,seq.size());
#IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(100,seq.modCount);
#ENDIF
  Assertions.assertEquals(100,result.length);
  var itr=seq.iterator();
  for(int i=0;i<100;++i){
#IF OfRef
    Assertions.assertSame(itr.nextOUTPUTMODIFIER(),result[i]);
#ELSE
    Assertions.assertEquals(itr.nextOUTPUTMODIFIER(),result[i]);
#ENDIF
  }
  Assertions.assertNotSame(seq.arr,result);
}
#ENDDEF
#MACRODEF TestInputMethods<INITIALCAPACITY>(INPUTTYPE,OUTPUTTYPE)
@Test
public void testSTRUCTNAMEadd_INPUTTYPE_initialCapacityINITIALCAPACITY(){
  #MACRO ConstructionRoutine()
  #MACRO AddAscending(100,INPUTTYPE)
  Assertions.assertEquals(100,seq.size);
  Assertions.assertNotNull(seq.arr);
  #IFSWITCH STRUCTNAME==CheckedList,CheckedStack
  Assertions.assertEquals(100,seq.modCount);
  #ENDIF
  for(int i=0;i<seq.size;++i){
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(i),seq.arr[i]);
  }
}
#ENDDEF
#MACRODEF ConstructionRoutine()
#IFSWITCH INITIALCAPACITY==DEFAULT
var seq=new $ClassPrefix$ArrSeq.STRUCTNAME();
#ELSEIFSWITCH INITIALCAPACITY==NULL
var seq=new $ClassPrefix$ArrSeq.STRUCTNAME(0,null);
#ELSE
var seq=new $ClassPrefix$ArrSeq.STRUCTNAME(INITIALCAPACITY);
#ENDIF
#ENDDEF
#MACRODEF AddAscending(NUM_TO_ADD,INPUTTYPE)
for(int i=0;i<NUM_TO_ADD;++i){
  Assertions.assertTrue(seq.add(TypeConversionUtil.convertToINPUTTYPE(i)));
}
#ENDDEF