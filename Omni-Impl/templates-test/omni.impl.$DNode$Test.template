#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import omni.util.TypeConversionUtil;
public class $DNode$Test$<E>$
{
  @Test
  public void testConstructors()
  {
#IF OfRef
    var val1=TypeConversionUtil.convertToInteger(100);
    var val2=TypeConversionUtil.convertToInteger(101);
    var val3=TypeConversionUtil.convertToInteger(102);
    var val4=TypeConversionUtil.convertToInteger(103);
    var val5=TypeConversionUtil.convertToInteger(104);
    var node1=new $DNode$<Integer>(val1);
    var node2=new $DNode$<Integer>(val2,node1);
    var node3=new $DNode$<Integer>(node1,val3);
    var node4=new $DNode$<Integer>(val4);
    var node5=new $DNode$<Integer>(node3,val5,node4);
#ELSE
    $exposedType$ val1=TypeConversionUtil.convertTo$exposedType$(100);
    $exposedType$ val2=TypeConversionUtil.convertTo$exposedType$(101);
    $exposedType$ val3=TypeConversionUtil.convertTo$exposedType$(102);
    $exposedType$ val4=TypeConversionUtil.convertTo$exposedType$(103);
    $exposedType$ val5=TypeConversionUtil.convertTo$exposedType$(104);
    var node1=new $DNode$(val1);
    var node2=new $DNode$(val2,node1);
    var node3=new $DNode$(node1,val3);
    var node4=new $DNode$(val4);
    var node5=new $DNode$(node3,val5,node4);
#ENDIF
    Assertions.assertTrue(node1.val==val1);
    Assertions.assertTrue(node2.val==val2);
    Assertions.assertTrue(node3.val==val3);
    Assertions.assertTrue(node4.val==val4);
    Assertions.assertTrue(node5.val==val5);
    Assertions.assertTrue(node1.next==null);
    Assertions.assertTrue(node1.prev==null);
    Assertions.assertTrue(node2.next==node1);
    Assertions.assertTrue(node2.prev==null);
    Assertions.assertTrue(node3.next==null);
    Assertions.assertTrue(node3.prev==node1);
    Assertions.assertTrue(node4.next==null);
    Assertions.assertTrue(node4.prev==null);
    Assertions.assertTrue(node5.next==node4);
    Assertions.assertTrue(node5.prev==node3);
  }
/*
  @Test
  public void testCompareTo()
  {
#IF OfRef
    var lessVal=TypeConversionUtil.convertToInteger(100);
    var lessEqualsVal=TypeConversionUtil.convertToInteger(100);
    var greaterVal=TypeConversionUtil.convertToInteger(101);
    var greaterEqualsVal=TypeConversionUtil.convertToInteger(101);
    var lessNode=new $DNode$<Integer>(lessVal);
    var lessEqualsNode=new $DNode$<Integer>(lessEqualsVal);
    var greaterNode=new $DNode$<Integer>(greaterVal);
    var greaterEqualsNode=new $DNode$<Integer>(greaterEqualsVal);
#ELSE
  #IF OfBoolean
    var lessVal=false;
    var lessEqualsVal=false;
    var greaterVal=true;
    var greaterEqualsVal=true;
  #ELSE
    $exposedType$ lessVal=0;
    $exposedType$ lessEqualsVal=0;
    $exposedType$ greaterVal=1;
    $exposedType$ greaterEqualsVal=1;
  #ENDIF
    var lessNode=new $DNode$(lessVal);
    var lessEqualsNode=new $DNode$(lessEqualsVal);
    var greaterNode=new $DNode$(greaterVal);
    var greaterEqualsNode=new $DNode$(greaterEqualsVal);
#ENDIF
    Assertions.assertEquals(0,lessNode.compareTo(lessNode));
    Assertions.assertEquals(0,greaterNode.compareTo(greaterNode));
    Assertions.assertEquals(0,lessNode.compareTo(lessEqualsNode));
    Assertions.assertEquals(0,greaterNode.compareTo(greaterEqualsNode));
    Assertions.assertEquals(-1,lessNode.compareTo(greaterNode));
    Assertions.assertEquals(1,greaterNode.compareTo(lessNode));
  }
  */
}