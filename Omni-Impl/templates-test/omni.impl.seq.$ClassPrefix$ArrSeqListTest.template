#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.impl.seq;
import omni.util.TypeConversionUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
#IF OfRef
@SuppressWarnings({"rawtypes","unchecked"})
#ENDIF
public class $ClassPrefix$ArrSeqListTest
{

  #MACRO StructImpl<UncheckedList>()
  #MACRO StructImpl<CheckedList>()

}


#MACRODEF StructImpl<STRUCTNAME>()
#MACRO TestInputMethods<DEFAULT>($ArrayType$,$ArrayType$)
#MACRO TestInputMethods<NULL>($ArrayType$,$ArrayType$)
#MACRO TestInputMethods<50>($ArrayType$,$ArrayType$)
#IFNOT OfRef
#MACRO TestInputMethods<DEFAULT>($BoxedType$,$ArrayType$)
#MACRO TestInputMethods<NULL>($BoxedType$,$ArrayType$)
#MACRO TestInputMethods<50>($BoxedType$,$ArrayType$)
  #IFNOT OfBoolean
#MACRO TestInputMethods<DEFAULT>(boolean,$ArrayType$boolean)
#MACRO TestInputMethods<NULL>(boolean,$ArrayType$boolean)
#MACRO TestInputMethods<50>(boolean,$ArrayType$boolean)
#MACRO TestInputMethods<DEFAULT>(Boolean,$ArrayType$boolean)
#MACRO TestInputMethods<NULL>(Boolean,$ArrayType$boolean)
#MACRO TestInputMethods<50>(Boolean,$ArrayType$boolean)
    #IFNOT OfByte,OfChar
#MACRO TestInputMethods<DEFAULT>(byte,$ArrayType$)
#MACRO TestInputMethods<NULL>(byte,$ArrayType$)
#MACRO TestInputMethods<50>(byte,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(Byte,$ArrayType$)
#MACRO TestInputMethods<NULL>(Byte,$ArrayType$)
#MACRO TestInputMethods<50>(Byte,$ArrayType$)
      #IFNOT OfShort
#MACRO TestInputMethods<DEFAULT>(char,$ArrayType$)
#MACRO TestInputMethods<NULL>(char,$ArrayType$)
#MACRO TestInputMethods<50>(char,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(Character,$ArrayType$)
#MACRO TestInputMethods<NULL>(Character,$ArrayType$)
#MACRO TestInputMethods<50>(Character,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(short,$ArrayType$)
#MACRO TestInputMethods<NULL>(short,$ArrayType$)
#MACRO TestInputMethods<50>(short,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(Short,$ArrayType$)
#MACRO TestInputMethods<NULL>(Short,$ArrayType$)
#MACRO TestInputMethods<50>(Short,$ArrayType$)
        #IFNOT OfInt
#MACRO TestInputMethods<DEFAULT>(int,$ArrayType$)
#MACRO TestInputMethods<NULL>(int,$ArrayType$)
#MACRO TestInputMethods<50>(int,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(Integer,$ArrayType$)
#MACRO TestInputMethods<NULL>(Integer,$ArrayType$)
#MACRO TestInputMethods<50>(Integer,$ArrayType$)
          #IFNOT OfLong
#MACRO TestInputMethods<DEFAULT>(long,$ArrayType$)
#MACRO TestInputMethods<NULL>(long,$ArrayType$)
#MACRO TestInputMethods<50>(long,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(Long,$ArrayType$)
#MACRO TestInputMethods<NULL>(Long,$ArrayType$)
#MACRO TestInputMethods<50>(Long,$ArrayType$)
            #IFNOT OfFloat
#MACRO TestInputMethods<DEFAULT>(float,$ArrayType$)
#MACRO TestInputMethods<NULL>(float,$ArrayType$)
#MACRO TestInputMethods<50>(float,$ArrayType$)
#MACRO TestInputMethods<DEFAULT>(Float,$ArrayType$)
#MACRO TestInputMethods<NULL>(Float,$ArrayType$)
#MACRO TestInputMethods<50>(Float,$ArrayType$)
            #ENDIF
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF

#MACRO TestOutputMethods<DEFAULT>($ArrayType$,$TypeNameModifier$,$defaultVal$,OmniArray.Of$ClassPrefix$.DEFAULT_ARR,$removeAtIndexMethod$)
#IFNOT OfRef
#MACRO TestOutputMethods<DEFAULT>($BoxedType$,,null,OmniArray.Of$ClassPrefix$.DEFAULT_BOXED_ARR,remove)
  #IF OfBoolean
#MACRO TestOutputMethods<DEFAULT>(double$ArrayType$,Double,Double.NaN,OmniArray.OfDouble.DEFAULT_ARR,removeDoubleAt)
#MACRO TestOutputMethods<DEFAULT>(float$ArrayType$,Float,Float.NaN,OmniArray.OfFloat.DEFAULT_ARR,removeFloatAt)
#MACRO TestOutputMethods<DEFAULT>(long$ArrayType$,Long,Long.MIN_VALUE,OmniArray.OfLong.DEFAULT_ARR,removeLongAt)
#MACRO TestOutputMethods<DEFAULT>(int$ArrayType$,Int,Integer.MIN_VALUE,OmniArray.OfInt.DEFAULT_ARR,removeIntAt)
#MACRO TestOutputMethods<DEFAULT>(short$ArrayType$,Short,Short.MIN_VALUE,OmniArray.OfShort.DEFAULT_ARR,removeShortAt)
#MACRO TestOutputMethods<DEFAULT>(char$ArrayType$,Char,Character.MIN_VALUE,OmniArray.OfChar.DEFAULT_ARR,removeCharAt)
#MACRO TestOutputMethods<DEFAULT>(byte$ArrayType$,Byte,Byte.MIN_VALUE,OmniArray.OfByte.DEFAULT_ARR,removeByteAt)
  #ELSEIFNOT OfDouble
#MACRO TestOutputMethods<DEFAULT>(double,Double,Double.NaN,OmniArray.OfDouble.DEFAULT_ARR,removeDoubleAt)
    #IFNOT OfFloat
#MACRO TestOutputMethods<DEFAULT>(float,Float,Float.NaN,OmniArray.OfFloat.DEFAULT_ARR,removeFloatAt)
      #IFNOT OfLong
#MACRO TestOutputMethods<DEFAULT>(long,Long,Long.MIN_VALUE,OmniArray.OfLong.DEFAULT_ARR,removeLongAt)
        #IFNOT OfInt
#MACRO TestOutputMethods<DEFAULT>(int,Int,Integer.MIN_VALUE,OmniArray.OfInt.DEFAULT_ARR,removeIntAt)
          #IFNOT OfShort,OfChar
#MACRO TestOutputMethods<DEFAULT>(short,Short,Short.MIN_VALUE,OmniArray.OfShort.DEFAULT_ARR,removeShortAt)
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF  

#MACRO SetMethodTests<DEFAULT>($ArrayType$,$ArrayType$)
#IFNOT OfRef
#MACRO SetMethodTests<DEFAULT>($BoxedType$,$BoxedType$)
#ENDIF

#ENDDEF

#MACRODEF ConstructionRoutine()
#IFSWITCH INITIALCAPACITY==DEFAULT
var seq=new $ClassPrefix$ArrSeq.STRUCTNAME();
#ELSEIFSWITCH INITIALCAPACITY==NULL
var seq=new $ClassPrefix$ArrSeq.STRUCTNAME(0,null);
#ELSE
var seq=new $ClassPrefix$ArrSeq.STRUCTNAME(INITIALCAPACITY);
#ENDIF
#ENDDEF



#MACRODEF SetMethodTests<INITIALCAPACITY>(INPUTTYPE,OUTPUTTYPE)
@Test
public void testSTRUCTNAMEset_intINPUTTYPE_seqIsNotEmpty_NonThrowingIndex()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,INPUTTYPE)
  for(int i=0;i<100;++i)
  {
    var inputVal=TypeConversionUtil.convertToINPUTTYPE(100-i-1);
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(i),seq.set(i,inputVal));
#IF OfRef
    Assertions.assertSame(inputVal,seq.arr[i]);
#ELSE
    Assertions.assertEquals(inputVal,(INPUTTYPE)seq.arr[i]);
#ENDIF
    Assertions.assertEquals(100,seq.size());
#IFSWITCH STRUCTNAME==CheckedList
    Assertions.assertEquals(100,seq.modCount);
#ENDIF
  }
}
#IFSWITCH STRUCTNAME==CheckedList
@Test
public void testSTRUCTNAMEset_intINPUTTYPE_seqIsEmpty_negativeIndex()
{
  #MACRO ConstructionRoutine()
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.set(-1,TypeConversionUtil.convertToINPUTTYPE(5)));
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
}
@Test
public void testSTRUCTNAMEset_intINPUTTYPE_seqIsEmpty_hiIndex()
{
  #MACRO ConstructionRoutine()
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.set(0,TypeConversionUtil.convertToINPUTTYPE(5)));
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
}
@Test
public void testSTRUCTNAMEset_intINPUTTYPE_seqIsNotEmpty_negativeIndex()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,INPUTTYPE)
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.set(-1,TypeConversionUtil.convertToINPUTTYPE(5)));
  Assertions.assertEquals(100,seq.size());
  Assertions.assertEquals(100,seq.modCount);
}
@Test
public void testSTRUCTNAMEset_intINPUTTYPE_seqIsNotEmpty_hiIndex()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,INPUTTYPE)
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.set(seq.size(),TypeConversionUtil.convertToINPUTTYPE(5)));
  Assertions.assertEquals(100,seq.size());
  Assertions.assertEquals(100,seq.modCount);
}
#ENDIF
#ENDDEF

#MACRODEF TestOutputMethods<INITIALCAPACITY>(OUTPUTTYPE,OUTPUTMODIFIER,DEFAULTVAL,DEFAULTARR,REMOVEMETHOD)
#IFSWITCH STRUCTNAME==CheckedList
@Test
public void testSTRUCTNAMEREMOVEMETHOD_seqIsEmpty_hiIndex()
{
  #MACRO ConstructionRoutine()
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.REMOVEMETHOD(0));
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
}
@Test
public void testSTRUCTNAMEREMOVEMETHOD_seqIsEmpty_NegativeIndex()
{
  #MACRO ConstructionRoutine()
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.REMOVEMETHOD(-1));
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
}
@Test
public void testSTRUCTNAMEgetOUTPUTMODIFIER_seqIsEmpty_hiIndex()
{
  #MACRO ConstructionRoutine()
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.getOUTPUTMODIFIER(0));
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
}
@Test
public void testSTRUCTNAMEgetOUTPUTMODIFIER_seqIsEmpty_NegativeIndex()
{
  #MACRO ConstructionRoutine()
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.getOUTPUTMODIFIER(-1));
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
}
@Test
public void testSTRUCTNAMEREMOVEMETHOD_seqIsNotEmpty_hiIndex()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,$ArrayType$)
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.REMOVEMETHOD(seq.size()));
  Assertions.assertEquals(100,seq.size());
  Assertions.assertEquals(100,seq.modCount);
}
@Test
public void testSTRUCTNAMEREMOVEMETHOD_seqIsNotEmpty_NegativeIndex()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,$ArrayType$)
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.REMOVEMETHOD(-1));
  Assertions.assertEquals(100,seq.size());
  Assertions.assertEquals(100,seq.modCount);
}
@Test
public void testSTRUCTNAMEgetOUTPUTMODIFIER_seqIsNotEmpty_hiIndex()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,$ArrayType$)
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.getOUTPUTMODIFIER(seq.size()));
  Assertions.assertEquals(100,seq.size());
  Assertions.assertEquals(100,seq.modCount);
}
@Test
public void testSTRUCTNAMEgetOUTPUTMODIFIER_seqIsNotEmpty_NegativeIndex()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,$ArrayType$)
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.getOUTPUTMODIFIER(-1));
  Assertions.assertEquals(100,seq.size());
  Assertions.assertEquals(100,seq.modCount);
}
#ENDIF
@Test
public void testSTRUCTNAMEREMOVEMETHOD_seqIsNotEmpty_removeAtEnd()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,$ArrayType$)
  for(int i=0;i<100;++i)
  {
    int removeIndex=seq.size()-1;
#IF OfRef
    Assertions.assertSame(seq.arr[removeIndex],seq.REMOVEMETHOD(removeIndex));
    Assertions.assertNull(seq.arr[seq.size()]);
#ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(seq.size()-1),seq.REMOVEMETHOD(removeIndex));
#ENDIF
    Assertions.assertEquals(100-i-1,seq.size());
#IFSWITCH STRUCTNAME==CheckedList
    Assertions.assertEquals(100+i+1,seq.modCount);
#ENDIF
  }
}
@Test
public void testSTRUCTNAMEREMOVEMETHOD_seqIsNotEmpty_removeAtBegin()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,$ArrayType$)
  for(int i=0;i<100;++i)
  {
    int removeIndex=0;
#IF OfRef
    Assertions.assertSame(seq.arr[removeIndex],seq.REMOVEMETHOD(removeIndex));
    Assertions.assertNull(seq.arr[seq.size()]);
#ELSE
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(i),seq.REMOVEMETHOD(removeIndex));
#ENDIF
    Assertions.assertEquals(100-i-1,seq.size());
#IFSWITCH STRUCTNAME==CheckedList
    Assertions.assertEquals(100+i+1,seq.modCount);
#ENDIF
  }
}
@Test
public void testSTRUCTNAMEREMOVEMETHOD_seqIsNotEmpty_removeAtMidPoint()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,$ArrayType$)
  for(int i=0;i<100;++i)
  {
    int removeIndex=seq.size()/2;
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(((i&1)==0?i:0)+removeIndex),seq.REMOVEMETHOD(removeIndex));
#IF OfRef
    Assertions.assertNull(seq.arr[seq.size()]);
#ENDIF
  }
}
@Test
public void testSTRUCTNAMEgetOUTPUTMODIFIER_seqIsNotEmpty_NonThrowingIndex()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,$ArrayType$)
  for(int i=0;i<100;++i)
  {
#IF OfRef
    Assertions.assertSame(seq.arr[i],seq.getOUTPUTMODIFIER(i));
#ELSE
    var expectedVal=TypeConversionUtil.convertToOUTPUTTYPE(i);
    Assertions.assertEquals(expectedVal,seq.getOUTPUTMODIFIER(i));
#ENDIF
    Assertions.assertEquals(100,seq.size());
#IFSWITCH STRUCTNAME==CheckedList
    Assertions.assertEquals(100,seq.modCount);
#ENDIF
  }
}
#ENDDEF
#MACRODEF TestInputMethods<INITIALCAPACITY>(INPUTTYPE,OUTPUTTYPE)
@Test
public void testSTRUCTNAMEput_intINPUTTYPE_initialCapacityINITIALCAPACITY_NonThrowingIndex()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,INPUTTYPE)
  for(int i=0;i<100;++i)
  {
    var putVal=TypeConversionUtil.convertToINPUTTYPE(100-i-1);
    seq.put(i,putVal);
    
#IF OfRef
    Assertions.assertSame(putVal,seq.arr[i]);
#ELSE
    var expectedVal=TypeConversionUtil.convertToOUTPUTTYPE(100-i-1);
    Assertions.assertEquals(expectedVal,seq.arr[i]);
#ENDIF
    Assertions.assertEquals(100,seq.size());
#IFSWITCH STRUCTNAME==CheckedList
    Assertions.assertEquals(100,seq.modCount);
#ENDIF
  }
}
@Test
public void testSTRUCTNAMEadd_intINPUTTYPE_initialCapacityINITIALCAPACITY_InsertBegin()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertBeginAscending(100,INPUTTYPE)
  int seqSize=seq.size();
  Assertions.assertEquals(100,seqSize);
  Assertions.assertNotNull(seq.arr);
  #IFSWITCH STRUCTNAME==CheckedList
  Assertions.assertEquals(100,seq.modCount);
  #ENDIF
  for(int i=0;i<seqSize;++i)
  {
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(i),seq.arr[seq.size-i-1]);
  }
}
@Test
public void testSTRUCTNAMEadd_intINPUTTYPE_initialCapacityINITIALCAPACITY_InsertEnd()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,INPUTTYPE)
  int seqSize=seq.size();
  Assertions.assertEquals(100,seqSize);
  Assertions.assertNotNull(seq.arr);
  #IFSWITCH STRUCTNAME==CheckedList
  Assertions.assertEquals(100,seq.modCount);
  #ENDIF
  for(int i=0;i<seqSize;++i)
  {
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(i),seq.arr[i]);
  }
}
@Test
public void testSTRUCTNAMEadd_intINPUTTYPE_initialCapacityINITIALCAPACITY_InsertMidPoint()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertMidPointAscending(100,INPUTTYPE)
  int seqSize=seq.size();
  Assertions.assertEquals(100,seqSize);
  Assertions.assertNotNull(seq.arr);
  #IFSWITCH STRUCTNAME==CheckedList
  Assertions.assertEquals(100,seq.modCount);
  #ENDIF
  for(int i=0,val=1;i<50;++i,val+=2)
  {
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(val),seq.arr[i]);
  }
  for(int i=50,val=98;i<100;++i,val-=2)
  {
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(val),seq.arr[i]);
  }
}
#IFSWITCH STRUCTNAME==CheckedList
@Test
public void testSTRUCTNAMEput_intINPUTTYPE_initialCapacityINITIALCAPACITY_seqIsEmpty_hiIndex()
{
  #MACRO ConstructionRoutine()
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.put(0,TypeConversionUtil.convertToINPUTTYPE(5)));
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
}
@Test
public void testSTRUCTNAMEput_intINPUTTYPE_initialCapacityINITIALCAPACITY_seqIsEmpty_negativeIndex()
{
  #MACRO ConstructionRoutine()
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.put(-1,TypeConversionUtil.convertToINPUTTYPE(5)));
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
}
@Test
public void testSTRUCTNAMEput_intINPUTTYPE_initialCapacityINITIALCAPACITY_seqIsNotEmpty_hiIndex()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,INPUTTYPE)
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.put(seq.size(),TypeConversionUtil.convertToINPUTTYPE(5)));
  Assertions.assertEquals(100,seq.size());
  Assertions.assertEquals(100,seq.modCount);
  for(int i=0;i<100;++i)
  {
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(i),seq.arr[i]);
  }
}
@Test
public void testSTRUCTNAMEput_intINPUTTYPE_initialCapacityINITIALCAPACITY_seqIsNotEmpty_negativeIndex()
{
  #MACRO ConstructionRoutine()
  #MACRO InsertEndAscending(100,INPUTTYPE)
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.put(-1,TypeConversionUtil.convertToINPUTTYPE(5)));
  Assertions.assertEquals(100,seq.size());
  Assertions.assertEquals(100,seq.modCount);
  for(int i=0;i<100;++i)
  {
    Assertions.assertEquals(TypeConversionUtil.convertToOUTPUTTYPE(i),seq.arr[i]);
  }
}
@Test
public void testSTRUCTNAMEadd_intINPUTTYPE_initialCapacityINITIALCAPACITY_seqIsEmpty_negativeIndex()
{
  #MACRO ConstructionRoutine();
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.add(-1,TypeConversionUtil.convertToINPUTTYPE(5)));
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
}
@Test
public void testSTRUCTNAMEadd_intINPUTTYPE_initialCapacityINITIALCAPACITY_seqIsEmpty_hiIndex()
{
  #MACRO ConstructionRoutine();
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.add(seq.size+1,TypeConversionUtil.convertToINPUTTYPE(5)));
  Assertions.assertEquals(0,seq.size());
  Assertions.assertEquals(0,seq.modCount);
}
@Test
public void testSTRUCTNAMEadd_intINPUTTYPE_initialCapacityINITIALCAPACITY_seqIsNotEmpty_negativeIndex()
{
  #MACRO ConstructionRoutine();
  #MACRO InsertEndAscending(100,INPUTTYPE)
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.add(-1,TypeConversionUtil.convertToINPUTTYPE(5)));
  Assertions.assertEquals(100,seq.size());
  Assertions.assertEquals(100,seq.modCount);
}
@Test
public void testSTRUCTNAMEadd_intINPUTTYPE_initialCapacityINITIALCAPACITY_seqIsNotEmpty_hiIndex()
{
  #MACRO ConstructionRoutine();
  #MACRO InsertEndAscending(100,INPUTTYPE)
  Assertions.assertThrows(IndexOutOfBoundsException.class,()->seq.add(seq.size+1,TypeConversionUtil.convertToINPUTTYPE(5)));
  Assertions.assertEquals(100,seq.size());
  Assertions.assertEquals(100,seq.modCount);
}
#ENDIF
#ENDDEF

#MACRODEF InsertBeginAscending(NUM_TO_INSERT,INPUTTYPE)
for(int i=0;i<NUM_TO_INSERT;++i)
{
  seq.add(0,TypeConversionUtil.convertToINPUTTYPE(i));
}
#ENDDEF
#MACRODEF InsertEndAscending(NUM_TO_INSERT,INPUTTYPE)
for(int i=0;i<NUM_TO_INSERT;++i)
{
  seq.add(seq.size,TypeConversionUtil.convertToINPUTTYPE(i));
}
#ENDDEF
#MACRODEF InsertMidPointAscending(NUM_TO_INSERT,INPUTTYPE)
for(int i=0;i<NUM_TO_INSERT;++i)
{
  seq.add(seq.size/2,TypeConversionUtil.convertToINPUTTYPE(i));
}
#ENDDEF

