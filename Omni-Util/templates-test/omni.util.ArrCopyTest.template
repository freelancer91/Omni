#TYPEDEF OfGeneric
package omni.util;

import org.junit.Test;
import org.junit.Assert;
import java.util.Random;
import java.util.Objects;

public class ArrCopyTest
{
  #MACRO TestCopy<boolean,Boolean>(boolean)
  #MACRO TestCopy<byte,Byte>(byte)
  #MACRO TestCopy<char,Character>(char)
  #MACRO TestCopy<short,Short>(short)
  #MACRO TestCopy<int,Integer>(int)
  #MACRO TestCopy<long,Long>(long)
  #MACRO TestCopy<float,Float>(float)
  #MACRO TestCopy<double,Double>(double)
  
  #MACRO TestCopy<boolean,Object>(boolean)
  #MACRO TestCopy<byte,Object>(byte)
  #MACRO TestCopy<char,Object>(char)
  #MACRO TestCopy<short,Object>(short)
  #MACRO TestCopy<int,Object>(int)
  #MACRO TestCopy<long,Object>(long)
  #MACRO TestCopy<float,Object>(float)
  #MACRO TestCopy<double,Object>(double)
  
  
  #MACRO TestCopy<Boolean,boolean>(boolean)
  #MACRO TestCopy<Byte,byte>(byte)
  #MACRO TestCopy<Character,char>(char)
  #MACRO TestCopy<Short,short>(short)
  #MACRO TestCopy<Integer,int>(int)
  #MACRO TestCopy<Long,long>(long)
  #MACRO TestCopy<Float,float>(float)
  #MACRO TestCopy<Double,double>(double)

  #MACRO TestCopy<boolean,boolean>(boolean)
  #MACRO TestCopy<boolean,byte>(boolean)
  #MACRO TestCopy<boolean,char>(boolean)
  #MACRO TestCopy<boolean,short>(boolean)
  #MACRO TestCopy<boolean,int>(boolean)
  #MACRO TestCopy<boolean,long>(boolean)
  #MACRO TestCopy<boolean,float>(boolean)
  #MACRO TestCopy<boolean,double>(boolean)
  #MACRO TestCopy<byte,byte>(byte)
  #MACRO TestCopy<byte,short>(byte)
  #MACRO TestCopy<byte,int>(byte)
  #MACRO TestCopy<byte,long>(byte)
  #MACRO TestCopy<byte,float>(byte)
  #MACRO TestCopy<byte,double>(byte)
  #MACRO TestCopy<char,char>(char)
  #MACRO TestCopy<char,int>(char)
  #MACRO TestCopy<char,long>(char)
  #MACRO TestCopy<char,float>(char)
  #MACRO TestCopy<char,double>(char)
  #MACRO TestCopy<short,short>(short)
  #MACRO TestCopy<short,int>(short)
  #MACRO TestCopy<short,long>(short)
  #MACRO TestCopy<short,float>(short)
  #MACRO TestCopy<short,double>(short)
  #MACRO TestCopy<int,int>(int)
  #MACRO TestCopy<int,long>(int)
  #MACRO TestCopy<int,float>(int)
  #MACRO TestCopy<int,double>(int)
  #MACRO TestCopy<long,long>(long)
  #MACRO TestCopy<long,float>(long)
  #MACRO TestCopy<long,double>(long)
  #MACRO TestCopy<float,float>(float)
  #MACRO TestCopy<float,double>(float)
  #MACRO TestCopy<double,double>(double)
  #MACRO TestCopy<String,String>(String)
}
#MACRODEF IsEqual(src,dst)
#IFSWITCH DST==Object
Assert.assertTrue(Objects.equals(src,dst));
#ELSEIFSWITCH SRC==boolean
  #IFSWITCH DST==byte,char,short,int,long,float,double
Assert.assertTrue(TypeUtil.castToByte(src)==dst);
  #ELSE
Assert.assertTrue(src==dst);
  #ENDIF
#ELSE
Assert.assertTrue(src==dst);
#ENDIF
#ENDDEF
#MACRODEF TestCopy<SRC,DST>(PRIMITIVE)
@Test
public void testSemiCheckedCopySRCDST() throws Throwable
{

  Random rand=new Random(0);
  for(int i=0;i<1000;++i)
  {
    int srcLength=rand.nextInt(1000);
    SRC[] src;
    JunitUtil.PRIMITIVEArrayBuilder.Randomized.build(src=new SRC[srcLength],rand);
    int dstLength=srcLength+rand.nextInt(1000);
    DST[] dst=new DST[dstLength];
    int copyLength=rand.nextInt(srcLength+1);
    int srcOffset=rand.nextInt(srcLength-copyLength+1);
    int dstOffset=rand.nextInt(dstLength-copyLength+1);
    ArrCopy.semicheckedCopy(src,srcOffset,dst,dstOffset,copyLength);
    for(int j=0;j<copyLength;++j)
    {
      #MACRO IsEqual(src[srcOffset+j],dst[dstOffset+j])
    }
  }
}
@Test
public void testSemiCheckedReverseCopySRCDST() throws Throwable
{

  Random rand=new Random(0);
  for(int i=0;i<1000;++i)
  {
    int srcLength=rand.nextInt(1000);
    SRC[] src;
    JunitUtil.PRIMITIVEArrayBuilder.Randomized.build(src=new SRC[srcLength],rand);
    int dstLength=srcLength+rand.nextInt(1000);
    DST[] dst=new DST[dstLength];
    int copyLength=rand.nextInt(srcLength+1);
    int srcOffset=rand.nextInt(srcLength-copyLength+1);
    int dstOffset=rand.nextInt(dstLength-copyLength+1);
    ArrCopy.semicheckedReverseCopy(src,srcOffset,dst,dstOffset,copyLength);
    for(int j=0;j<copyLength;++j)
    {
      #MACRO IsEqual(src[srcOffset+copyLength-1-j],dst[dstOffset+j])
    }
  }
}
#ENDDEF