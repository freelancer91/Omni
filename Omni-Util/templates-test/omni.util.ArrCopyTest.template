#TYPEDEF OfGeneric
package omni.util;

import org.junit.jupiter.api.Test;
import java.util.Random;

public class ArrCopyTest
{
  #MACRO TestMethods<false>()

#MACRODEF TestMethods<PARALLEL>()
  #MACRO TestCopy<boolean,Boolean>(boolean)
  #MACRO TestCopy<byte,Byte>(byte)
  #MACRO TestCopy<char,Character>(char)
  #MACRO TestCopy<short,Short>(short)
  #MACRO TestCopy<int,Integer>(int)
  #MACRO TestCopy<long,Long>(long)
  #MACRO TestCopy<float,Float>(float)
  #MACRO TestCopy<double,Double>(double)
  
  #MACRO TestCopy<boolean,Object>(boolean)
  #MACRO TestCopy<byte,Object>(byte)
  #MACRO TestCopy<char,Object>(char)
  #MACRO TestCopy<short,Object>(short)
  #MACRO TestCopy<int,Object>(int)
  #MACRO TestCopy<long,Object>(long)
  #MACRO TestCopy<float,Object>(float)
  #MACRO TestCopy<double,Object>(double)
  
  
  #MACRO TestCopy<Boolean,boolean>(boolean)
  #MACRO TestCopy<Byte,byte>(byte)
  #MACRO TestCopy<Character,char>(char)
  #MACRO TestCopy<Short,short>(short)
  #MACRO TestCopy<Integer,int>(int)
  #MACRO TestCopy<Long,long>(long)
  #MACRO TestCopy<Float,float>(float)
  #MACRO TestCopy<Double,double>(double)

  #MACRO TestCopy<boolean,boolean>(boolean)
  #MACRO TestCopy<boolean,byte>(boolean)
  #MACRO TestCopy<boolean,char>(boolean)
  #MACRO TestCopy<boolean,short>(boolean)
  #MACRO TestCopy<boolean,int>(boolean)
  #MACRO TestCopy<boolean,long>(boolean)
  #MACRO TestCopy<boolean,float>(boolean)
  #MACRO TestCopy<boolean,double>(boolean)
  #MACRO TestCopy<byte,byte>(byte)
  #MACRO TestCopy<byte,short>(byte)
  #MACRO TestCopy<byte,int>(byte)
  #MACRO TestCopy<byte,long>(byte)
  #MACRO TestCopy<byte,float>(byte)
  #MACRO TestCopy<byte,double>(byte)
  #MACRO TestCopy<char,char>(char)
  #MACRO TestCopy<char,int>(char)
  #MACRO TestCopy<char,long>(char)
  #MACRO TestCopy<char,float>(char)
  #MACRO TestCopy<char,double>(char)
  #MACRO TestCopy<short,short>(short)
  #MACRO TestCopy<short,int>(short)
  #MACRO TestCopy<short,long>(short)
  #MACRO TestCopy<short,float>(short)
  #MACRO TestCopy<short,double>(short)
  #MACRO TestCopy<int,int>(int)
  #MACRO TestCopy<int,long>(int)
  #MACRO TestCopy<int,float>(int)
  #MACRO TestCopy<int,double>(int)
  #MACRO TestCopy<long,long>(long)
  #MACRO TestCopy<long,float>(long)
  #MACRO TestCopy<long,double>(long)
  #MACRO TestCopy<float,float>(float)
  #MACRO TestCopy<float,double>(float)
  #MACRO TestCopy<double,double>(double)
  #MACRO TestCopy<String,String>(String)
  #MACRO TestSelfCopy<boolean>()
  #MACRO TestSelfCopy<byte>()
  #MACRO TestSelfCopy<char>()
  #MACRO TestSelfCopy<short>()
  #MACRO TestSelfCopy<int>()
  #MACRO TestSelfCopy<long>()
  #MACRO TestSelfCopy<float>()
  #MACRO TestSelfCopy<double>()
  #MACRO TestSelfCopy<String>()
#ENDDEF
}


#MACRODEF TestSelfCopy<ARRTYPE>()
@Test
public void testsemicheckedSelfCopyARRTYPE()
{
  Random rand=new Random(0);
  for(int i=0;i<1000;++i)
  {
    int srcLength=JunitUtil.randomIntBetween(0,1000,rand);
    ARRTYPE[] src=new ARRTYPE[srcLength];
    JunitUtil.ARRTYPEArrayBuilder.Randomized.buildUnchecked(src,0,srcLength,rand,0);
    int copyLength,srcOffset,dstOffset;
    if(srcLength>5)
    {
      switch(rand.nextInt(3))
      {
      case 0:
        copyLength=JunitUtil.randomIntBetween(6,srcLength,rand);
        srcOffset=JunitUtil.randomIntBetween(0,srcLength-copyLength,rand);
        dstOffset=JunitUtil.randomIntBetween(0,srcLength-copyLength,rand);
        break;
      case 1:
        copyLength=JunitUtil.randomIntBetween(0,5,rand);
        srcOffset=JunitUtil.randomIntBetween(0,srcLength-copyLength,rand);
        dstOffset=JunitUtil.randomIntBetween(0,srcOffset,rand);
        break;
      default:
        copyLength=JunitUtil.randomIntBetween(0,srcLength/2,rand);
        dstOffset=JunitUtil.randomIntBetween(copyLength,srcLength-copyLength,rand);
        srcOffset=JunitUtil.randomIntBetween(0,dstOffset-copyLength,rand);
        break;
      }
    }
    else
    {
      if(srcLength<2||rand.nextBoolean())
      {
        copyLength=JunitUtil.randomIntBetween(0,srcLength,rand);
        srcOffset=JunitUtil.randomIntBetween(0,srcLength-copyLength,rand);
        dstOffset=JunitUtil.randomIntBetween(0,srcOffset,rand);
      }
      else
      {
        copyLength=JunitUtil.randomIntBetween(0,srcLength/2,rand);
        dstOffset=JunitUtil.randomIntBetween(copyLength,srcLength-copyLength,rand);
        srcOffset=JunitUtil.randomIntBetween(0,dstOffset-copyLength,rand);
      }
    }
    ARRTYPE[] copy=new ARRTYPE[copyLength];
    ArrCopy.semicheckedCopy(src,srcOffset,copy,0,copyLength);
    ArrCopy.semicheckedSelfCopy(src,srcOffset,dstOffset,copyLength);
    if(copyLength!=0)
    {
      #IFSWITCH PARALLEL==true
      JunitUtil.uncheckedparallelassertarraysAreEqual(src,dstOffset,copy,0,copyLength);
      #ELSE
      JunitUtil.uncheckedassertarraysAreEqual(src,dstOffset,copy,0,copyLength);
      #ENDIF
    }

  }
}
#ENDDEF

#MACRODEF TestCopy<SRC,DST>(PRIMITIVE)
@Test
public void testSemiCheckedCopySRCDST()
{
  Random rand=new Random(0);
  for(int i=0;i<1000;++i)
  {
    int srcLength=JunitUtil.randomIntBetween(0,1000,rand);
    
    SRC[] src=new SRC[srcLength];
    if(srcLength!=0)
    {
      JunitUtil.PRIMITIVEArrayBuilder.Randomized.buildUnchecked(src,0,srcLength,rand,0);
    }
    int dstLength=JunitUtil.randomIntBetween(srcLength,srcLength+1000,rand);
    DST[] dst=new DST[dstLength];
    int copyLength=JunitUtil.randomIntBetween(0,srcLength,rand);
    int srcOffset=JunitUtil.randomIntBetween(0,srcLength-copyLength,rand);
    int dstOffset=JunitUtil.randomIntBetween(0,dstLength-copyLength,rand);
    ArrCopy.semicheckedCopy(src,srcOffset,dst,dstOffset,copyLength);
    if(copyLength!=0)
    {
#IFSWITCH PARALLEL==true
      JunitUtil.uncheckedparallelassertarraysAreEqual(src,srcOffset,dst,dstOffset,copyLength);
#ELSE
      JunitUtil.uncheckedassertarraysAreEqual(src,srcOffset,dst,dstOffset,copyLength);
#ENDIF
    }

  }
}
@Test
public void testSemiCheckedReverseCopySRCDST()
{

  Random rand=new Random(0);
  for(int i=0;i<1000;++i)
  {
    int srcLength=JunitUtil.randomIntBetween(0,1000,rand);
    SRC[] src=new SRC[srcLength];
    if(srcLength!=0)
    {
      JunitUtil.PRIMITIVEArrayBuilder.Randomized.buildUnchecked(src,0,srcLength,rand,0);
    }
    int dstLength=JunitUtil.randomIntBetween(srcLength,srcLength+1000,rand);
    DST[] dst=new DST[dstLength];
    int copyLength=JunitUtil.randomIntBetween(0,srcLength,rand);
    int srcOffset=JunitUtil.randomIntBetween(0,srcLength-copyLength,rand);
    int dstOffset=JunitUtil.randomIntBetween(0,dstLength-copyLength,rand);
    ArrCopy.semicheckedReverseCopy(src,srcOffset,dst,dstOffset,copyLength);
    if(copyLength!=0)
    {
#IFSWITCH PARALLEL==true
      JunitUtil.uncheckedparallelassertreversearraysAreEqual(src,srcOffset,dst,dstOffset,copyLength);
#ELSE
      JunitUtil.uncheckedassertreversearraysAreEqual(src,srcOffset,dst,dstOffset,copyLength);
#ENDIF
    }
  }
}
#ENDDEF