#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfString
#TYPEDEF OfInteger
package omni.util;
import java.util.Collection;
import java.util.Random;

public enum $ArrayType$ArrayBuilder
{
  


  #MACRO ArrayBuilderValue<Randomized>()
  ,
  #MACRO ArrayBuilderValue<Ascending>()
  ,
  #MACRO ArrayBuilderValue<Descending>()
  ,
  #MACRO ArrayBuilderValue<AllEquals>()
#IFNOT OfBoolean
  ,
  #MACRO ArrayBuilderValue<MergeAscending>()
  ,
  #MACRO ArrayBuilderValue<MergeDescending>()
  ,
  #MACRO ArrayBuilderValue<Saw>()
  ,
  #MACRO ArrayBuilderValue<SortedRepeated>()
  ,
  #MACRO ArrayBuilderValue<Repeated>()
  ,
  #MACRO ArrayBuilderValue<Duplicated>()
  ,
  #MACRO ArrayBuilderValue<SortedOrganPipes>()
  ,
  #MACRO ArrayBuilderValue<OrganPipes>()
  ,
  #MACRO ArrayBuilderValue<Stagger>()
  ,
  #MACRO ArrayBuilderValue<Plateau>()
  ,
  #MACRO ArrayBuilderValue<Shuffle>()
  #IF OfFloat,OfDouble
  ,
  #MACRO ArrayBuilderValue<WithNaNsAndZeros>()
  #ENDIF
#ENDIF
  ;
  public int getMLo()
  {
    return 1;
  }
  public int getMHi(int arrLength)
  {
    return 1;
  }
  public int getNumReps(int arrLength)
  {
    if(isRandomized())
    {
      return 10;
    }
    return 1;
  }
  public int incrementM(int m)
  {
    return m+1;
  }
  public boolean isRandomized()
  {
    //most sub-types are not randomized, so make that the default
    return false;
  }
  public abstract void buildUnchecked($ArrayType$[] arr,int offset,int length,Random rand,int m);
  public void build($ArrayType$[] arr,Random rand,int m)
  {
    if(arr==null)
    {
      throw new NullPointerException("arr cannot be null");
    }
    int length;
    if((length=arr.length)!=0)
    {
      buildUnchecked(arr,0,length,rand,m);
    }
  }  
  public void build($ArrayType$[] arr,int offset,int length,Random rand,int m)
  {
    if(arr==null)
    {
      throw new NullPointerException("arr cannot be null");
    }
    if(offset<0 || length<0 || offset+length>arr.length)
    {
      throw new ArrayIndexOutOfBoundsException("offset = "+offset+"; length="+length+"; arr.length="+arr.length);
    }
    if(length!=0)
    {
      buildUnchecked(arr,offset,length,rand,m);
    }
  }
#IF OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  public abstract void buildUnchecked($BoxedType$[] arr,int offset,int length,Random rand,int m);
  public void build($BoxedType$[] arr,Random rand,int m)
  {
    if(arr==null)
    {
      throw new NullPointerException("arr cannot be null");
    }
    int length;
    if((length=arr.length)!=0)
    {
      buildUnchecked(arr,0,length,rand,m);
    }
  }  
  public void build($BoxedType$[] arr,int offset,int length,Random rand,int m)
  {
    if(arr==null)
    {
      throw new NullPointerException("arr cannot be null");
    }
    if(offset<0 || length<0 || offset+length>arr.length)
    {
      throw new ArrayIndexOutOfBoundsException("offset = "+offset+"; length="+length+"; arr.length="+arr.length);
    }
    if(length!=0)
    {
      buildUnchecked(arr,offset,length,rand,m);
    }
  }
#ENDIF
  @Override
  public String toString()
  {
    return "$ArrayType$ArrayBuilder."+this.name();
  }
  public void addArrays(long randSeed,int arrLength,Collection<$ArrayType$[]> arrays)
  {
    Random rand=new Random(randSeed);
    for(int m=getMLo(),mHi=getMHi(arrLength),numReps=getNumReps(arrLength);m<=mHi;m=incrementM(m))
    {
      for(int i=0;i<numReps;++i)
      {
        $ArrayType$[] arr=new $ArrayType$[arrLength];
        if(arrLength!=0)
        {
          buildUnchecked(arr,0,arrLength,rand,m);
        }
        synchronized(arrays)
        {
          arrays.add(arr);
        }
      }
      
    }
  }
  static $ArrayType$[] buildRandomArray(int arrLength,int minIncl,int maxIncl,Random rand)
  {
    $ArrayType$[] arr=new $ArrayType$[arrLength];
    for(int i=0;i<arrLength;++i)
    {
      arr[i]=TypeConversionUtil.convertTo$ArrayType$(RandomUtil.randomIntBetween(minIncl,maxIncl,rand));
    }
    return arr;
  }
}

#MACRODEF ArrayBuilderValue<VALUENAME>()
VALUENAME
{
#IFSWITCH VALUENAME==AllEquals
  @Override
  public int getMLo()
  {
    return 0;
  }
#ELSEIFSWITCH VALUENAME==MergeAscending,MergeDescending
  @Override
  public int getMLo()
  {
    return 65;
  }
#ENDIF
  
#IFNOT OfBoolean
  #IFSWITCH VALUENAME==Ascending,Descending,Saw,Repeated,Duplicated,OrganPipes,Stagger,Plateau
  @Override
  public int getMHi(int arrLength)
  {
    return (arrLength<<1)-1;
  }
  #ELSEIFSWITCH VALUENAME==AllEquals
  @Override
  public int getMHi(int arrLength)
  {
    return 0;
  }
  #ELSEIFSWITCH VALUENAME==MergeAscending,MergeDescending
  @Override
  public int getMHi(int arrLength)
  {
    return 69;
  }
  #ELSEIFSWITCH VALUENAME==SortedRepeated,SortedOrganPipes
  @Override
  public int getMHi(int arrLength)
  {
    return Math.min(arrLength,7);
  }
  #ENDIF
#ENDIF
#IF OfChar,OfShort
/*
  #IFSWITCH VALUENAME==Duplicated
  @Override
  public int getNumReps(int arrLength)
  {
    if(arrLength<=3201 && arrLength>=47)
    {
      return 9;
    }
    return 1;
  }
  #ENDIF
*/
#ELSEIF OfFloat,OfDouble
/*
  #IFSWITCH VALUENAME==WithNaNsAndZeros
  @Override
  public int getNumReps(int arrLength)
  {
    return 2;
  }
  #ENDIF
*/
#ENDIF
#IFNOT OfBoolean
  #IFSWITCH VALUENAME==Ascending,Descending,Saw,Repeated,Duplicated,OrganPipes,Stagger,Plateau
  public int incrementM(int m)
  {
    return m<<1;
  }
  #ENDIF
#ENDIF
#IFSWITCH VALUENAME==Randomized,Duplicated,Shuffle,WithNaNsAndZeros
  @Override
  public boolean isRandomized()
  {
    return true;
  }
#ENDIF
#IF OfString,OfInteger
  #MACRO VALUENAMEBuild<true>($ArrayType$)
#ELSE
  #MACRO VALUENAMEBuild<false>($ArrayType$)
  #MACRO VALUENAMEBuild<true>($BoxedType$)
#ENDIF

}
#ENDDEF
#MACRODEF RandomizedBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  length+=offset;
  do
  {
    arr[offset]=RandomUtil.getRandomTHETYPE(rand);
  }
  while(++offset!=length);
}
#ENDDEF
#MACRODEF AscendingBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
#IF OfBoolean
  int i=0;
  for(int middle=length/2;i<middle;arr[(i++)+offset]=TypeConversionUtil.convertToTHETYPE(0)){}
  do
  {
    arr[i+offset]=TypeConversionUtil.convertToTHETYPE(1);
  }
  while(++i!=length);
#ELSE
  for(int i=0;i<length;arr[(i++)+offset]=TypeConversionUtil.convertToTHETYPE(m+i)){}
#ENDIF
}
#ENDDEF
#MACRODEF DescendingBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
#IF OfBoolean
  int i=0;
  for(int middle=length/2;i<middle;arr[(i++)+offset]=TypeConversionUtil.convertToTHETYPE(1)){}
  do
  {
    arr[i+offset]=TypeConversionUtil.convertToTHETYPE(0);
  }
  while(++i!=length);
#ELSE
  for(int i=0;i<length;arr[(i++)+offset]=TypeConversionUtil.convertToTHETYPE(length-m-i)){}
#ENDIF
}
#ENDDEF
#MACRODEF AllEqualsBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  THETYPE val=TypeConversionUtil.convertToTHETYPE(m);
  length+=offset;
  do
  {
    arr[offset]=val;
  }
  while(++offset!=length);
}
#ENDDEF
#MACRODEF MergeAscendingBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  int v=0;
  for(int i=0, k=0,period=length/m;k<m;++k)
  {
    v=0;
    for(int p=0;p<period;arr[(i++)+offset]=TypeConversionUtil.convertToTHETYPE(++v),++p){}
  }
  for(int j=1;j<length-1;arr[j++]=TypeConversionUtil.convertToTHETYPE(++v)){}
#IFSWITCH BOXED==true
  for(int i=offset,bound=offset+length;i<bound;++i)
  {
    if(arr[i]==null)
    {
      arr[i]=TypeConversionUtil.convertTo$BoxedType$(0);
    }
  }
#ENDIF
}
#ENDDEF
#MACRODEF MergeDescendingBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  int v=0;
  for(int i=0, k=0,period=length/m;k<m;++k)
  {
    v=0;
    for(int p=0;p<period;arr[(i++)+offset]=TypeConversionUtil.convertToTHETYPE(--v),++p){}
  }
  for(int j=1;j<length-1;arr[j++]=TypeConversionUtil.convertToTHETYPE(--v)){}
#IFSWITCH BOXED==true
  for(int i=offset,bound=offset+length;i<bound;++i)
  {
    if(arr[i]==null)
    {
      arr[i]=TypeConversionUtil.convertTo$BoxedType$(0);
    }
  }
#ENDIF
}
#ENDDEF
#MACRODEF SawBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  for(int incCount=1,decCount=length,i=0,period=m--;;period+=m)
  {
    for(int k=0;++k<=period;arr[(i++)+offset]=TypeConversionUtil.convertToTHETYPE(incCount++))
    {
      if(i>=length)
      {
        return;
      }
    }
    period+=m;
    for(int k=0;++k<=period;arr[(i++)+offset]=TypeConversionUtil.convertToTHETYPE(decCount--))
    {
      if(i>=length)
      {
        return;
      }
    }
  }
}
#ENDDEF
#MACRODEF SortedRepeatedBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  for(int period=length/m,i=0,k=0;;++k)
  {
    for(int t=0;++t<=period;arr[(i++)+offset]=TypeConversionUtil.convertToTHETYPE(k))
    {
      if(i>=length)
      {
        return;
      }
    }
    if(i>=length)
    {
      return;
    }
  }
}
#ENDDEF
#MACRODEF RepeatedBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  int i=0;
  do
  {
    arr[i+offset]=TypeConversionUtil.convertToTHETYPE(i%m);
  }
  while(++i!=length);
}
#ENDDEF
#MACRODEF DuplicatedBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  int i=0;
  do
  {
    arr[i+offset]=TypeConversionUtil.convertToTHETYPE(rand.nextInt(m));
  }
  while(++i!=length);
}
#ENDDEF
#MACRODEF SortedOrganPipesBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  for(int i=0;;)
  {
    for(int t=0;++t<=m;arr[(i++)+offset]=TypeConversionUtil.convertToTHETYPE(m))
    {
      if(i>=length)
      {
        return;
      }
    }
  }
}
#ENDDEF
#MACRODEF OrganPipesBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  int i=0;
  for(int middle=length/(m+1);i<middle;arr[i+offset]=TypeConversionUtil.convertToTHETYPE(i++)){}
  while(i<length)
  {
    arr[i+offset]=TypeConversionUtil.convertToTHETYPE(length-(i++)-1);
  }
}
#ENDDEF
#MACRODEF StaggerBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  int i=0;
  do
  {
    arr[i+offset]=TypeConversionUtil.convertToTHETYPE((i*m+i)%length);
  }
  while(++i!=length);
}
#ENDDEF
#MACRODEF PlateauBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  int i=0;
  do
  {
    arr[offset+i]=TypeConversionUtil.convertToTHETYPE(Math.min(i,m));
  }
  while(++i!=length);
}
#ENDDEF
#MACRODEF ShuffleBuild<BOXED>(THETYPE)
@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  int x=0,y=0;
  int bound=offset+length;
  do
  {
    arr[offset]=TypeConversionUtil.convertToTHETYPE(rand.nextBoolean()?(x+2):(y+2));
  }
  while(++offset!=bound);
}
#ENDDEF
#MACRODEF WithNaNsAndZerosBuild<BOXED>(THETYPE)
#IF OfDouble,OfFloat
  #IFSWITCH BOXED==true
//Ignore deprecation because we need would like to be able to use identity equality on the newly created boxed types
@SuppressWarnings("deprecation")
  #ENDIF

@Override
public void buildUnchecked(THETYPE[] arr,int offset,int length,Random rand,int m)
{
  for(int i=0;i<length;++i)
  {
    switch(rand.nextInt(4))
    {
    case 0:
  #IFSWITCH BOXED==true
      arr[i+offset]=new $BoxedType$(($ArrayType$)0.0);
  #ELSE
      arr[i+offset]=($ArrayType$)0.0;
  #ENDIF
      break;
    case 1:
  #IFSWITCH BOXED==true
      arr[i+offset]=new $BoxedType$(($ArrayType$)-0.0);
  #ELSE
      arr[i+offset]=($ArrayType$)-0.0;
  #ENDIF
      break;
    case 2:
  #IFSWITCH BOXED==true
      arr[i+offset]=new $BoxedType$($BoxedType$.NaN);
  #ELSE
      arr[i+offset]=$BoxedType$.NaN;
  #ENDIF
      break;
    default:
      arr[i+offset]=RandomUtil.getRandomTHETYPE(rand);
    }
  }
}
#ENDIF
#ENDDEF