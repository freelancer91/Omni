#TYPEDEF OfGeneric
package omni.util;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.Random;
public class BitSetUtilTest{
    @Test
    public void tesGetBitSet(){
        for(int count=0;count<=100;++count){
            Assertions.assertArrayEquals(new long[(count-1>>6)+1],BitSetUtil.getBitSet(count));
        }
    }
    @Test
    public void testContainsWord(){
        long word=0xAAAAAAAAAAAAAAAAL;
        for(int i=Byte.MIN_VALUE;i<=Byte.MAX_VALUE;i+=2){
            Assertions.assertFalse(BitSetUtil.containsword(word,i));
            Assertions.assertTrue(BitSetUtil.containsword(word,i+1));
        }
    }
    
    
    
    #MACRO TestMarkAndPullSurvivors<byte>()
    #MACRO TestMarkAndPullSurvivors<char>()
    #MACRO TestMarkAndPullSurvivors<short>()
    #MACRO TestMarkAndPullSurvivors<int>()
    #MACRO TestMarkAndPullSurvivors<long>()
    #MACRO TestMarkAndPullSurvivors<float>()
    #MACRO TestMarkAndPullSurvivors<double>()
    #MACRO TestMarkAndPullSurvivors<Integer>()
    
    
}

 
 



#MACRODEF TestMarkAndPullSurvivors<ARRTYPE>()


@Test
public void testMarkSurvivorsBitSetARRTYPE()
{
  Random rand=new Random(0);
#IFSWITCH ARRTYPE==char
  var filter=ARRTYPEPredicates.MarkGreaterThan.getPred(rand,128);
  for(int i=0;i<100;++i)
  {
    ARRTYPE[] arr=ARRTYPEArrayBuilder.buildRandomArray(5000,0,256,rand);
#ELSE
  var filter=ARRTYPEPredicates.MarkGreaterThan.getPred(rand,0);
  for(int i=0;i<100;++i)
  {

    ARRTYPE[] arr=ARRTYPEArrayBuilder.buildRandomArray(5000,Byte.MIN_VALUE,Byte.MAX_VALUE,rand);
#ENDIF
    long[] bitSet=BitSetUtil.getBitSet(arr.length);


    int numExpectedSurvivors=BitSetUtil.markSurvivors(arr,0,arr.length,filter,bitSet);
    ARRTYPE[] copy=new ARRTYPE[arr.length];
    ArrCopy.uncheckedCopy(arr,0,copy,0,arr.length);
    BitSetUtil.pullSurvivorsDown(copy,0,0,numExpectedSurvivors,bitSet);
    
    
    
    int numActualSurvivors=0;
    for(int j=0;j<arr.length;++j)
    {
      var currVal=arr[j];
      boolean v=filter.test(currVal);
      if(!v)
      {
        Assertions.assertTrue(EqualityUtil.isEqual(currVal,copy[numActualSurvivors]));
        ++numActualSurvivors;
        
      }
      long word=bitSet[j>>>6];
    
      Assertions.assertEquals(v,(word&1L<<j)==0);
    }
    Assertions.assertEquals(numActualSurvivors,numExpectedSurvivors);
    
    
    
  }
  
  
}
@Test
public void testMarkSurvivorsRetWordARRTYPE()
{
  Random rand=new Random(0);
#IFSWITCH ARRTYPE==char
  var filter=ARRTYPEPredicates.MarkGreaterThan.getPred(rand,128);
  for(int i=0;i<100;++i)
  {
    ARRTYPE[] arr=ARRTYPEArrayBuilder.buildRandomArray(64,0,256,rand);
#ELSE
  var filter=ARRTYPEPredicates.MarkGreaterThan.getPred(rand,0);
  for(int i=0;i<100;++i)
  {

    ARRTYPE[] arr=ARRTYPEArrayBuilder.buildRandomArray(64,Byte.MIN_VALUE,Byte.MAX_VALUE,rand);
#ENDIF
    long word=BitSetUtil.markSurvivors(arr,0,arr.length,filter);
    int numExpectedSurvivors=Long.bitCount(word);
    ARRTYPE[] copy=new ARRTYPE[arr.length];
    ArrCopy.uncheckedCopy(arr,0,copy,0,arr.length);
    BitSetUtil.pullSurvivorsDown(copy,0,0,numExpectedSurvivors,word);
    int numActualSurvivors=0;
    for(int j=0;j<arr.length;++j)
    {
      var currVal=arr[j];
      boolean v=filter.test(currVal);
      if(!v)
      {
        Assertions.assertTrue(EqualityUtil.isEqual(currVal,copy[numActualSurvivors]));
        ++numActualSurvivors;
        
      }
      Assertions.assertEquals(v,(word&1L<<j)==0);
    }
    Assertions.assertEquals(numActualSurvivors,numExpectedSurvivors);
  }
}
#ENDDEF