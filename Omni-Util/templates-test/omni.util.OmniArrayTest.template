#TYPEDEF OfGeneric
package omni.util;
import java.util.function.DoublePredicate;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.Predicate;
import java.util.Random;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import omni.function.CharPredicate;
import omni.function.FloatPredicate;
import omni.function.ShortPredicate;
import java.util.Objects;
public class OmniArrayTest
{
  private void testGrowBy100PctHelper(int currCapacityBaseLine){
      for(int i=-2;i<=2;++i){
          int currentCapacity=currCapacityBaseLine+i;
          if(currentCapacity>=0&&currentCapacity<Integer.MAX_VALUE){
              int expected;
              if(currentCapacity<=OmniArray.MAX_ARR_SIZE/2){
                  expected=Math.max(currentCapacity+1,currentCapacity*2);
              }else if(currentCapacity<OmniArray.MAX_ARR_SIZE){
                  expected=OmniArray.MAX_ARR_SIZE;
              }else{
                  expected=currentCapacity+1;
              }
              int actual=OmniArray.growBy100Pct(currentCapacity);
              Assertions.assertTrue(expected==actual);
          }
      }
  }

  @Test
  public void testGrowBy100Pctint(){
      testGrowBy100PctHelper(0);
      testGrowBy100PctHelper(OmniArray.MAX_ARR_SIZE/2);
      testGrowBy100PctHelper(OmniArray.MAX_ARR_SIZE);
      testGrowBy100PctHelper(Integer.MAX_VALUE);
      Assertions.assertThrows(OutOfMemoryError.class,()->OmniArray.growBy100Pct(Integer.MAX_VALUE));
  }
  private void testGrowBy100PctHelper(int currCapacityBaseLine,int minCapacityBaseline){
      for(int i=-2;i<=2;++i){
          int currCapacity=currCapacityBaseLine+i;
          if(currCapacity>=0&&currCapacityBaseLine<Integer.MAX_VALUE-1){
              for(int j=0;j<2;++j){
                  int minCapacity=minCapacityBaseline+j;
                  if(minCapacity<=currCapacity){
                      continue;
                  }
                  int expected;
                  if(minCapacity<=OmniArray.MAX_ARR_SIZE){
                      expected=Math.min(OmniArray.MAX_ARR_SIZE,Math.max(minCapacity,currCapacity*2));
                  }else{
                      expected=minCapacity;
                  }
                  int actual=OmniArray.growBy100Pct(currCapacity,minCapacity);
                  Assertions.assertTrue(expected==actual);
              }
          }
      }
  }
  @Test
  public void testGrowBy100Pctintint(){
      testGrowBy100PctHelper(0,1);
      testGrowBy100PctHelper(10,30);
      testGrowBy100PctHelper(OmniArray.MAX_ARR_SIZE/2,OmniArray.MAX_ARR_SIZE/2+1);
      testGrowBy100PctHelper(OmniArray.MAX_ARR_SIZE/2,OmniArray.MAX_ARR_SIZE);
      testGrowBy100PctHelper(OmniArray.MAX_ARR_SIZE,OmniArray.MAX_ARR_SIZE+1);
      Assertions.assertThrows(OutOfMemoryError.class,()->OmniArray.growBy100Pct(Integer.MAX_VALUE,Integer.MAX_VALUE+1));
      Assertions.assertThrows(OutOfMemoryError.class,()->OmniArray.growBy100Pct(0,Integer.MAX_VALUE+1));
  }
  private void testGrowBy50PctHelper(int currCapacityBaseLine){
      for(int i=-2;i<=2;++i){
          int currentCapacity=currCapacityBaseLine+i;
          if(currentCapacity>=0&&currentCapacity<Integer.MAX_VALUE){
              int expected;
              if(currentCapacity<=(int)(OmniArray.MAX_ARR_SIZE/1.5)){
                  expected=Math.max(currentCapacity+1,(int)(currentCapacity*1.5));
              }else if(currentCapacity<OmniArray.MAX_ARR_SIZE){
                  expected=OmniArray.MAX_ARR_SIZE;
              }else{
                  expected=currentCapacity+1;
              }
              int actual=OmniArray.growBy50Pct(currentCapacity);
              Assertions.assertTrue(expected==actual);
          }
      }
  }
  @Test
  public void testGrowBy50Pctint(){
      testGrowBy50PctHelper(0);
      testGrowBy50PctHelper(OmniArray.MAX_ARR_SIZE/3*2+1);
      testGrowBy50PctHelper(OmniArray.MAX_ARR_SIZE);
      testGrowBy50PctHelper(Integer.MAX_VALUE);
      Assertions.assertThrows(OutOfMemoryError.class,()->OmniArray.growBy50Pct(Integer.MAX_VALUE));
  }

  private void testGrowBy50PctHelper(int currCapacityBaseLine,int minCapacityBaseline){
      for(int i=-2;i<=2;++i){
          int currCapacity=currCapacityBaseLine+i;
          if(currCapacity>=0&&currCapacityBaseLine<Integer.MAX_VALUE-1){
              for(int j=0;j<2;++j){
                  int minCapacity=minCapacityBaseline+j;
                  if(minCapacity<=currCapacity){
                      continue;
                  }
                  int expected;
                  if(minCapacity<=OmniArray.MAX_ARR_SIZE){
                      expected=Math.min(OmniArray.MAX_ARR_SIZE,Math.max(minCapacity,(int)(currCapacity*1.5)));
                  }else{
                      expected=minCapacity;
                  }
                  int actual=OmniArray.growBy50Pct(currCapacity,minCapacity);
                  Assertions.assertTrue(expected==actual);
              }
          }
      }
  }
  @Test
  public void testGrowBy50Pctintint(){
      testGrowBy50PctHelper(0,1);
      testGrowBy50PctHelper(10,30);
      testGrowBy50PctHelper(OmniArray.MAX_ARR_SIZE/3*2+1,OmniArray.MAX_ARR_SIZE/3*2+2);
      testGrowBy50PctHelper(OmniArray.MAX_ARR_SIZE/3*2+1,OmniArray.MAX_ARR_SIZE);
      testGrowBy50PctHelper(OmniArray.MAX_ARR_SIZE,OmniArray.MAX_ARR_SIZE+1);
      Assertions.assertThrows(OutOfMemoryError.class,()->OmniArray.growBy50Pct(Integer.MAX_VALUE,Integer.MAX_VALUE+1));
      Assertions.assertThrows(OutOfMemoryError.class,()->OmniArray.growBy50Pct(0,Integer.MAX_VALUE+1));
  }
  @Test
  public void testGrowToArrSeqDefault(){
      Assertions.assertTrue(OmniArray.MAX_ARR_SIZE==OmniArray.growToArrSeqDefault(OmniArray.MAX_ARR_SIZE));
      Assertions.assertTrue(
              (int)(OmniArray.DEFAULT_ARR_SEQ_CAP*1.5)==OmniArray.growToArrSeqDefault(OmniArray.DEFAULT_ARR_SEQ_CAP));
      Assertions.assertTrue(
              OmniArray.DEFAULT_ARR_SEQ_CAP==OmniArray.growToArrSeqDefault(OmniArray.DEFAULT_ARR_SEQ_CAP-1));
  }
  @Test
  public void testUncheckedArrResize(){
      {
          String[] input=new String[]{"a","b","c"};
          String[] output=OmniArray.uncheckedArrResize(2,input);
          Assertions.assertTrue(input==output);
          Assertions.assertTrue(input[2]==null);
      }
      {
          String[] input=new String[]{"a","b","c"};
          String[] output=OmniArray.uncheckedArrResize(3,input);
          Assertions.assertTrue(input==output);
      }
      {
          String[] input=new String[]{"a","b","c"};
          String[] output=OmniArray.uncheckedArrResize(4,input);
          Assertions.assertTrue(input!=output);
          Assertions.assertTrue(output.length==4);
      }
  }
  @Test
  public void testDefaultArrays(){
      Assertions.assertTrue(OmniArray.OfBoolean.DEFAULT_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfByte.DEFAULT_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfChar.DEFAULT_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfShort.DEFAULT_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfInt.DEFAULT_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfLong.DEFAULT_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfFloat.DEFAULT_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfDouble.DEFAULT_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfRef.DEFAULT_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfBoolean.DEFAULT_BOXED_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfByte.DEFAULT_BOXED_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfChar.DEFAULT_BOXED_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfShort.DEFAULT_BOXED_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfInt.DEFAULT_BOXED_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfLong.DEFAULT_BOXED_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfFloat.DEFAULT_BOXED_ARR.length==0);
      Assertions.assertTrue(OmniArray.OfDouble.DEFAULT_BOXED_ARR.length==0);
  }
  
  
  #MACRO TestIndexPredicate<char>(Char,CharPredicate,)
  #MACRO TestIndexPredicate<short>(Short,ShortPredicate,)
  #MACRO TestIndexPredicate<int>(Int,IntPredicate,)
  #MACRO TestIndexPredicate<long>(Long,LongPredicate,)
  #MACRO TestIndexPredicate<float>(Float,FloatPredicate,)
  #MACRO TestIndexPredicate<double>(Double,DoublePredicate,)
  #MACRO TestIndexPredicate<Double>(Ref,Predicate<Double>,new Double)
#MACRODEF TestIndexPredicate<EXPOSEDTYPE>(CLASSPREFIX,PREDICATETYPE,CREATEVAL)
#IFSWITCH EXPOSEDTYPE==Double
@SuppressWarnings("deprecation")
#ENDIF
@Test
public void testGetIndexPredicateCLASSPREFIX()
{
  var inputPred=new CLASSPREFIXIndexPredicate();
  EXPOSEDTYPE testVal=(EXPOSEDTYPE)CREATEVAL(1);
  OmniArray.OfCLASSPREFIX.getIndexPredicate(inputPred,(EXPOSEDTYPE)CREATEVAL(3),(EXPOSEDTYPE)CREATEVAL(2),testVal).test(2);
  Assertions.assertTrue(inputPred.captured==testVal);
}
private static class CLASSPREFIXIndexPredicate implements PREDICATETYPE
{
  EXPOSEDTYPE captured;
  @Override
  public boolean test(EXPOSEDTYPE val)
  {
    captured=val;
    return true;
  }
}
#ENDDEF

  #MACRO TestReverseRangeMethods<true>()
#MACRODEF TestReverseRangeMethods<PARALLEL>()
  #MACRO TestReverseRange<boolean>(Boolean)
  #MACRO TestReverseRange<byte>(Byte)
  #MACRO TestReverseRange<char>(Char)
  #MACRO TestReverseRange<short>(Short)
  #MACRO TestReverseRange<int>(Int)
  #MACRO TestReverseRange<long>(Long)
  #MACRO TestReverseRange<float>(Float)
  #MACRO TestReverseRange<double>(Double)
  #MACRO TestReverseRange<String>(Ref)
#ENDDEF
#MACRODEF TestReverseRange<ARRTYPE>(CLASSPREFIX)
@Test
public void testReverseRangeARRTYPE()
{
  Random rand=new Random(0);
  ARRTYPE[] arr;
  ARRTYPEArrayBuilder.Randomized.buildUnchecked(arr=new ARRTYPE[100],0,arr.length,rand,0);
  ARRTYPE[] copy=new ARRTYPE[arr.length];
  ArrCopy.uncheckedCopy(arr,0,copy,0,arr.length);
  OmniArray.OfCLASSPREFIX.reverseRange(arr,0,arr.length-1);
#IFSWITCH PARALLEL==true
  EqualityUtil.uncheckedparallelassertreversearraysAreEqual(arr,0,copy,0,arr.length);
#ELSE
  EqualityUtil.uncheckedassertreversearraysAreEqual(arr,0,copy,0,arr.length);
#ENDIF
}
#ENDDEF

  @Test
  public void testGetFltBitsIndexPredicate()
  {
    var inputPred=new FloatIndexPredicate();
    OmniArray.OfFloat.getFltBitsIndexPredicate(inputPred,Float.floatToRawIntBits(3.0f),Float.floatToRawIntBits(2.0f),Float.floatToRawIntBits(1.0f)).test(2);
    Assertions.assertTrue(inputPred.captured==1.0f);
  }
  @Test
  public void testGetDblBitsIndexPredicate()
  {
    var inputPred=new DoubleIndexPredicate();
    OmniArray.OfDouble.getDblBitsIndexPredicate(inputPred,Double.doubleToRawLongBits(3.0),Double.doubleToRawLongBits(2.0),Double.doubleToRawLongBits(1.0)).test(2);
    Assertions.assertTrue(inputPred.captured==1.0);
  }
  
  @Test
  public void testNullifyRange()
  {
      String[] arr=new String[]{"a","b","c","d","e","f","g"};
      OmniArray.OfRef.nullifyRange(arr,4,2);
      Assertions.assertTrue("a".equals(arr[0]));
      Assertions.assertTrue("b".equals(arr[1]));
      Assertions.assertTrue(arr[2]==null);
      Assertions.assertTrue(arr[3]==null);
      Assertions.assertTrue(arr[4]==null);
      Assertions.assertTrue("f".equals(arr[5]));
      Assertions.assertTrue("g".equals(arr[6]));
  }
  
  #MACRO TestUncheckedContains<boolean,Boolean>()
  #MACRO TestUncheckedContains<byte,Byte>()
  #MACRO TestUncheckedContains<char,Char>()
  #MACRO TestUncheckedContains<short,Short>()
  #MACRO TestUncheckedContains<int,Int>()
  #MACRO TestUncheckedContains<long,Long>()
  #MACRO TestUncheckedContains<float,Float>()
  #MACRO TestUncheckedContains<double,Double>()
  #MACRO TestUncheckedContains<Integer,Ref>()
#MACRODEF TestUncheckedContains<ARRTYPE,CLASSPREFIX>()
@Test
public void testUncheckedContainsARRTYPE()
{
  Random rand=new Random(0);
  for(int i=0;i<100;++i)
  {
    boolean willContain=rand.nextBoolean();
    
#IFSWITCH ARRTYPE==boolean
    ARRTYPE[] arr=new ARRTYPE[1000];
    if(willContain)
    {
      ARRTYPEArrayBuilder.Randomized.buildUnchecked(arr,0,arr.length,rand,rand.nextInt());
      int index=RandomUtil.randomIntBetween(0,arr.length-1,rand);
      ARRTYPE v=arr[index];
      Assertions.assertTrue(OmniArray.OfCLASSPREFIX.uncheckedcontains(arr,0,arr.length-1,v));
    }
    else
    {
      ARRTYPEArrayBuilder.AllEquals.buildUnchecked(arr,0,arr.length,rand,rand.nextInt());
      ARRTYPE v=arr[0];
      Assertions.assertFalse(OmniArray.OfCLASSPREFIX.uncheckedcontains(arr,0,arr.length-1,!v));
    }
#ELSEIFSWITCH ARRTYPE==byte,char,short,int,long
    var arr=ARRTYPEArrayBuilder.buildRandomArray(1000,1,100,rand);
    if(willContain)
    {
      int index=RandomUtil.randomIntBetween(0,arr.length-1,rand);
      var v=arr[index];
      Assertions.assertTrue(OmniArray.OfCLASSPREFIX.uncheckedcontains(arr,0,arr.length-1,v));
    }
    else
    {
      var v=TypeConversionUtil.convertToARRTYPE(RandomUtil.randomIntBetween(101,120,rand));
      Assertions.assertFalse(OmniArray.OfCLASSPREFIX.uncheckedcontains(arr,0,arr.length-1,v));
    }
#ELSE
    var arr=ARRTYPEArrayBuilder.buildRandomArray(1000,1,100,rand);
    switch(RandomUtil.randomIntBetween(0,2,rand))
    {
      case 0:
      {
  #IFSWITCH ARRTYPE==float,double
        //test bits
        if(willContain)
        {
          int index=RandomUtil.randomIntBetween(0,arr.length-1,rand);
          var v=arr[index];
    #IFSWITCH ARRTYPE==float
          var bits=Float.floatToRawIntBits(v);
    #ELSE
          var bits=Double.doubleToRawLongBits(v);
    #ENDIF
          Assertions.assertTrue(OmniArray.OfCLASSPREFIX.uncheckedcontainsBits(arr,0,arr.length-1,bits));
        }
        else
        {
    #IFSWITCH ARRTYPE==float
          var bits=Float.floatToRawIntBits(1000);
    #ELSE
          var bits=Double.doubleToRawLongBits(1000);
    #ENDIF
          Assertions.assertFalse(OmniArray.OfCLASSPREFIX.uncheckedcontainsBits(arr,0,arr.length-1,bits));
        }
  #ELSE
        //test non-null
        if(willContain)
        {
          int index=RandomUtil.randomIntBetween(0,arr.length-1,rand);
          var v=arr[index];
          Assertions.assertTrue(OmniArray.OfCLASSPREFIX.uncheckedcontainsNonNull(arr,0,arr.length-1,v));
        }
        else
        {
          Assertions.assertFalse(OmniArray.OfCLASSPREFIX.uncheckedcontainsNonNull(arr,0,arr.length-1,new Object()));
        }
  #ENDIF
        break;
      }
      case 1:
      {
  #IFSWITCH ARRTYPE==float,double
        //test NaN
        if(willContain)
        {
          int index=RandomUtil.randomIntBetween(0,arr.length-1,rand);
          arr[index]=CLASSPREFIX.NaN;
          Assertions.assertTrue(OmniArray.OfCLASSPREFIX.uncheckedcontainsNaN(arr,0,arr.length-1));
        }
        else
        {
          Assertions.assertFalse(OmniArray.OfCLASSPREFIX.uncheckedcontainsNaN(arr,0,arr.length-1));
        }
  #ELSE
        //test null
        if(willContain)
        {
          int index=RandomUtil.randomIntBetween(0,arr.length-1,rand);
          arr[index]=null;
          Assertions.assertTrue(OmniArray.OfCLASSPREFIX.uncheckedcontainsNull(arr,0,arr.length-1));
        }
        else
        {
          Assertions.assertFalse(OmniArray.OfCLASSPREFIX.uncheckedcontainsNull(arr,0,arr.length-1));
        }
  #ENDIF
        break;
      }
      default:
      {
  #IFSWITCH ARRTYPE==float,double
        //test 0
        if(willContain)
        {
          int index=RandomUtil.randomIntBetween(0,arr.length-1,rand);
          arr[index]=0;
          Assertions.assertTrue(OmniArray.OfCLASSPREFIX.uncheckedcontains0(arr,0,arr.length-1));
        }
        else
        {
          Assertions.assertFalse(OmniArray.OfCLASSPREFIX.uncheckedcontains0(arr,0,arr.length-1));
        }
  #ELSE
        //test predicate
        if(willContain)
        {
          int index=RandomUtil.randomIntBetween(0,arr.length-1,rand);
          var v=arr[index];
          Assertions.assertTrue(OmniArray.OfCLASSPREFIX.uncheckedcontains(arr,0,arr.length-1,v::equals));
        }
        else
        {
          Assertions.assertFalse(OmniArray.OfCLASSPREFIX.uncheckedcontains(arr,0,arr.length-1,Objects::isNull));
        }
  #ENDIF
      }
    }
#ELSE
  
#ENDIF
    
  }
}


#ENDDEF
}