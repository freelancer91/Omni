#TYPEDEF OfGeneric
package omni.util;
import java.util.function.DoublePredicate;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
//TODO uncomment when the module bug is fixed
//import java.util.function.Predicate;
import java.util.Objects;
import java.util.Random;
import org.junit.Assert;
import org.junit.Test;
import omni.function.CharPredicate;
import omni.function.FloatPredicate;
import omni.function.ShortPredicate;
public class OmniArrayTest
{
  private void testGrowBy100PctHelper(int currCapacityBaseLine){
      for(int i=-2;i<=2;++i){
          int currentCapacity=currCapacityBaseLine+i;
          if(currentCapacity>=0&&currentCapacity<Integer.MAX_VALUE){
              int expected;
              if(currentCapacity<=OmniArray.MAX_ARR_SIZE/2){
                  expected=Math.max(currentCapacity+1,currentCapacity*2);
              }else if(currentCapacity<OmniArray.MAX_ARR_SIZE){
                  expected=OmniArray.MAX_ARR_SIZE;
              }else{
                  expected=currentCapacity+1;
              }
              int actual=OmniArray.growBy100Pct(currentCapacity);
              Assert.assertTrue("currCapacity="+currentCapacity+"; expected="+expected+"; actual="+actual,
                      expected==actual);
          }
      }
  }

  @Test
  public void testGrowBy100Pctint(){
      testGrowBy100PctHelper(0);
      testGrowBy100PctHelper(OmniArray.MAX_ARR_SIZE/2);
      testGrowBy100PctHelper(OmniArray.MAX_ARR_SIZE);
      testGrowBy100PctHelper(Integer.MAX_VALUE);
  }
  @Test(expected=OutOfMemoryError.class)
  public void testGrowBy100PctintOOM(){
      OmniArray.growBy100Pct(Integer.MAX_VALUE);
  }
  private void testGrowBy100PctHelper(int currCapacityBaseLine,int minCapacityBaseline){
      for(int i=-2;i<=2;++i){
          int currCapacity=currCapacityBaseLine+i;
          if(currCapacity>=0&&currCapacityBaseLine<Integer.MAX_VALUE-1){
              for(int j=0;j<2;++j){
                  int minCapacity=minCapacityBaseline+j;
                  if(minCapacity<=currCapacity){
                      continue;
                  }
                  int expected;
                  if(minCapacity<=OmniArray.MAX_ARR_SIZE){
                      expected=Math.min(OmniArray.MAX_ARR_SIZE,Math.max(minCapacity,currCapacity*2));
                  }else{
                      expected=minCapacity;
                  }
                  int actual=OmniArray.growBy100Pct(currCapacity,minCapacity);
                  Assert.assertTrue("currCapacity = "+currCapacity+"; minCapacity="+minCapacity+"; expected="+expected
                          +"; actual = "+actual,expected==actual);
              }
          }
      }
  }
  @Test
  public void testGrowBy100Pctintint(){
      testGrowBy100PctHelper(0,1);
      testGrowBy100PctHelper(10,30);
      testGrowBy100PctHelper(OmniArray.MAX_ARR_SIZE/2,OmniArray.MAX_ARR_SIZE/2+1);
      testGrowBy100PctHelper(OmniArray.MAX_ARR_SIZE/2,OmniArray.MAX_ARR_SIZE);
      testGrowBy100PctHelper(OmniArray.MAX_ARR_SIZE,OmniArray.MAX_ARR_SIZE+1);
  }
  @Test(expected=OutOfMemoryError.class)
  public void testGrowBy100PctintintOOM1(){
      OmniArray.growBy100Pct(Integer.MAX_VALUE,Integer.MAX_VALUE+1);
  }
  @Test(expected=OutOfMemoryError.class)
  public void testGrowBy100PctintintOOM2(){
      OmniArray.growBy100Pct(0,Integer.MAX_VALUE+1);
  }
  private void testGrowBy50PctHelper(int currCapacityBaseLine){
      for(int i=-2;i<=2;++i){
          int currentCapacity=currCapacityBaseLine+i;
          if(currentCapacity>=0&&currentCapacity<Integer.MAX_VALUE){
              int expected;
              if(currentCapacity<=(int)(OmniArray.MAX_ARR_SIZE/1.5)){
                  expected=Math.max(currentCapacity+1,(int)(currentCapacity*1.5));
              }else if(currentCapacity<OmniArray.MAX_ARR_SIZE){
                  expected=OmniArray.MAX_ARR_SIZE;
              }else{
                  expected=currentCapacity+1;
              }
              int actual=OmniArray.growBy50Pct(currentCapacity);
              Assert.assertTrue("currCapacity="+currentCapacity+"; expected="+expected+"; actual="+actual,
                      expected==actual);
          }
      }
  }
  @Test
  public void testGrowBy50Pctint(){
      testGrowBy50PctHelper(0);
      testGrowBy50PctHelper(OmniArray.MAX_ARR_SIZE/3*2+1);
      testGrowBy50PctHelper(OmniArray.MAX_ARR_SIZE);
      testGrowBy50PctHelper(Integer.MAX_VALUE);
  }
  @Test(expected=OutOfMemoryError.class)
  public void testGrowBy50PctintOOM(){
      OmniArray.growBy50Pct(Integer.MAX_VALUE);
  }

  private void testGrowBy50PctHelper(int currCapacityBaseLine,int minCapacityBaseline){
      for(int i=-2;i<=2;++i){
          int currCapacity=currCapacityBaseLine+i;
          if(currCapacity>=0&&currCapacityBaseLine<Integer.MAX_VALUE-1){
              for(int j=0;j<2;++j){
                  int minCapacity=minCapacityBaseline+j;
                  if(minCapacity<=currCapacity){
                      continue;
                  }
                  int expected;
                  if(minCapacity<=OmniArray.MAX_ARR_SIZE){
                      expected=Math.min(OmniArray.MAX_ARR_SIZE,Math.max(minCapacity,(int)(currCapacity*1.5)));
                  }else{
                      expected=minCapacity;
                  }
                  int actual=OmniArray.growBy50Pct(currCapacity,minCapacity);
                  Assert.assertTrue("currCapacity = "+currCapacity+"; minCapacity="+minCapacity+"; expected="+expected
                          +"; actual = "+actual,expected==actual);
              }
          }
      }
  }
  @Test
  public void testGrowBy50Pctintint(){
      testGrowBy50PctHelper(0,1);
      testGrowBy50PctHelper(10,30);
      testGrowBy50PctHelper(OmniArray.MAX_ARR_SIZE/3*2+1,OmniArray.MAX_ARR_SIZE/3*2+2);
      testGrowBy50PctHelper(OmniArray.MAX_ARR_SIZE/3*2+1,OmniArray.MAX_ARR_SIZE);
      testGrowBy50PctHelper(OmniArray.MAX_ARR_SIZE,OmniArray.MAX_ARR_SIZE+1);
  }
  @Test(expected=OutOfMemoryError.class)
  public void testGrowBy50PctintintOOM1(){
      OmniArray.growBy50Pct(Integer.MAX_VALUE,Integer.MAX_VALUE+1);
  }
  @Test(expected=OutOfMemoryError.class)
  public void testGrowBy50PctintintOOM2(){
      OmniArray.growBy50Pct(0,Integer.MAX_VALUE+1);
  }
  @Test
  public void testGrowToArrSeqDefault(){
      Assert.assertTrue(OmniArray.MAX_ARR_SIZE==OmniArray.growToArrSeqDefault(OmniArray.MAX_ARR_SIZE));
      Assert.assertTrue(
              (int)(OmniArray.DEFAULT_ARR_SEQ_CAP*1.5)==OmniArray.growToArrSeqDefault(OmniArray.DEFAULT_ARR_SEQ_CAP));
      Assert.assertTrue(
              OmniArray.DEFAULT_ARR_SEQ_CAP==OmniArray.growToArrSeqDefault(OmniArray.DEFAULT_ARR_SEQ_CAP-1));
  }
  @Test
  public void testUncheckedArrResize(){
      {
          String[] input=new String[]{"a","b","c"};
          String[] output=OmniArray.uncheckedArrResize(2,input);
          Assert.assertTrue(input==output);
          Assert.assertTrue(input[2]==null);
      }
      {
          String[] input=new String[]{"a","b","c"};
          String[] output=OmniArray.uncheckedArrResize(3,input);
          Assert.assertTrue(input==output);
      }
      {
          String[] input=new String[]{"a","b","c"};
          String[] output=OmniArray.uncheckedArrResize(4,input);
          Assert.assertTrue(input!=output);
          Assert.assertTrue(output.length==4);
      }
  }
  @Test
  public void testDefaultArrays(){
      Assert.assertTrue(OmniArray.OfBoolean.DEFAULT_ARR.length==0);
      Assert.assertTrue(OmniArray.OfByte.DEFAULT_ARR.length==0);
      Assert.assertTrue(OmniArray.OfChar.DEFAULT_ARR.length==0);
      Assert.assertTrue(OmniArray.OfShort.DEFAULT_ARR.length==0);
      Assert.assertTrue(OmniArray.OfInt.DEFAULT_ARR.length==0);
      Assert.assertTrue(OmniArray.OfLong.DEFAULT_ARR.length==0);
      Assert.assertTrue(OmniArray.OfFloat.DEFAULT_ARR.length==0);
      Assert.assertTrue(OmniArray.OfDouble.DEFAULT_ARR.length==0);
      Assert.assertTrue(OmniArray.OfRef.DEFAULT_ARR.length==0);
      //TODO uncomment when the module bug is fixed
      //Assert.assertTrue(OmniArray.OfBoolean.DEFAULT_BOXED_ARR.length==0);
      //Assert.assertTrue(OmniArray.OfByte.DEFAULT_BOXED_ARR.length==0);
      //Assert.assertTrue(OmniArray.OfChar.DEFAULT_BOXED_ARR.length==0);
      //Assert.assertTrue(OmniArray.OfShort.DEFAULT_BOXED_ARR.length==0);
      //Assert.assertTrue(OmniArray.OfInt.DEFAULT_BOXED_ARR.length==0);
      //Assert.assertTrue(OmniArray.OfLong.DEFAULT_BOXED_ARR.length==0);
      //Assert.assertTrue(OmniArray.OfFloat.DEFAULT_BOXED_ARR.length==0);
      //Assert.assertTrue(OmniArray.OfDouble.DEFAULT_BOXED_ARR.length==0);
  }
  
  
  #MACRO TestIndexPredicate<char>(Char,CharPredicate,)
  #MACRO TestIndexPredicate<short>(Short,ShortPredicate,)
  #MACRO TestIndexPredicate<int>(Int,IntPredicate,)
  #MACRO TestIndexPredicate<long>(Long,LongPredicate,)
  #MACRO TestIndexPredicate<float>(Float,FloatPredicate,)
  #MACRO TestIndexPredicate<double>(Double,DoublePredicate,)
  /*
  //TODO uncomment when the module bug is fixed
  #MACRO TestIndexPredicate<Double>(Ref,Predicate<Double>,new Double)
  */
#MACRODEF TestIndexPredicate<EXPOSEDTYPE>(CLASSPREFIX,PREDICATETYPE,CREATEVAL)
#IFSWITCH EXPOSEDTYPE==Double
@SuppressWarnings("deprecation")
#ENDIF
@Test
public void testGetIndexPredicateCLASSPREFIX()
{
  var inputPred=new CLASSPREFIXIndexPredicate();
  EXPOSEDTYPE testVal=(EXPOSEDTYPE)CREATEVAL(1);
  OmniArray.OfCLASSPREFIX.getIndexPredicate(inputPred,(EXPOSEDTYPE)CREATEVAL(3),(EXPOSEDTYPE)CREATEVAL(2),testVal).test(2);
  Assert.assertTrue(inputPred.captured==testVal);
}
private static class CLASSPREFIXIndexPredicate implements PREDICATETYPE
{
  EXPOSEDTYPE captured;
  @Override
  public boolean test(EXPOSEDTYPE val)
  {
    captured=val;
    return true;
  }
}
#ENDDEF

  #MACRO TestReverseRange<boolean>(Boolean)
  #MACRO TestReverseRange<byte>(Byte)
  #MACRO TestReverseRange<char>(Char)
  #MACRO TestReverseRange<short>(Short)
  #MACRO TestReverseRange<int>(Int)
  #MACRO TestReverseRange<long>(Long)
  #MACRO TestReverseRange<float>(Float)
  #MACRO TestReverseRange<double>(Double)
  #MACRO TestReverseRange<String>(Ref)
#MACRODEF TestReverseRange<ARRTYPE>(CLASSPREFIX)
@Test
public void testReverseRangeARRTYPE()
{
  Random rand=new Random(0);
  ARRTYPE[] arr=JunitUtil.getUnsortedARRTYPEArray(rand,100);
  ARRTYPE[] copy=new ARRTYPE[arr.length];
  ArrCopy.uncheckedCopy(arr,0,copy,0,arr.length);
  OmniArray.OfCLASSPREFIX.reverseRange(arr,0,arr.length-1);
  
  for(int i=0,j=arr.length-1;i<arr.length;++i,--j)
  {
#IFSWITCH ARRTYPE==boolean,byte,char,short,int,long
    Assert.assertTrue(arr[i]==copy[j]);
#ELSEIFSWITCH ARRTYPE==float,double
    Assert.assertTrue(TypeUtil.ARRTYPEEquals(arr[i],copy[j]));
#ELSE
    Assert.assertTrue(Objects.equals(arr[i],copy[j]));
#ENDIF
  }
}
#ENDDEF

  @Test
  public void testGetFltBitsIndexPredicate()
  {
    var inputPred=new FloatIndexPredicate();
    OmniArray.OfFloat.getFltBitsIndexPredicate(inputPred,Float.floatToRawIntBits(3.0f),Float.floatToRawIntBits(2.0f),Float.floatToRawIntBits(1.0f)).test(2);
    Assert.assertTrue(inputPred.captured==1.0f);
  }
  @Test
  public void testGetDblBitsIndexPredicate()
  {
    var inputPred=new DoubleIndexPredicate();
    OmniArray.OfDouble.getDblBitsIndexPredicate(inputPred,Double.doubleToRawLongBits(3.0),Double.doubleToRawLongBits(2.0),Double.doubleToRawLongBits(1.0)).test(2);
    Assert.assertTrue(inputPred.captured==1.0);
  }
  
  @Test
  public void testNullifyRange()
  {
      String[] arr=new String[]{"a","b","c","d","e","f","g"};
      OmniArray.OfRef.nullifyRange(arr,2,4);
      Assert.assertTrue("a".equals(arr[0]));
      Assert.assertTrue("b".equals(arr[1]));
      Assert.assertTrue(arr[2]==null);
      Assert.assertTrue(arr[3]==null);
      Assert.assertTrue(arr[4]==null);
      Assert.assertTrue("f".equals(arr[5]));
      Assert.assertTrue("g".equals(arr[6]));
  }
}