#TYPEDEF OfGeneric
package omni.util;
import org.junit.Assert;
import org.junit.Test;
import java.util.Random;
import java.util.Arrays;
//TODO uncomment when the module bug is fixed
//import java.util.Comparator;
import java.util.function.IntBinaryOperator;
import omni.function.BooleanComparator;
import omni.function.ByteComparator;
import omni.function.CharComparator;
import omni.function.ShortComparator;
import omni.function.LongComparator;
import omni.function.FloatComparator;
import omni.function.DoubleComparator;
public class SortUtilTest
{
  /*//TODO uncomment when they fix the module bug in eclipse
  #MACRO GetComparator<Ascending,String>(String,Comparator<String>)
  */
  #MACRO GetComparator<Ascending,boolean>(Boolean,BooleanComparator)
  #MACRO GetComparator<Ascending,byte>(Byte,ByteComparator)
  #MACRO GetComparator<Ascending,char>(Character,CharComparator)
  #MACRO GetComparator<Ascending,short>(Short,ShortComparator)
  #MACRO GetComparator<Ascending,int>(Integer,IntBinaryOperator)
  #MACRO GetComparator<Ascending,long>(Long,LongComparator)
  #MACRO GetComparator<Ascending,float>(Float,FloatComparator)
  #MACRO GetComparator<Ascending,double>(Double,DoubleComparator)
  /*//TODO uncomment when they fix the module bug in eclipse
  #MACRO GetComparator<Unsorted,String>(String,Comparator<String>)
  */
  #MACRO GetComparator<Unsorted,boolean>(Boolean,BooleanComparator)
  #MACRO GetComparator<Unsorted,byte>(Byte,ByteComparator)
  #MACRO GetComparator<Unsorted,char>(Character,CharComparator)
  #MACRO GetComparator<Unsorted,short>(Short,ShortComparator)
  #MACRO GetComparator<Unsorted,int>(Integer,IntBinaryOperator)
  #MACRO GetComparator<Unsorted,long>(Long,LongComparator)
  #MACRO GetComparator<Unsorted,float>(Float,FloatComparator)
  #MACRO GetComparator<Unsorted,double>(Double,DoubleComparator)
  /*//TODO uncomment when they fix the module bug in eclipse
  #MACRO GetComparator<Descending,String>(String,Comparator<String>)
  */
  #MACRO GetComparator<Descending,boolean>(Boolean,BooleanComparator)
  #MACRO GetComparator<Descending,byte>(Byte,ByteComparator)
  #MACRO GetComparator<Descending,char>(Character,CharComparator)
  #MACRO GetComparator<Descending,short>(Short,ShortComparator)
  #MACRO GetComparator<Descending,int>(Integer,IntBinaryOperator)
  #MACRO GetComparator<Descending,long>(Long,LongComparator)
  #MACRO GetComparator<Descending,float>(Float,FloatComparator)
  #MACRO GetComparator<Descending,double>(Double,DoubleComparator)
#MACRODEF GetComparator<SORTTYPE,ARRTYPE>(BOXEDTYPE,COMPARATORTYPE)
private static COMPARATORTYPE getSORTTYPEARRTYPEComparator()
{
  return (val1,val2)->
  {
    return
#IFSWITCH SORTTYPE==Descending
      -
#ENDIF
      (
#IFSWITCH SORTTYPE==Unsorted
      0
#ELSE
  #IFSWITCH ARRTYPE==String
    val1.compareTo(val2)
  #ELSE
    BOXEDTYPE.compare(val1,val2)
  #ENDIF
#ENDIF
      );
  };
}
#ENDDEF

  /*//TODO uncomment when they fix the module bug in eclipse
  #MACRO IsSorted<String,Ascending>(String)
  */
  #MACRO IsSorted<boolean,Ascending>(Boolean)
  #MACRO IsSorted<byte,Ascending>(Byte)
  #MACRO IsSorted<char,Ascending>(Character)
  #MACRO IsSorted<short,Ascending>(Short)
  #MACRO IsSorted<int,Ascending>(Integer)
  #MACRO IsSorted<long,Ascending>(Long)
  #MACRO IsSorted<float,Ascending>(Float)
  #MACRO IsSorted<double,Ascending>(Double)
  /*//TODO uncomment when they fix the module bug in eclipse
  #MACRO IsSorted<String,Descending>(String)
  */
  #MACRO IsSorted<boolean,Descending>(Boolean)
  #MACRO IsSorted<byte,Descending>(Byte)
  #MACRO IsSorted<char,Descending>(Character)
  #MACRO IsSorted<short,Descending>(Short)
  #MACRO IsSorted<int,Descending>(Integer)
  #MACRO IsSorted<long,Descending>(Long)
  #MACRO IsSorted<float,Descending>(Float)
  #MACRO IsSorted<double,Descending>(Double)
#MACRODEF IsSorted<ARRTYPE,SORTTYPE>(BOXEDTYPE)
private static boolean isSortedSORTTYPE(ARRTYPE[] arr)
{
  ARRTYPE prev,curr;
  int i;
  for(prev=arr[0],curr=arr[i=1];
  #IFSWITCH ARRTYPE==String
  prev.compareTo(curr)
  #ELSE
  BOXEDTYPE.compare(prev,curr)
  #ENDIF
  #IFSWITCH SORTTYPE==Descending
  >=
  #ELSE
  <=
  #ENDIF
  0
  ;prev=curr,curr=arr[i])
  {
    if(++i==arr.length)
    {
      return true;
    }
  }
  return false;
}
#ENDDEF
  /*//TODO uncomment when they fix the module bug in eclipse
  #MACRO IsSorted<String>(Comparator<? super String>,compare)
  */
  #MACRO IsSorted<boolean>(BooleanComparator,compare)
  #MACRO IsSorted<byte>(ByteComparator,compare)
  #MACRO IsSorted<char>(CharComparator,compare)
  #MACRO IsSorted<short>(ShortComparator,compare)
  #MACRO IsSorted<int>(IntBinaryOperator,applyAsInt)
  #MACRO IsSorted<long>(LongComparator,compare)
  #MACRO IsSorted<float>(FloatComparator,compare)
  #MACRO IsSorted<double>(DoubleComparator,compare)
#MACRODEF IsSorted<ARRTYPE>(COMPARATORTYPE,COMPARATORMETHOD)
private static boolean isSorted(ARRTYPE[] arr,COMPARATORTYPE sorter)
{
  ARRTYPE prev,curr;
  int i;
  for(prev=arr[0],curr=arr[i=1];sorter.COMPARATORMETHOD(prev,curr)<=0;prev=curr,curr=arr[i])
  {
    if(++i==arr.length)
    {
      return true;
    }
  }
  return false;
}
#ENDDEF


  

 


}









