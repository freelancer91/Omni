#TYPEDEF OfGeneric
package omni.util;
import org.junit.jupiter.api.Test;
import java.util.Random;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
public class SortUtilTest
{
  
  #MACRO Fields<true>()

#MACRODEF Fields<LONGRUN>()
#IFSWITCH LONGRUN==true
private static final int[] lengths=new int[]{2, 3, 5, 8, 13, 21, 34, 55, 100, 1000, 10000, 100000, 1000000};
private static final long[] randSeeds=new long[]{666L,0xC0FFEEL,999L};
#ELSE
private static final int[] lengths=new int[]{2, 3, 21, 55, 1000, 10000};
private static final long[] randSeeds=new long[]{666};
#ENDIF

#ENDDEF




  #MACRO TestMethods<boolean,comparatorSort,Ascending,Boolean>()
  #MACRO TestMethods<boolean,comparatorSort,Descending,Boolean>()
  #MACRO TestMethods<boolean,comparatorSort,Unsorted,Boolean>()
  #MACRO TestMethods<boolean,nonComparatorSort,Ascending,Boolean>()
  #MACRO TestMethods<boolean,nonComparatorSort,Descending,Boolean>()
  #MACRO TestMethods<byte,nonComparatorSort,Ascending,Byte>()
  #MACRO TestMethods<byte,nonComparatorSort,Descending,Byte>()
  #MACRO TestMethods<char,nonComparatorSort,Ascending,Char>()
  #MACRO TestMethods<char,nonComparatorSort,Descending,Char>()
  #MACRO TestMethods<short,nonComparatorSort,Ascending,Short>()
  #MACRO TestMethods<short,nonComparatorSort,Descending,Short>()
  #MACRO TestMethods<int,nonComparatorSort,Ascending,Int>()
  #MACRO TestMethods<int,nonComparatorSort,Descending,Int>()
  #MACRO TestMethods<long,nonComparatorSort,Ascending,Long>()
  #MACRO TestMethods<long,nonComparatorSort,Descending,Long>()
  #MACRO TestMethods<float,nonComparatorSort,Ascending,Float>()
  #MACRO TestMethods<float,nonComparatorSort,Descending,Float>()
  #MACRO TestMethods<double,nonComparatorSort,Ascending,Double>()
  #MACRO TestMethods<double,nonComparatorSort,Descending,Double>()


  
  #MACRO TestMethods<byte,comparatorSort,Unsorted,Byte>()
  #MACRO TestMethods<byte,comparatorSort,Ascending,Byte>()
  #MACRO TestMethods<byte,comparatorSort,Descending,Byte>()

  #MACRO TestMethods<char,comparatorSort,Unsorted,Char>()
  #MACRO TestMethods<char,comparatorSort,Ascending,Char>()
  #MACRO TestMethods<char,comparatorSort,Descending,Char>()
  #MACRO TestMethods<short,comparatorSort,Unsorted,Short>()
  #MACRO TestMethods<short,comparatorSort,Ascending,Short>()
  #MACRO TestMethods<short,comparatorSort,Descending,Short>()
  #MACRO TestMethods<int,comparatorSort,Unsorted,Int>()
  #MACRO TestMethods<int,comparatorSort,Ascending,Int>()
  #MACRO TestMethods<int,comparatorSort,Descending,Int>()
  #MACRO TestMethods<long,comparatorSort,Unsorted,Long>()
  #MACRO TestMethods<long,comparatorSort,Ascending,Long>()
  #MACRO TestMethods<long,comparatorSort,Descending,Long>()
  #MACRO TestMethods<float,comparatorSort,Unsorted,Float>()
  #MACRO TestMethods<float,comparatorSort,Ascending,Float>()
  #MACRO TestMethods<float,comparatorSort,Descending,Float>()
  #MACRO TestMethods<double,comparatorSort,Unsorted,Double>()
  #MACRO TestMethods<double,comparatorSort,Ascending,Double>()
  #MACRO TestMethods<double,comparatorSort,Descending,Double>()
  #MACRO TestMethods<Integer,comparatorSort,Unsorted,Ref>()
  #MACRO TestMethods<Integer,comparatorSort,Ascending,Ref>()
  #MACRO TestMethods<Integer,comparatorSort,Descending,Ref>()
  #MACRO TestMethods<Integer,nonComparatorSort,Ascending,Ref>()
  #MACRO TestMethods<Integer,nonComparatorSort,Descending,Ref>()





  #MACRO BuildRandomArrays<boolean>()
  #MACRO BuildRandomArrays<byte>()
  #MACRO BuildRandomArrays<char>()
  #MACRO BuildRandomArrays<short>()
  #MACRO BuildRandomArrays<int>()
  #MACRO BuildRandomArrays<long>()
  #MACRO BuildRandomArrays<float>()
  #MACRO BuildRandomArrays<double>()
  #MACRO BuildRandomArrays<Integer>()





  




}
#MACRODEF TestMethod<ARRAYBUILDER>()
@Test
public void testARRTYPEDIRECTIONSORTTYPEARRAYBUILDERArrayBuilder()
{
  
  RandomArrayContainerARRTYPE  arrs=new RandomArrayContainerARRTYPE();
  System.out.println("Building arrays for testARRTYPEDIRECTIONSORTTYPEARRAYBUILDERArrayBuilder");
  IntStream.of(lengths).parallel().forEach(arrLength->
  {
    if(JunitUtil.ARRTYPEArrayBuilder.ARRAYBUILDER.isRandomized())
    {
      LongStream.of(randSeeds).parallel().forEach(randSeed->
      {
        arrs.addArrays(randSeed,arrLength,JunitUtil.ARRTYPEArrayBuilder.ARRAYBUILDER);
      });
      
    }
    else
    {
      arrs.addArrays(0,arrLength,JunitUtil.ARRTYPEArrayBuilder.ARRAYBUILDER);
    }
  });
  System.out.println("Built "+arrs.size()+" arrays");
#IFSWITCH SORTTYPE==comparatorSort
  var sorter=JunitUtil.getDIRECTIONARRTYPEComparator();
#ENDIF
  arrs.stream().parallel().forEach(arr->
  {
    int arrLength;
    ARRTYPE[] copy;
    ArrCopy.uncheckedCopy(arr,0,copy=new ARRTYPE[arrLength=arr.length],0,arrLength);
    #MACRO CallCustomSorter(arr,arrLength,sorter)
    #MACRO CallStockSorter(copy,arrLength)
    JunitUtil.uncheckedassertarraysAreEqual(arr,0,copy,0,arrLength);
  });
}
#ENDDEF
#MACRODEF TestMethods<ARRTYPE,SORTTYPE,DIRECTION,CLASSPREFIX>()
#MACRO TestMethod<Randomized>()
#MACRO TestMethod<Ascending>()
#MACRO TestMethod<Descending>()
#MACRO TestMethod<AllEquals>()
#IFNOTSWITCH ARRTYPE==boolean
#MACRO TestMethod<MergeAscending>()
#MACRO TestMethod<MergeDescending>()
#MACRO TestMethod<Saw>()
#MACRO TestMethod<SortedRepeated>()
#MACRO TestMethod<Repeated>()
#MACRO TestMethod<Duplicated>()
#MACRO TestMethod<SortedOrganPipes>()
#MACRO TestMethod<OrganPipes>()
#MACRO TestMethod<Stagger>()
#MACRO TestMethod<Plateau>()
#MACRO TestMethod<Shuffle>()
  #IFSWITCH ARRTYPE==float,double
#MACRO TestMethod<WithNaNsAndZeros>()
  #ENDIF
#ENDIF
#ENDDEF

#MACRODEF BuildRandomArrays<ARRTYPE>()
private static class RandomArrayContainerARRTYPE extends ArrayList<ARRTYPE[]>
{
  private static final long serialVersionUID=1L;
  private RandomArrayContainerARRTYPE()
  {
    super(13);
  }
  
  private void addArrays(long randSeed,int arrLength,JunitUtil.ARRTYPEArrayBuilder builder)
  {
    Random rand=new Random(randSeed);
    for(int m=getMLo(builder),mHi=getMHi(builder,arrLength),numReps=getNumReps(builder,arrLength);m<=mHi;m=incrementM(builder,m))
    {
      for(int i=0;i<numReps;++i)
      {
        ARRTYPE[] arr=new ARRTYPE[arrLength];
        builder.build(arr,rand,m);
        synchronized(this)
        {
          super.add(arr);
        }
      }
    }
  }
}

private static int getMLo(JunitUtil.ARRTYPEArrayBuilder builder)
{
  switch(builder)
  {
    case AllEquals:
      return 0;
#IFNOTSWITCH ARRTYPE==boolean
    case MergeAscending:
    case MergeDescending:
      return 65;
#ENDIF
    default:
      return 1;
  }
}
private static int getMHi(JunitUtil.ARRTYPEArrayBuilder builder,int arrLength)
{
  switch(builder)
  {
#IFNOTSWITCH ARRTYPE==boolean
    case Ascending:
    case Descending:
    case Saw:
    case Repeated:
    case Duplicated:
    case OrganPipes:
    case Stagger:
    case Plateau:
      return (2*arrLength)-1;
    case AllEquals:
      return 0;
    case MergeAscending:
    case MergeDescending:
      return 69;
    case SortedRepeated:
    case SortedOrganPipes:
      return Math.min(arrLength,7);
#ENDIF
    default:
      return 1;
  }
}
private static int getNumReps(JunitUtil.ARRTYPEArrayBuilder builder,int arrLength)
{
  if(builder.isRandomized())
  {
    return 10;
  }
  return 1;
  /*
#IFSWITCH ARRTYPE==char,short
  if(builder.isRandomized())
  {
    if(arrLength>3201 || arrLength<47)
      {
        return 1;
      }
      return 7;
  }
#ELSEIFSWITCH ARRTYPE==float,double
  if(builder==JunitUtil.ARRTYPEArrayBuilder.WithNaNsAndZeros)
  {
    return 2;
  }
#ENDIF
  return 1;
  */
}
private static int incrementM(JunitUtil.ARRTYPEArrayBuilder builder,int m)
{
  switch(builder)
  {
#IFNOTSWITCH ARRTYPE==boolean
    case Ascending:
    case Descending:
    case Saw:
    case Repeated:
    case Duplicated:
    case OrganPipes:
    case Stagger:
    case Plateau:
      return m*2;
#ENDIF
    default:
      return m+1;
  }
}

#ENDDEF
#MACRODEF CallStockSorter(copy,arrLength)
{
#IFNOTSWITCH DIRECTION==Unsorted
  #IFSWITCH ARRTYPE==boolean
  Boolean[] boxedCopy=new Boolean[arrLength];
  ArrCopy.uncheckedCopy(copy,0,boxedCopy=new Boolean[arrLength],0,arrLength);
  Arrays.sort(boxedCopy,0,arrLength);
  ArrCopy.uncheckedCopy(boxedCopy,0,copy,0,arrLength);
  #ELSE
  Arrays.sort(copy,0,arrLength);
  #ENDIF
  #IFSWITCH DIRECTION==Descending
  OmniArray.OfCLASSPREFIX.reverseRange(copy,0,arrLength-1);
  #ENDIF
#ENDIF
}
#ENDDEF
#MACRODEF CallCustomSorter(arr,arrLength,sorter)
{
#IFSWITCH SORTTYPE==comparatorSort
  #IFSWITCH ARRTYPE==byte,char,short,int,long,float,double
  SortUtil.comparatorSortARRTYPETimSort.uncheckedsort(arr,0,arrLength,sorter);
  #ELSEIFSWITCH ARRTYPE==boolean
  SortUtil.uncheckedcomparatorSort(arr,0,arrLength-1,sorter);
  #ELSE
  SortUtil.comparatorSortObjectTimSort.uncheckedsort(arr,0,arrLength,sorter);
  #ENDIF
#ELSE
  #IFSWITCH ARRTYPE==boolean,byte,char,short,int,long,float,double
    #IFSWITCH DIRECTION==Ascending
  SortUtil.uncheckedsort(arr,0,arrLength-1);
    #ELSE
  SortUtil.uncheckedreverseSort(arr,0,arrLength-1);
    #ENDIF
  #ELSE
    #IFSWITCH DIRECTION==Ascending
  SortUtil.sortObjectTimSort.uncheckedsort(arr,0,arrLength);
    #ELSE
  SortUtil.reverseSortObjectTimSort.uncheckedsort(arr,0,arrLength);
    #ENDIF
  #ENDIF
#ENDIF
}
#ENDDEF