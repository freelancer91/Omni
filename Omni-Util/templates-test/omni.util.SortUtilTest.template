#TYPEDEF OfGeneric
package omni.util;
import org.junit.jupiter.api.Test;
import java.util.Random;
import java.util.Arrays;
import java.util.Comparator;
import java.util.stream.LongStream;
import java.util.function.IntBinaryOperator;
import omni.function.BooleanComparator;
import omni.function.ByteComparator;
import omni.function.CharComparator;
import omni.function.ShortComparator;
import omni.function.LongComparator;
import omni.function.FloatComparator;
import omni.function.DoubleComparator;
public class SortUtilTest
{
  
  #MACRO Fields<true>()

#MACRODEF Fields<LONGRUN>()
#IFSWITCH LONGRUN==true
//private static final int[] lengths=new int[]{34};
//private static final int[] lengths=new int[]{2,3,5,8,13,21};
private static final int[] lengths=new int[]{2, 3, 5, 8, 13, 21, 34, 55, 100, 1000, 10000, 100000, 1000000,Integer.MAX_VALUE-8};
private static final long[] randSeeds=new long[]{666L,0xC0FFEEL,999L};
#ELSE
private static final int[] lengths=new int[]{2, 3, 21, 55, 1000, 10000};
private static final long[] randSeeds=new long[]{666};
#ENDIF

#ENDDEF



  #MACRO IsSortedMethods<true>()

#MACRODEF IsSortedMethods<PARALLEL>()
#MACRO IsSorted<Integer,Ascending>(Integer,Ref)
#MACRO IsSorted<String,Ascending>(String,Ref)
#MACRO IsSorted<boolean,Ascending>(Boolean,Boolean)
#MACRO IsSorted<byte,Ascending>(Byte,Byte)
#MACRO IsSorted<char,Ascending>(Character,Char)
#MACRO IsSorted<short,Ascending>(Short,Short)
#MACRO IsSorted<int,Ascending>(Integer,Int)
#MACRO IsSorted<long,Ascending>(Long,Long)
#MACRO IsSorted<float,Ascending>(Float,Float)
#MACRO IsSorted<double,Ascending>(Double,Double)
#MACRO IsSorted<Integer,Descending>(Integer,Ref)
#MACRO IsSorted<String,Descending>(String,Ref)
#MACRO IsSorted<boolean,Descending>(Boolean,Boolean)
#MACRO IsSorted<byte,Descending>(Byte,Byte)
#MACRO IsSorted<char,Descending>(Character,Char)
#MACRO IsSorted<short,Descending>(Short,Short)
#MACRO IsSorted<int,Descending>(Integer,Int)
#MACRO IsSorted<long,Descending>(Long,Long)
#MACRO IsSorted<float,Descending>(Float,Float)
#MACRO IsSorted<double,Descending>(Double,Double)
#MACRO IsSorted<Integer>(Comparator<? super Integer>,compare,Integer)
#MACRO IsSorted<String>(Comparator<? super String>,compare,String)
#MACRO IsSorted<boolean>(BooleanComparator,compare,Boolean)
#MACRO IsSorted<byte>(ByteComparator,compare,Byte)
#MACRO IsSorted<char>(CharComparator,compare,Character)
#MACRO IsSorted<short>(ShortComparator,compare,Short)
#MACRO IsSorted<int>(IntBinaryOperator,applyAsInt,Integer)
#MACRO IsSorted<long>(LongComparator,compare,Long)
#MACRO IsSorted<float>(FloatComparator,compare,Float)
#MACRO IsSorted<double>(DoubleComparator,compare,Double)
#ENDDEF


#MACRODEF IsSorted<ARRTYPE,SORTTYPE>(BOXEDTYPE,CLASSPREFIX)
private static void isSortedSORTTYPE(ARRTYPE[] arr,ARRTYPE[] copy)
{
#IFSWITCH ARRTYPE==double,float,long,int,short,char,byte,boolean
  #IFSWITCH SORTTYPE==Ascending
  SortUtil.uncheckedsort(arr,0,arr.length-1);
  #ELSE
  SortUtil.uncheckedreverseSort(arr,0,arr.length-1);
  #ENDIF
#ELSE
  #IFSWITCH SORTTYPE==Ascending
  SortUtil.sortObjectTimSort.uncheckedsort(arr,0,arr.length);
  #ELSE
  SortUtil.reverseSortObjectTimSort.uncheckedsort(arr,0,arr.length);
  #ENDIF
#ENDIF
  //Thread stockSorterThread=new Thread(()->
  //{
#IFSWITCH ARRTYPE==boolean
  BOXEDTYPE[] boxedCopy=new BOXEDTYPE[copy.length];
  ArrCopy.uncheckedCopy(copy,0,boxedCopy,0,copy.length);
  Arrays.sort(boxedCopy,0,copy.length);
  ArrCopy.uncheckedCopy(boxedCopy,0,copy,0,copy.length);
#ELSE
  Arrays.sort(copy,0,copy.length);
#ENDIF
#IFSWITCH SORTTYPE==Descending
  OmniArray.OfCLASSPREFIX.reverseRange(copy,0,copy.length-1);
#ENDIF
  //});
  //stockSorterThread.start();

  //try
  //{
  //  stockSorterThread.join();
  //}
  //catch(InterruptedException e)
  //{
  //  throw new AssertionError(e);
  //}
  #IFSWITCH PARALLEL==true
  JunitUtil.uncheckedparallelassertarraysAreEqual(arr,0,copy,0,copy.length);
  #ELSE
  JunitUtil.uncheckedassertarraysAreEqual(arr,0,copy,0,copy.length);
  #ENDIF
}
#ENDDEF
 
#MACRODEF IsSorted<ARRTYPE>(COMPARATORTYPE,COMPARATORMETHOD,BOXEDTYPE)
private static void isSorted(ARRTYPE[] arr,ARRTYPE[] copy,COMPARATORTYPE sorter)
{
  Thread stockSorterThread=new Thread(()->
  {
#IFSWITCH ARRTYPE==Integer,String
  Arrays.sort(copy,0,copy.length,sorter);
#ELSE
  BOXEDTYPE[] boxedCopy=new BOXEDTYPE[copy.length];
  ArrCopy.uncheckedCopy(copy,0,boxedCopy,0,copy.length);
  Arrays.sort(boxedCopy,0,copy.length,sorter::COMPARATORMETHOD);
  ArrCopy.uncheckedCopy(boxedCopy,0,copy,0,copy.length);
#ENDIF
  });
  stockSorterThread.start();
#IFSWITCH ARRTYPE==Integer,String
  SortUtil.comparatorSortObjectTimSort.uncheckedsort(arr,0,arr.length,sorter);
#ELSEIFSWITCH ARRTYPE==boolean
  SortUtil.uncheckedcomparatorSort(arr,0,arr.length-1,sorter);
#ELSE
  SortUtil.comparatorSortARRTYPETimSort.uncheckedsort(arr,0,arr.length,sorter);
#ENDIF
  try
  {
    stockSorterThread.join();
  }
  catch(InterruptedException e)
  {
    throw new AssertionError(e);
  }
  #IFSWITCH PARALLEL==true
  JunitUtil.uncheckedparallelassertarraysAreEqual(arr,0,copy,0,copy.length);
  #ELSE
  JunitUtil.uncheckedassertarraysAreEqual(arr,0,copy,0,copy.length);
  #ENDIF
}
#ENDDEF

  #MACRO BuilderMethods<boolean>()
  #MACRO BuilderMethods<byte>()
  #MACRO BuilderMethods<char>()
  #MACRO BuilderMethods<short>()
  #MACRO BuilderMethods<int>()
  #MACRO BuilderMethods<long>()
  #MACRO BuilderMethods<float>()
  #MACRO BuilderMethods<double>()
  #MACRO BuilderMethods<Integer>()
  #MACRO BuilderMethods<String>()
#MACRODEF BuilderMethods<ARRTYPE>()
private static int getMLo(JunitUtil.ARRTYPEArrayBuilder builder)
{
  switch(builder)
  {
    case AllEquals:
      return 0;
#IFNOTSWITCH ARRTYPE==boolean
    case MergeAscending:
    case MergeDescending:
      return 65;
#ENDIF
    default:
      return 1;
  }
}
private static int getMHi(JunitUtil.ARRTYPEArrayBuilder builder,int arrLength)
{
  switch(builder)
  {
#IFNOTSWITCH ARRTYPE==boolean
    case Ascending:
    case Descending:
    case Saw:
    case Repeated:
    case Duplicated:
    case OrganPipes:
    case Stagger:
    case Plateau:
      return (2*arrLength)-1;
    case AllEquals:
      return 0;
    case MergeAscending:
    case MergeDescending:
      return 69;
    case SortedRepeated:
    case SortedOrganPipes:
      return Math.min(arrLength,7);
#ENDIF
    default:
      return 1;
  }
}
private static int getNumReps(JunitUtil.ARRTYPEArrayBuilder builder,int arrLength)
{
#IFSWITCH ARRTYPE==char,short
  if(builder.isRandomized())
  {
    if(arrLength>3201 || arrLength<47)
      {
        return 1;
      }
      return 7;
  }
#ELSEIFSWITCH ARRTYPE==float,double
  if(builder==JunitUtil.ARRTYPEArrayBuilder.WithNaNsAndZeros)
  {
    return 2;
  }
#ENDIF
  return 1;
}
private static int incrementM(JunitUtil.ARRTYPEArrayBuilder builder,int m)
{
  switch(builder)
  {
#IFNOTSWITCH ARRTYPE==boolean
    case Ascending:
    case Descending:
    case Saw:
    case Repeated:
    case Duplicated:
    case OrganPipes:
    case Stagger:
    case Plateau:
      return m*2;
#ENDIF
    default:
      return m+1;
  }
}
#ENDDEF
/*
  #MACRO TestMethods<boolean,comparatorSort,Ascending>()
  #MACRO TestMethods<boolean,comparatorSort,Descending>()
  #MACRO TestMethods<boolean,comparatorSort,Unsorted>()
  #MACRO TestMethods<boolean,nonComparatorSort,Ascending>()
  #MACRO TestMethods<boolean,nonComparatorSort,Descending>()
  #MACRO TestMethods<byte,nonComparatorSort,Ascending>()
  #MACRO TestMethods<byte,nonComparatorSort,Descending>()
  #MACRO TestMethods<char,nonComparatorSort,Ascending>()
  #MACRO TestMethods<char,nonComparatorSort,Descending>()
  #MACRO TestMethods<short,nonComparatorSort,Ascending>()
  #MACRO TestMethods<short,nonComparatorSort,Descending>()
  #MACRO TestMethods<int,nonComparatorSort,Ascending>()
  #MACRO TestMethods<int,nonComparatorSort,Descending>()
  #MACRO TestMethods<long,nonComparatorSort,Ascending>()
  #MACRO TestMethods<long,nonComparatorSort,Descending>()
  #MACRO TestMethods<float,nonComparatorSort,Ascending>()
  #MACRO TestMethods<float,nonComparatorSort,Descending>()
  #MACRO TestMethods<double,nonComparatorSort,Ascending>()
  #MACRO TestMethods<double,nonComparatorSort,Descending>()
*/
  
  #MACRO TestMethods<byte,comparatorSort,Unsorted>()
  #MACRO TestMethods<byte,comparatorSort,Ascending>()
  #MACRO TestMethods<byte,comparatorSort,Descending>()
  /*
  #MACRO TestMethods<char,comparatorSort,Unsorted>()
  #MACRO TestMethods<char,comparatorSort,Ascending>()
  #MACRO TestMethods<char,comparatorSort,Descending>()
  #MACRO TestMethods<short,comparatorSort,Unsorted>()
  #MACRO TestMethods<short,comparatorSort,Ascending>()
  #MACRO TestMethods<short,comparatorSort,Descending>()
  #MACRO TestMethods<int,comparatorSort,Unsorted>()
  #MACRO TestMethods<int,comparatorSort,Ascending>()
  #MACRO TestMethods<int,comparatorSort,Descending>()
  #MACRO TestMethods<long,comparatorSort,Unsorted>()
  #MACRO TestMethods<long,comparatorSort,Ascending>()
  #MACRO TestMethods<long,comparatorSort,Descending>()
  #MACRO TestMethods<float,comparatorSort,Unsorted>()
  #MACRO TestMethods<float,comparatorSort,Ascending>()
  #MACRO TestMethods<float,comparatorSort,Descending>()
  #MACRO TestMethods<double,comparatorSort,Unsorted>()
  #MACRO TestMethods<double,comparatorSort,Ascending>()
  #MACRO TestMethods<double,comparatorSort,Descending>()
  #MACRO TestMethods<Integer,comparatorSort,Unsorted>()
  #MACRO TestMethods<Integer,comparatorSort,Ascending>()
  #MACRO TestMethods<Integer,comparatorSort,Descending>()
  #MACRO TestMethods<Integer,nonComparatorSort,Ascending>()
  #MACRO TestMethods<Integer,nonComparatorSort,Descending>()
  */


#MACRODEF TestMethods<ARRTYPE,SORTTYPE,DIRECTION>()
private static void testARRTYPEDIRECTIONSORTTYPEHelper(JunitUtil.ARRTYPEArrayBuilder builder,int arrLength,long randSeed)
{
  ARRTYPE[] golden=new ARRTYPE[arrLength];
  ARRTYPE[] test=new ARRTYPE[arrLength];
  Random rand=new Random(randSeed);
#IFSWITCH SORTTYPE==comparatorSort
  var sorter=JunitUtil.getDIRECTIONARRTYPEComparator();
#ENDIF
  for(int m=getMLo(builder),mHi=getMHi(builder,arrLength),numReps=getNumReps(builder,arrLength);m<=mHi;m=incrementM(builder,m))
  {
    for(int i=0;i<numReps;++i)
    {
      builder.build(golden,rand,m);
      ArrCopy.uncheckedCopy(golden,0,test,0,arrLength);
#IFSWITCH SORTTYPE==comparatorSort
      isSorted(test,golden,sorter);
#ELSE
      isSortedDIRECTION(test,golden);
#ENDIF
    }
  }
}
#MACRO TestMethod<Randomized>()
#MACRO TestMethod<Ascending>()
#MACRO TestMethod<Descending>()
#MACRO TestMethod<AllEquals>()
#IFNOTSWITCH ARRTYPE==boolean
#MACRO TestMethod<MergeAscending>()
#MACRO TestMethod<MergeDescending>()
#MACRO TestMethod<Saw>()
#MACRO TestMethod<SortedRepeated>()
#MACRO TestMethod<Repeated>()
#MACRO TestMethod<Duplicated>()
#MACRO TestMethod<SortedOrganPipes>()
#MACRO TestMethod<OrganPipes>()
#MACRO TestMethod<Stagger>()
#MACRO TestMethod<Plateau>()
#MACRO TestMethod<Shuffle>()
  #IFSWITCH ARRTYPE==float,double
#MACRO TestMethod<WithNaNsAndZeros>()
  #ENDIF
#ENDIF
#ENDDEF

#MACRODEF TestMethod<ARRAYBUILDER>()
@Test
public void testARRTYPEDIRECTIONSORTTYPEARRAYBUILDERArrayBuilder()
{
  for(int i=0;i<lengths.length;++i)
  {
    final int arrLength=lengths[i];
    System.out.println("testARRTYPEDIRECTIONSORTTYPEARRAYBUILDERArrayBuilder length = "+arrLength);
   if(JunitUtil.ARRTYPEArrayBuilder.ARRAYBUILDER.isRandomized())
   {
      var stream=LongStream.of(randSeeds);
     if(false)
     {
       stream=stream.parallel();
     }
     stream.forEach(randSeed->
     {
       testARRTYPEDIRECTIONSORTTYPEHelper(JunitUtil.ARRTYPEArrayBuilder.ARRAYBUILDER,arrLength,randSeed);
     });
   }
   else
   {
     testARRTYPEDIRECTIONSORTTYPEHelper(JunitUtil.ARRTYPEArrayBuilder.ARRAYBUILDER,arrLength,0);
    
   }
  }
}
#ENDDEF





}