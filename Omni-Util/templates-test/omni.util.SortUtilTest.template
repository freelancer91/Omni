#TYPEDEF OfGeneric
package omni.util;
import org.junit.jupiter.api.Test;
import java.util.Random;
import java.util.Arrays;
import java.util.Comparator;
import java.util.stream.LongStream;
import java.util.function.IntBinaryOperator;
import omni.function.BooleanComparator;
import omni.function.ByteComparator;
import omni.function.CharComparator;
import omni.function.ShortComparator;
import omni.function.LongComparator;
import omni.function.FloatComparator;
import omni.function.DoubleComparator;
public class SortUtilTest
{
  
  #MACRO Fields<true>()

#MACRODEF Fields<LONGRUN>()
#IFSWITCH LONGRUN==true
private static final int[] lengths=new int[]{2, 3, 5, 8, 13, 21, 34, 55, 100, 1000, 10000, 100000, 1000000};
private static final long[] randSeeds=new long[]{666L,0xC0FFEEL,999L};
#ELSE
private static final int[] lengths=new int[]{2, 3, 21, 55, 1000, 10000};
private static final long[] randSeeds=new long[]{666};
#ENDIF

#ENDDEF

  #MACRO GetComparator<Ascending,String>(String,Comparator<String>)
  #MACRO GetComparator<Ascending,boolean>(Boolean,BooleanComparator)
  #MACRO GetComparator<Ascending,byte>(Byte,ByteComparator)
  #MACRO GetComparator<Ascending,char>(Character,CharComparator)
  #MACRO GetComparator<Ascending,short>(Short,ShortComparator)
  #MACRO GetComparator<Ascending,int>(Integer,IntBinaryOperator)
  #MACRO GetComparator<Ascending,long>(Long,LongComparator)
  #MACRO GetComparator<Ascending,float>(Float,FloatComparator)
  #MACRO GetComparator<Ascending,double>(Double,DoubleComparator)
  #MACRO GetComparator<Unsorted,String>(String,Comparator<String>)
  #MACRO GetComparator<Unsorted,boolean>(Boolean,BooleanComparator)
  #MACRO GetComparator<Unsorted,byte>(Byte,ByteComparator)
  #MACRO GetComparator<Unsorted,char>(Character,CharComparator)
  #MACRO GetComparator<Unsorted,short>(Short,ShortComparator)
  #MACRO GetComparator<Unsorted,int>(Integer,IntBinaryOperator)
  #MACRO GetComparator<Unsorted,long>(Long,LongComparator)
  #MACRO GetComparator<Unsorted,float>(Float,FloatComparator)
  #MACRO GetComparator<Unsorted,double>(Double,DoubleComparator)
  #MACRO GetComparator<Descending,String>(String,Comparator<String>)
  #MACRO GetComparator<Descending,boolean>(Boolean,BooleanComparator)
  #MACRO GetComparator<Descending,byte>(Byte,ByteComparator)
  #MACRO GetComparator<Descending,char>(Character,CharComparator)
  #MACRO GetComparator<Descending,short>(Short,ShortComparator)
  #MACRO GetComparator<Descending,int>(Integer,IntBinaryOperator)
  #MACRO GetComparator<Descending,long>(Long,LongComparator)
  #MACRO GetComparator<Descending,float>(Float,FloatComparator)
  #MACRO GetComparator<Descending,double>(Double,DoubleComparator)
#MACRODEF GetComparator<SORTTYPE,ARRTYPE>(BOXEDTYPE,COMPARATORTYPE)
private static COMPARATORTYPE getSORTTYPEARRTYPEComparator()
{
  return (val1,val2)->
  {
    return
#IFSWITCH SORTTYPE==Descending
      -
#ENDIF
      (
#IFSWITCH SORTTYPE==Unsorted
      0
#ELSE
  #IFSWITCH ARRTYPE==String
    val1.compareTo(val2)
  #ELSE
    BOXEDTYPE.compare(val1,val2)
  #ENDIF
#ENDIF
      );
  };
}
#ENDDEF

  #MACRO IsSortedMethods<false>()

#MACRODEF IsSortedMethods<PARALLEL>()
#MACRO IsSorted<String,sort>(String,Ref)
#MACRO IsSorted<boolean,sort>(Boolean,Boolean)
#MACRO IsSorted<byte,sort>(Byte,Byte)
#MACRO IsSorted<char,sort>(Character,Char)
#MACRO IsSorted<short,sort>(Short,Short)
#MACRO IsSorted<int,sort>(Integer,Int)
#MACRO IsSorted<long,sort>(Long,Long)
#MACRO IsSorted<float,sort>(Float,Float)
#MACRO IsSorted<double,sort>(Double,Double)
#MACRO IsSorted<String,reverseSort>(String,Ref)
#MACRO IsSorted<boolean,reverseSort>(Boolean,Boolean)
#MACRO IsSorted<byte,reverseSort>(Byte,Byte)
#MACRO IsSorted<char,reverseSort>(Character,Char)
#MACRO IsSorted<short,reverseSort>(Short,Short)
#MACRO IsSorted<int,reverseSort>(Integer,Int)
#MACRO IsSorted<long,reverseSort>(Long,Long)
#MACRO IsSorted<float,reverseSort>(Float,Float)
#MACRO IsSorted<double,reverseSort>(Double,Double)
#MACRO IsSorted<String>(Comparator<? super String>,compare,String)
#MACRO IsSorted<boolean>(BooleanComparator,compare,Boolean)
#MACRO IsSorted<byte>(ByteComparator,compare,Byte)
#MACRO IsSorted<char>(CharComparator,compare,Character)
#MACRO IsSorted<short>(ShortComparator,compare,Short)
#MACRO IsSorted<int>(IntBinaryOperator,applyAsInt,Integer)
#MACRO IsSorted<long>(LongComparator,compare,Long)
#MACRO IsSorted<float>(FloatComparator,compare,Float)
#MACRO IsSorted<double>(DoubleComparator,compare,Double)
#ENDDEF


#MACRODEF IsSorted<ARRTYPE,SORTTYPE>(BOXEDTYPE,CLASSPREFIX)
private static void isSortedSORTTYPE(ARRTYPE[] arr,ARRTYPE[] copy)
{
  Thread stockSorterThread=new Thread(()->
  {
#IFSWITCH ARRTYPE==boolean
  BOXEDTYPE[] boxedCopy=new BOXEDTYPE[copy.length];
  ArrCopy.uncheckedCopy(copy,0,boxedCopy,0,copy.length);
  Arrays.sort(boxedCopy,0,copy.length);
  ArrCopy.uncheckedCopy(boxedCopy,0,copy,0,copy.length);
#ELSE
  Arrays.sort(copy,0,copy.length);
#ENDIF
#IFSWITCH SORTTYPE==reverseSort
  OmniArray.OfCLASSPREFIX.reverseRange(copy,0,copy.length-1);
#ENDIF
  });
  stockSorterThread.start();
  SortUtil.uncheckedSORTTYPE(arr,0,arr.length-1);
  try
  {
    stockSorterThread.join();
  }
  catch(InterruptedException e)
  {
    throw new AssertionError(e);
  }
  #IFSWITCH PARALLEL==true
  JunitUtil.uncheckedparallelassertarraysAreEqual(arr,0,copy,0,copy.length);
  #ELSE
  JunitUtil.uncheckedassertarraysAreEqual(arr,0,copy,0,copy.length);
  #ENDIF
}
#ENDDEF
 
#MACRODEF IsSorted<ARRTYPE>(COMPARATORTYPE,COMPARATORMETHOD,BOXEDTYPE)
private static void isSorted(ARRTYPE[] arr,ARRTYPE[] copy,COMPARATORTYPE sorter)
{
  Thread stockSorterThread=new Thread(()->
  {
#IFSWITCH ARRTYPE==String
  Arrays.parallelSort(copy,0,copy.length,sorter);
#ELSE
  BOXEDTYPE[] boxedCopy=new BOXEDTYPE[copy.length];
  ArrCopy.uncheckedCopy(copy,0,boxedCopy,0,copy.length);
  Arrays.parallelSort(boxedCopy,0,copy.length,sorter::COMPARATORMETHOD);
  ArrCopy.uncheckedCopy(boxedCopy,0,copy,0,copy.length);
#ENDIF
  });
  stockSorterThread.start();
  SortUtil.uncheckedcomparatorSort(arr,0,arr.length-1,sorter);
  try
  {
    stockSorterThread.join();
  }
  catch(InterruptedException e)
  {
    throw new AssertionError(e);
  }
  #IFSWITCH PARALLEL==true
  JunitUtil.uncheckedparallelassertarraysAreEqual(arr,0,copy,0,copy.length);
  #ELSE
  JunitUtil.uncheckedassertarraysAreEqual(arr,0,copy,0,copy.length);
  #ENDIF
}
#ENDDEF

  #MACRO BuilderMethods<boolean>()
  #MACRO BuilderMethods<byte>()
  #MACRO BuilderMethods<char>()
  #MACRO BuilderMethods<short>()
  #MACRO BuilderMethods<int>()
  #MACRO BuilderMethods<long>()
  #MACRO BuilderMethods<float>()
  #MACRO BuilderMethods<double>()
  #MACRO BuilderMethods<String>()
#MACRODEF BuilderMethods<ARRTYPE>()
private static int getMLo(JunitUtil.ARRTYPEArrayBuilder builder)
{
  switch(builder)
  {
    case AllEquals:
      return 0;
#IFNOTSWITCH ARRTYPE==boolean
    case MergeAscending:
    case MergeDescending:
      return 65;
#ENDIF
    default:
      return 1;
  }
}
private static int getMHi(JunitUtil.ARRTYPEArrayBuilder builder,int arrLength)
{
  switch(builder)
  {
#IFNOTSWITCH ARRTYPE==boolean
    case Ascending:
    case Descending:
    case Saw:
    case Repeated:
    case Duplicated:
    case OrganPipes:
    case Stagger:
    case Plateau:
      return (2*arrLength)-1;
    case AllEquals:
      return 0;
    case MergeAscending:
    case MergeDescending:
      return 69;
    case SortedRepeated:
    case SortedOrganPipes:
      return Math.min(arrLength,7);
#ENDIF
    default:
      return 1;
  }
}
private static int getNumReps(JunitUtil.ARRTYPEArrayBuilder builder,int arrLength)
{
#IFSWITCH ARRTYPE==char,short
  if(builder.isRandomized())
  {
    if(arrLength>3201 || arrLength<47)
      {
        return 1;
      }
      return 7;
  }
#ELSEIFSWITCH ARRTYPE==float,double
  if(builder==JunitUtil.ARRTYPEArrayBuilder.WithNaNsAndZeros)
  {
    return 2;
  }
#ENDIF
  return 1;
}
private static int incrementM(JunitUtil.ARRTYPEArrayBuilder builder,int m)
{
  switch(builder)
  {
#IFNOTSWITCH ARRTYPE==boolean
    case Ascending:
    case Descending:
    case Saw:
    case Repeated:
    case Duplicated:
    case OrganPipes:
    case Stagger:
    case Plateau:
      return m*2;
#ENDIF
    default:
      return m+1;
  }
}
#ENDDEF

  #MACRO BasicSortTest<boolean,sort>()
  #MACRO BasicSortTest<boolean,reverseSort>()
  
  #MACRO BasicSortTest<byte,sort>()
  #MACRO BasicSortTest<byte,reverseSort>()
  
  #MACRO BasicSortTest<char,sort>()
  #MACRO BasicSortTest<char,reverseSort>()
  
  #MACRO BasicSortTest<short,sort>()
  #MACRO BasicSortTest<short,reverseSort>()

  #MACRO BasicSortTest<int,sort>()
  #MACRO BasicSortTest<int,reverseSort>()
  
  #MACRO BasicSortTest<long,sort>()
  #MACRO BasicSortTest<long,reverseSort>()

  #MACRO BasicSortTest<float,sort>()
  #MACRO BasicSortTest<float,reverseSort>()
  
  #MACRO BasicSortTest<double,sort>()
  #MACRO BasicSortTest<double,reverseSort>()

#MACRODEF BasicSortTest<ARRTYPE,SORTTYPE>()
private static void testuncheckedSORTTYPEARRTYPEHelper(long randSeed,int arrLength)
{
  ARRTYPE[] golden=new ARRTYPE[arrLength];
  ARRTYPE[] test=new ARRTYPE[arrLength];
  Random rand=new Random(randSeed);
  
  for(JunitUtil.ARRTYPEArrayBuilder builder:JunitUtil.ARRTYPEArrayBuilder.values())
  {
    for(int m=getMLo(builder),mHi=getMHi(builder,arrLength),numReps=getNumReps(builder,arrLength);m<=mHi;m=incrementM(builder,m))
    {
      //System.out.println("sortType = SORTTYPE; arrType = ARRTYPE; randSeed= "+randSeed+"; length= "+arrLength+"; builder type "+builder+"; m = "+m);
      for(int i=0;i<numReps;++i)
      {
        builder.build(golden,rand,m);
        ArrCopy.uncheckedCopy(golden,0,test,0,arrLength);
        isSortedSORTTYPE(test,golden);
      }
    }
  }
}
@Test
public void testuncheckedSORTTYPEARRTYPE()
{
#IFSWITCH ARRTYPE==boolean,byte
  testuncheckedSORTTYPEARRTYPEHelper(0,30);
  #IFSWITCH ARRTYPE==byte
  testuncheckedSORTTYPEARRTYPEHelper(0,31);
  #ENDIF
#ELSE
  

  for(int i=0;i<lengths.length;++i)
  {
    
    final int arrLength=lengths[i];
    System.out.println("testuncheckedSORTTYPEARRTYPE length = "+arrLength);
    var stream=LongStream.of(randSeeds);
    //if(true)
    {
      stream=stream.parallel();
    }
    stream.forEach(randSeed->
    {
      testuncheckedSORTTYPEARRTYPEHelper(randSeed,arrLength);
    });
  }
#ENDIF
}
#ENDDEF

}