#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfString
#TYPEDEF OfInteger
package omni.util;

#IF OfInt
import java.util.function.$Comparator$;
#ELSEIF OfString,OfInteger
import java.util.Comparator;
#ELSE
import omni.function.$Comparator$;
#ENDIF

public enum $ArrayType$Comparators implements $Comparator$
#IFNOT OfBoolean,OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
<$ArrayType$>
#ENDIF
{
  Ascending
  {
    public int $compareMethod$($ArrayType$ val1,$ArrayType$ val2)
    {
#IF OfInteger,OfString
      return val1.compareTo(val2);
#ELSE
      return $BoxedType$.compare(val1,val2);
#ENDIF
    }
  },
  Descending
  {
    public int $compareMethod$($ArrayType$ val1,$ArrayType$ val2)
    {
#IF OfInteger,OfString
      return -val1.compareTo(val2);
#ELSE
      return -$BoxedType$.compare(val1,val2);
#ENDIF
    }
  },
  Unsorted
  {
    public int $compareMethod$($ArrayType$ val1,$ArrayType$ val2)
    {
      return 0;
    }
  },
#IF OfByte,OfChar,OfShort,OfInt,OfLong,OfFloat,OfDouble
  Unstable
  {
    public int $compareMethod$($ArrayType$ val1,$ArrayType$ val2)
    {
  #IF OfByte,OfChar,OfShort,OfInt
      //even comes first
      if((val1&0b1)==0)
      {
        //val 1 is even
        if((val2&0b1)!=0)
        {
          //val2 is odd
          return -1;
        }
      }
      else if((val2&0b1)==0)
      {
        //val 2 is even, val 1 is odd
        return 1;
      }
      //both even or both odd
      return 0;
  #ELSEIF OfLong
      //even comes first
      if((val1&0b1L)==0L)
      {
        //val 1 is even
        if((val2&0b1L)!=0L)
        {
          //val2 is odd
          return -1;
        }
      }
      else if((val2&0b1L)==0L)
      {
        //val 2 is even, val 1 is odd
        return 1;
      }
      //both even or both odd
      return 0;
  #ELSEIF OfFloat
      //even bits come first
      var bits2=$convertToBits$(val2);
      if(($convertToBits$(val1)&0b1)==0)
      {
        //val1 is even
        if((bits2&0b1)!=0)
        {
          //val2 is odd
          return -1;
        }
      }
      else if((bits2&0b1)==0)
      {
        //val2 is even, val1 is odd
        return 1; 
      }
      //both even or both odd
      return 0;
  #ELSE
      //even bits come first
      var bits2=$convertToBits$(val2);
      if(($convertToBits$(val1)&0b1L)==0L)
      {
        //val1 is even
        if((bits2&0b1L)!=0L)
        {
          //val2 is odd
          return -1;
        }
      }
      else if((bits2&0b1L)==0L)
      {
        //val2 is even, val1 is odd
        return 1; 
      }
      //both even or both odd
      return 0;
  #ENDIF
    }
  }
#ENDIF
}