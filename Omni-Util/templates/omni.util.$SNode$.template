#TYPEDEF OfBoolean
#TYPEDEF OfByte
#TYPEDEF OfChar
#TYPEDEF OfShort
#TYPEDEF OfInt
#TYPEDEF OfLong
#TYPEDEF OfFloat
#TYPEDEF OfDouble
#TYPEDEF OfRef
package omni.util;
#IF OfRef
import java.util.Objects;
#ENDIF
public class $SNode$$<E>$ implements Comparable<$SNode$$<E>$>
{
  public transient $exposedType$ val;
  public transient $SNode$$<E>$ next;
  public $SNode$($exposedType$ val)
  {
    this.val=val;
  }
  public $SNode$($exposedType$ val,$SNode$$<E>$ next)
  {
    this.val=val;
    this.next=next;
  }
  @Override
  public String toString()
  {
#IF OfRef
    return Objects.toString(val);
#ELSEIF OfDouble
    return $BoxedType$.toString(val);
#ELSE
    return ToStringUtil.getString(val);
#ENDIF
  }
  @Override
  public boolean equals(Object val)
  {
    if(val==this){return true;}
    if(val instanceof $SNode$)
    {
      #IF OfRef
      return Objects.equals(this.val,(($SNode$<?>)val).val);
      #ELSEIF OfFloat,OfDouble
      return TypeUtil.$exposedType$Equals(this.val,(($SNode$)val).val);
      #ELSE
      return this.val==(($SNode$)val).val;
      #ENDIF
    }
    return false;
  }
  @Override
  public int hashCode()
  {
    #IF OfRef
    return Objects.hashCode(this.val);
    #ELSEIF OfDouble,OfFloat
    return HashUtil.hash$ClassPrefix$(this.val);
    #ELSEIF OfLong
    return $BoxedType$.hashCode(this.val);
    #ELSEIF OfBoolean
    return val?1231:1237;
    #ELSE
    return val;
    #ENDIF
  }
  #IF OfRef
  @SuppressWarnings("unchecked")
  #ENDIF
  @Override
  public int compareTo($SNode$$<E>$ that)
  {
    if(this!=that)
    {
      #IF OfBoolean
      if(this.val)
      {
        if(!that.val)
        {
          return 1;
        }
      }else if(that.val)
      {
        return -1;
      }
      #ELSEIF OfByte,OfShort,OfChar
      return this.val-that.val;
      #ELSEIF OfInt,OfLong
      $exposedType$ thisVal,thatVal;
      if((thisVal=this.val)<(thatVal=that.val))
      {
        return -1;
      }
      if(thisVal>thatVal)
      {
        return 1;
      }
      #ELSEIF OfFloat,OfDouble
      return $BoxedType$.compare(this.val,that.val);
      #ELSE
      return ((Comparable$<E>$)this.val).compareTo(that.val);
      #ENDIF
    }
    return 0;
  }
}