#TYPEDEF OfGeneric
package omni.util;
import java.lang.reflect.Array;
import java.util.Objects;
import java.util.function.DoublePredicate;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.Predicate;
import java.util.function.DoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.Consumer;
import omni.function.CharPredicate;
import omni.function.FloatPredicate;
import omni.function.ShortPredicate;
import omni.function.CharConsumer;
import omni.function.FloatConsumer;
import omni.function.ShortConsumer;
import omni.function.ByteConsumer;
import omni.function.BooleanConsumer;
import omni.function.BooleanPredicate;
import omni.function.ByteUnaryOperator;
import omni.function.CharUnaryOperator;
import omni.function.ShortUnaryOperator;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import omni.function.FloatUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.UnaryOperator;
import java.io.ObjectInput;
import java.io.DataInput;
import java.io.ObjectOutput;
import java.io.DataOutput;
import java.io.IOException;

public final class OmniArray
{
  private OmniArray()
  {
    super();
  }
  public static final int DEFAULT_ARR_SEQ_CAP=10;
  private static final int DEFAULT_ARR_SEQ_CAP_PLUS_50_PCT=DEFAULT_ARR_SEQ_CAP+(DEFAULT_ARR_SEQ_CAP>>>1);
  public static final int MAX_ARR_SIZE=Integer.MAX_VALUE-8;
  private static final int MAX_ARR_SIZE_50_PCT_GROWTH_THRESHOLD=(MAX_ARR_SIZE/3<<1)+1;
  public static int growBy100Pct(int currentCapacity){
    if(currentCapacity!=0){
      if(currentCapacity<MAX_ARR_SIZE){
        if(currentCapacity>MAX_ARR_SIZE>>>1){ return MAX_ARR_SIZE; }
        return currentCapacity<<1;
      }else if(currentCapacity==Integer.MAX_VALUE){
        throw new OutOfMemoryError();
      }
    }
    return currentCapacity+1;
  }
  public static int growBy100Pct(int currentCapacity,int minCapacity){
    if(currentCapacity!=0){
      if(minCapacity<MAX_ARR_SIZE){
        if(minCapacity<0){
          throw new OutOfMemoryError();
        }
        if(currentCapacity>MAX_ARR_SIZE>>>1){ return MAX_ARR_SIZE; }
        if((currentCapacity<<=1)>=minCapacity){ return currentCapacity; }
      }
    }else if(minCapacity<0){
      throw new OutOfMemoryError();
    }
    return minCapacity;
  }
  public static int growBy50Pct(int currentCapacity){
    if(currentCapacity>1){
      if(currentCapacity<MAX_ARR_SIZE){
        if(currentCapacity>MAX_ARR_SIZE_50_PCT_GROWTH_THRESHOLD){ return MAX_ARR_SIZE; }
        return currentCapacity+(currentCapacity>>>1);
      }else if(currentCapacity==Integer.MAX_VALUE){
        throw new OutOfMemoryError();
      }
    }
    return currentCapacity+1;
  }
  public static int growBy50Pct(int currentCapacity,int minCapacity){
    if(currentCapacity>1){
      if(minCapacity<MAX_ARR_SIZE){
        if(minCapacity<0){
          throw new OutOfMemoryError();
        }
        if(currentCapacity>MAX_ARR_SIZE_50_PCT_GROWTH_THRESHOLD){ return MAX_ARR_SIZE; }
        if((currentCapacity+=currentCapacity>>>1)>=minCapacity){ return currentCapacity; }
      }
    }else if(minCapacity<0){
      throw new OutOfMemoryError();
    }
    return minCapacity;
  }
  public static int growToArrSeqDefault(int minCapacity){
    if(minCapacity>=DEFAULT_ARR_SEQ_CAP_PLUS_50_PCT){ return minCapacity; }
    if(minCapacity>=DEFAULT_ARR_SEQ_CAP){ return DEFAULT_ARR_SEQ_CAP_PLUS_50_PCT; }
    return DEFAULT_ARR_SEQ_CAP;
  }
  @SuppressWarnings("unchecked") public static <T> T[] uncheckedArrResize(int size,T[] arr){
    switch(Integer.signum(size-arr.length)){
    case -1:
        arr[size]=null;
    default:
        break;
    case 1:
        arr=(T[])Array.newInstance(arr.getClass().getComponentType(),size);
    }
    return arr;
  }
  #MACRO SubInterface<Boolean,boolean,Boolean,BooleanConsumer,boolean,BooleanPredicate,test>( )
  #MACRO SubInterface<Byte,byte,Byte,ByteConsumer,byte,ByteUnaryOperator,applyAsByte>( )
  #MACRO SubInterface<Char,char,Character,CharConsumer,char,CharUnaryOperator,applyAsChar>( )
  #MACRO SubInterface<Short,short,Short,ShortConsumer,short,ShortUnaryOperator,applyAsShort>( )
  #MACRO SubInterface<Int,int,Integer,IntConsumer,int,IntUnaryOperator,applyAsInt>( )
  #MACRO SubInterface<Long,long,Long,LongConsumer,long,LongUnaryOperator,applyAsLong>( )
  #MACRO SubInterface<Float,float,Float,FloatConsumer,float,FloatUnaryOperator,applyAsFloat>( )
  #MACRO SubInterface<Double,double,Double,DoubleConsumer,double,DoubleUnaryOperator,applyAsDouble>( )
  #MACRO SubInterface<Ref,Object,Object,Consumer<? super E>,E,UnaryOperator<E>,apply>(<E>)
}


#MACRODEF IndexEquals(VAL)
#IFSWITCH SUFFIX==Null
VAL==null
#ELSEIFSWITCH SUFFIX==NonNull
nonNull.equals(VAL)
#ELSEIFSWITCH SUFFIX==Bits
  #IFSWITCH CLASSPREFIX==Float
bits==Float.floatToRawIntBits(VAL)
  #ELSE
bits==Double.doubleToRawLongBits(VAL)
  #ENDIF
#ELSEIFSWITCH SUFFIX==NaN
BOXEDTYPE.isNaN(VAL)
#ELSEIFSWITCH SUFFIX==0
VAL==0
#ELSE
  #IFSWITCH CLASSPREFIX==Ref
pred.test(VAL)
  #ELSE
VAL==val
  #ENDIF
#ENDIF
#ENDDEF

#MACRODEF OptionalParameter()
#IFSWITCH SUFFIX==NonNull
,Object nonNull
#ELSEIFSWITCH SUFFIX==Bits
  #IFSWITCH CLASSPREFIX==Float
,int bits
  #ELSE
,long bits
  #ENDIF
#ELSEIFSWITCH SUFFIX==Null,NaN,0
#ELSE
 #IFSWITCH CLASSPREFIX==Boolean
,boolean val
  #ELSEIFSWITCH CLASSPREFIX==Byte,Char,Short,Int
,int val
  #ELSEIFSWITCH CLASSPREFIX==Long
,long val
  #ELSEIFSWITCH CLASSPREFIX==Ref
,Predicate<Object> pred
  #ENDIF
#ENDIF
#ENDDEF

#MACRODEF IfClause(MACRONAME,VAL)
if
(
#MACRO MACRONAME(VAL)
)
#ENDDEF

#MACRODEF UncheckedQueryMethods<SUFFIX>()
public static boolean uncheckedcontainsSUFFIX(PRIMITIVETYPE[] arr,int begin,int end
#MACRO OptionalParameter()
)
{
  for(;;++begin)
  {
    #MACRO IfClause(IndexEquals,arr[begin])
    {
      return true;
    }
    if(begin==end)
    {
      return false;
    }
  }
}
public static int uncheckedindexOfSUFFIX(PRIMITIVETYPE[] arr,int bound
#MACRO OptionalParameter()
)
{
  for(int offset=0;;)
  {
    #MACRO IfClause(IndexEquals,arr[offset])
    {
      return offset;
    }
    if(++offset==bound)
    {
      return -1;
    }
  }
}
public static int uncheckedlastIndexOfSUFFIX(PRIMITIVETYPE[] arr,int bound
#MACRO OptionalParameter()
)
{
  for(;;)
  {
    #MACRO IfClause(IndexEquals,arr[--bound])
    {
      return bound;
    }
    if(bound==0)
    {
      return -1;
    }
  }
}
public static int uncheckedindexOfSUFFIX(PRIMITIVETYPE[] arr,int offset,int length
#MACRO OptionalParameter()
)
{
  int i;
  for(i=offset,length+=offset;;)
  {
    #MACRO IfClause(IndexEquals,arr[i])
    {
      return i-offset;
    }
    if(++i==length)
    {
      return -1;
    }
  }
}
public static int uncheckedlastIndexOfSUFFIX(PRIMITIVETYPE[] arr,int offset,int length
#MACRO OptionalParameter()
)
{
  for(length+=(offset-1);;--length)
  {
    #MACRO IfClause(IndexEquals,arr[length])
    {
      return length-offset;
    }
    if(length==offset)
    {
      return -1;
    }
  }
}
public static int uncheckedsearchSUFFIX(PRIMITIVETYPE[] arr,int bound
#MACRO OptionalParameter()
)
{
  for(int i=bound-1;;--i)
  {
    #MACRO IfClause(IndexEquals,arr[i])
    {
      return bound-i;
    }
    if(i==0)
    {
      return -1;
    }
  }
}
#ENDDEF


#MACRODEF GetHashCode(VAL)
#IFSWITCH CLASSPREFIX==Boolean
((VAL)?1231:1237)
#ELSEIFSWITCH CLASSPREFIX==Byte,Char,Short,Int
VAL
#ELSEIFSWITCH CLASSPREFIX==Long
Long.hashCode(VAL)
#ELSEIFSWITCH CLASSPREFIX==Float,Double
HashUtil.hashCLASSPREFIX(VAL)
#ELSEIFSWITCH CLASSPREFIX==Ref
Objects.hashCode(VAL)
#ENDIF
#ENDDEF

#MACRODEF SubInterface<CLASSPREFIX,PRIMITIVETYPE,BOXEDTYPE,CONSUMER,EXPOSEDTYPE,OPERATOR,APPLY>(TYPEPARAMETER)
public interface OfCLASSPREFIX
{
  public static final PRIMITIVETYPE[] DEFAULT_ARR=new PRIMITIVETYPE[]{};
#IFSWITCH CLASSPREFIX==Ref
  @SuppressWarnings("rawtypes")
  public static final Comparable[] DEFAULT_COMPARABLE_ARR=new Comparable[]{};
#ENDIF
#IFNOTSWITCH CLASSPREFIX==Ref
  public static final BOXEDTYPE[] DEFAULT_BOXED_ARR=new BOXEDTYPE[]{};
#ENDIF
  public static void fill(PRIMITIVETYPE[] arr,int begin,int end,PRIMITIVETYPE val){
    for(;;){
      arr[begin]=val;
      if(begin==end)
      {
        return;
      }
      ++begin;
    }
  }
#IFNOTSWITCH CLASSPREFIX==Byte
#IFSWITCH CLASSPREFIX==Ref
  public static void writeArray(PRIMITIVETYPE[] arr,int begin,int end,ObjectOutput out) throws IOException{
#ELSE
  public static void writeArray(PRIMITIVETYPE[] arr,int begin,int end,DataOutput out) throws IOException{
#ENDIF
  #IFSWITCH CLASSPREFIX==Boolean 
    for(int word=TypeUtil.castToByte(arr[begin]),marker=1;;){
      if(begin==end){
        out.writeByte(word);
        return;
      }
      if((marker<<=1)==(1<<8)){
        out.writeByte(word);
        word=0;
        marker=1;
      }
      if(arr[++begin]){
        word|=marker;
      }
    }
  #ELSE
    for(;;++begin){
    #IFSWITCH CLASSPREFIX==Ref
      out.writeObject(arr[begin]);
    #ELSE
      out.writeCLASSPREFIX(arr[begin]);
    #ENDIF
      if(begin==end){
        return;
      }
    }
  #ENDIF
  }
#IFSWITCH CLASSPREFIX==Ref
  public static void readArray(PRIMITIVETYPE[] arr,int begin,int end,ObjectInput in) throws IOException,ClassNotFoundException{
#ELSE
  public static void readArray(PRIMITIVETYPE[] arr,int begin,int end,DataInput in) throws IOException{
#ENDIF
#IFSWITCH CLASSPREFIX==Boolean
    for(int word=in.readUnsignedByte(),marker=1;;++begin){
      if((marker&word)!=0){
        arr[begin]=true;
      }
      if(begin==end){
        return;
      }
      if((marker<<=1)==(1<<8)){
        word=in.readUnsignedByte();
        marker=1;
      }
    }
#ELSE
    for(;;++begin){
#IFSWITCH CLASSPREFIX==Ref
      arr[begin]=in.readObject();
#ELSE
      arr[begin]=in.readCLASSPREFIX();
#ENDIF
      if(begin==end){
        return;
      }
    }
#ENDIF
  }
#ENDIF
#IFSWITCH CLASSPREFIX==Ref
  @SuppressWarnings("unchecked")
#ENDIF
  public static TYPEPARAMETER void uncheckedReplaceAll(PRIMITIVETYPE[] arr,int offset,int bound,OPERATOR operator)
  {
    for(;;)
    {
      arr[offset]=operator.APPLY((EXPOSEDTYPE)arr[offset]);
      if(++offset==bound)
      {
        return;
      }
    }
  }
#IFSWITCH CLASSPREFIX==Ref
  @SuppressWarnings("unchecked")
#ENDIF
  public static TYPEPARAMETER void ascendingForEach(PRIMITIVETYPE[] arr,int begin,int end,CONSUMER action)
  {
    for(;;++begin)
    {
      action.accept((EXPOSEDTYPE)arr[begin]);
      if(begin==end)
      {
        return;
      }
    }
  }
#IFSWITCH CLASSPREFIX==Ref
  @SuppressWarnings("unchecked")
#ENDIF
  public static TYPEPARAMETER void descendingForEach(PRIMITIVETYPE[] arr,int begin,int end,CONSUMER action)
  {
    for(;;--end)
    {
      action.accept((EXPOSEDTYPE)arr[end]);
      if(begin==end)
      {
        return;
      }
    }
  }
  public static int ascendingSeqHashCode(PRIMITIVETYPE[] arr,int begin,int end)
  {
    for(int hash=31+
      #MACRO GetHashCode(arr[begin])
      ;;)
    {
      if(begin==end)
      {
        return hash;
      }
      hash=hash*31+(
        #MACRO GetHashCode(arr[++begin])
        );
    }
  }
  public static int descendingSeqHashCode(PRIMITIVETYPE[] arr,int begin,int end)
  {
    for(int hash=31+
      #MACRO GetHashCode(arr[end])
      ;;)
    {
      if(begin==end)
      {
        return hash;
      }
      hash=hash*31+(
        #MACRO GetHashCode(arr[--end])
        );
    }
  }
#IFSWITCH CLASSPREFIX==Double,Ref
  public static void ascendingToString(PRIMITIVETYPE[] arr,int begin,int end,StringBuilder builder)
  {
    for(;;++begin)
    {
      builder.append(arr[begin]);
      if(begin==end)
      {
        return;
      }
      builder.append(',').append(' ');
    }
  }
  public static void descendingToString(PRIMITIVETYPE[] arr,int begin,int end,StringBuilder builder)
  {
    for(;;--end)
    {
      builder.append(arr[end]);
      if(begin==end)
      {
        return;
      }
      builder.append(',').append(' ');
    }
  }
#ELSEIFSWITCH CLASSPREFIX==Char
  public static void ascendingToString(PRIMITIVETYPE[] arr,int begin,int end,char[] buffer,int bufferOffset)
  {
    for(;;++bufferOffset,++begin)
    {
      buffer[bufferOffset]=arr[begin];
      if(begin==end)
      {
        return;
      }
      buffer[++bufferOffset]=',';
      buffer[++bufferOffset]=' ';
    }
  }
  public static void descendingToString(PRIMITIVETYPE[] arr,int begin,int end,char[] buffer,int bufferOffset)
  {
    for(;;++bufferOffset,--end)
    {
      buffer[bufferOffset]=arr[end];
      if(begin==end)
      {
        return;
      }
      buffer[++bufferOffset]=',';
      buffer[++bufferOffset]=' ';
    }
  }
#ELSEIFSWITCH CLASSPREFIX==Boolean,Byte,Short,Int,Long,Float
  public static void ascendingToString(PRIMITIVETYPE[] arr,int begin,int end,ToStringUtil.OmniStringBuilderByte builder)
  {
    for(;;++begin)
    {
  #IFSWITCH CLASSPREFIX==Byte
      builder.uncheckedAppendShort(arr[begin]);
  #ELSE
      builder.uncheckedAppendCLASSPREFIX(arr[begin]);
  #ENDIF
      if(begin==end)
      {
        return;
      }
      builder.uncheckedAppendCommaAndSpace();
    }
  }
  public static int ascendingToString(PRIMITIVETYPE[] arr,int begin,int end,byte[] buffer,int bufferOffset)
  {
    for(;;++begin,++bufferOffset)
    {
  #IFSWITCH CLASSPREFIX==Byte
      bufferOffset=ToStringUtil.getStringShort(arr[begin],buffer,bufferOffset);
  #ELSE
      bufferOffset=ToStringUtil.getStringCLASSPREFIX(arr[begin],buffer,bufferOffset);
  #ENDIF
      if(begin==end)
      {
        return bufferOffset;
      }
      buffer[bufferOffset]=(byte)',';
      buffer[++bufferOffset]=(byte)' ';
    }
  }
  public static void descendingToString(PRIMITIVETYPE[] arr,int begin,int end,ToStringUtil.OmniStringBuilderByte builder)
  {
    for(;;--end)
    {
  #IFSWITCH CLASSPREFIX==Byte
      builder.uncheckedAppendShort(arr[end]);
  #ELSE
      builder.uncheckedAppendCLASSPREFIX(arr[end]);
  #ENDIF
      if(begin==end)
      {
        return;
      }
      builder.uncheckedAppendCommaAndSpace();
    }
  }
  public static int descendingToString(PRIMITIVETYPE[] arr,int begin,int end,byte[] buffer,int bufferOffset)
  {
    for(;;--end,++bufferOffset)
    {
  #IFSWITCH CLASSPREFIX==Byte
      bufferOffset=ToStringUtil.getStringShort(arr[end],buffer,bufferOffset);
  #ELSE
      bufferOffset=ToStringUtil.getStringCLASSPREFIX(arr[end],buffer,bufferOffset);
  #ENDIF
      if(begin==end)
      {
        return bufferOffset;
      }
      buffer[bufferOffset]=(byte)',';
      buffer[++bufferOffset]=(byte)' ';
    }
  }
#ENDIF


#IFSWITCH CLASSPREFIX==Boolean,Byte,Char,Short,Int,Long,Ref
  #MACRO UncheckedQueryMethods< >()
  #IFSWITCH CLASSPREFIX==Ref
  #MACRO UncheckedQueryMethods<Null>()
  #MACRO UncheckedQueryMethods<NonNull>()
  #ENDIF
#ELSE
  #MACRO UncheckedQueryMethods<0>()
  #MACRO UncheckedQueryMethods<NaN>()
  #MACRO UncheckedQueryMethods<Bits>()
#ENDIF

  public static void removeIndexAndPullDown(PRIMITIVETYPE[] arr,int index,int newBound)
  {
    ArrCopy.semicheckedSelfCopy(arr,index,index+1,newBound-index);
#IFSWITCH CLASSPREFIX==Ref
    arr[newBound]=null;
#ENDIF
  }
  public static int removeRangeAndPullDown(PRIMITIVETYPE[] arr,int rangeHi,int oldBound,int numRemoved)
  {
    ArrCopy.semicheckedSelfCopy(arr,rangeHi-numRemoved,rangeHi,oldBound-rangeHi);
#IFSWITCH CLASSPREFIX==Ref
    nullifyRange(arr,oldBound-1,oldBound-=numRemoved);
    return oldBound;
#ELSE
    return oldBound-numRemoved;
#ENDIF
  }


  public static void reverseRange(PRIMITIVETYPE[] arr,int begin,int end)
  {
    do
    {
      var tmp=arr[begin];
      arr[begin]=arr[end];
      arr[end]=tmp;
    }
    while(++begin<--end);
  }
#IFSWITCH CLASSPREFIX==Char,Double,Float,Int,Long,Ref,Short
  #IFSWITCH CLASSPREFIX==Ref
  public static void nullifyRange(Object[] arr,int end,int begin)
  {
    for(;;++begin){
      arr[begin]=null;
      if(begin==end){ return; }
    }
  }
  @SafeVarargs
  public static <E> IntPredicate getIndexPredicate(Predicate<? super E> predicate,E...arr)
  #ELSE
  public static IntPredicate getIndexPredicate(CLASSPREFIXPredicate predicate,PRIMITIVETYPE...arr)
  #ENDIF
  {
    return index->predicate.test(arr[index]);
  }
#ENDIF
#IFSWITCH CLASSPREFIX==Float
  public static IntPredicate getFltBitsIndexPredicate(CLASSPREFIXPredicate predicate,int...arr)
  {
    return index->predicate.test(Float.intBitsToFloat(arr[index]));
  }
#ELSEIFSWITCH CLASSPREFIX==Double
  public static IntPredicate getDblBitsIndexPredicate(CLASSPREFIXPredicate predicate,long...arr)
  {
    return index->predicate.test(Double.longBitsToDouble(arr[index]));
  }
#ENDIF

}
#ENDDEF