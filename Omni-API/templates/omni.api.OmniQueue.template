#TYPEDEF OfGeneric
package omni.api;
import omni.util.PeekAndPollIfc;
import omni.util.TypeUtil;
public abstract interface OmniQueue<E> extends OmniCollection<E>,PeekAndPollIfc<E>
{
  //TODO add the rest of the methods
  public abstract E element();
  public abstract E remove();
  #MACRO PrimitiveSubInterface<boolean,Boolean,Boolean>()
  #MACRO PrimitiveSubInterface<byte,Byte,Byte>()
  #MACRO PrimitiveSubInterface<char,Char,Character>()
  #MACRO PrimitiveSubInterface<short,Short,Short>()
  #MACRO PrimitiveSubInterface<int,Int,Integer>()
  #MACRO PrimitiveSubInterface<long,Long,Long>()
  #MACRO PrimitiveSubInterface<float,Float,Float>()
  #MACRO PrimitiveSubInterface<double,Double,Double>()
  //public abstract Object clone();
  public abstract interface OfPrimitive<E> extends OmniQueue<E>,OmniCollection.OfPrimitive<E>
  {
    public abstract boolean offer(boolean val);
  }
  
  public abstract interface DoubleOutput<E> extends OmniQueue<E>,OmniCollection.DoubleOutput<E>{
    public abstract double doubleElement();
    public abstract double removeDouble();
  }
  public abstract interface FloatOutput<E> extends DoubleOutput<E>,OmniCollection.FloatOutput<E>{
    public abstract float floatElement();
    public abstract float removeFloat();
  }
  public abstract interface LongOutput<E> extends FloatOutput<E>,OmniCollection.LongOutput<E>{
    public abstract long longElement();
    public abstract long removeLong();
  }
  public abstract interface IntOutput<E> extends LongOutput<E>,OmniCollection.IntOutput<E>{
    public abstract int intElement();
    public abstract int removeInt();
  }
  public abstract interface ShortOutput<E> extends IntOutput<E>,OmniCollection.ShortOutput<E>{
    public abstract short shortElement();
    public abstract short removeShort();
  }
  public abstract interface CharOutput<E> extends IntOutput<E>,OmniCollection.CharOutput<E>{
    public abstract char charElement();
    public abstract char removeChar();
  }
  public abstract interface ByteOutput<E> extends ShortOutput<E>,OmniCollection.ByteOutput<E>{
    public abstract byte byteElement();
    public abstract byte removeByte();
  }
  public abstract interface BooleanInput<E> extends OmniQueue<E>,OmniCollection.BooleanInput<E>{
    public abstract boolean offer(boolean val);
    public abstract boolean offer(Boolean val);
  }
  public abstract interface ByteInput<E> extends BooleanInput<E>,OmniCollection.ByteInput<E>{
    public abstract boolean offer(byte val);
    public abstract boolean offer(Byte val);
  }
  public abstract interface CharInput<E> extends BooleanInput<E>,OmniCollection.CharInput<E>{
    public abstract boolean offer(char val);
    public abstract boolean offer(Character val);
  }
  public abstract interface ShortInput<E> extends ByteInput<E>,OmniCollection.ShortInput<E>{
    public abstract boolean offer(short val);
    public abstract boolean offer(Short val);
  }
  public abstract interface IntInput<E> extends CharInput<E>,ShortInput<E>,OmniCollection.IntInput<E>{
    public abstract boolean offer(int val);
    public abstract boolean offer(Integer val);
  }
  public abstract interface LongInput<E> extends IntInput<E>,OmniCollection.LongInput<E>{
    public abstract boolean offer(long val);
    public abstract boolean offer(Long val);
  }
  public abstract interface FloatInput<E> extends LongInput<E>,OmniCollection.FloatInput<E>{
    public abstract boolean offer(float val);
    public abstract boolean offer(Float val);
  }
  
#MACRODEF PrimitiveSubInterface<ARRTYPE,CLASSPREFIX,BOXEDTYPE>()
public abstract interface OfCLASSPREFIX extends OfPrimitive<BOXEDTYPE>,OmniCollection<BOXEDTYPE>,OmniQueue<BOXEDTYPE>,OmniCollection.OfPrimitive<BOXEDTYPE>,OmniCollection.OfCLASSPREFIX,PeekAndPollIfc.CLASSPREFIXOutput<BOXEDTYPE>
#IFSWITCH ARRTYPE==boolean
,BooleanInput<BOXEDTYPE>,ByteOutput<BOXEDTYPE>,CharOutput<BOXEDTYPE>
#ELSEIFSWITCH ARRTYPE==double
,FloatInput<BOXEDTYPE>,DoubleOutput<BOXEDTYPE>
#ELSEIFNOTSWITCH ARRTYPE==Object
,CLASSPREFIXInput<BOXEDTYPE>,CLASSPREFIXOutput<BOXEDTYPE>
#ENDIF
{
  public abstract ARRTYPE ARRTYPEElement();
  public abstract BOXEDTYPE element();
  public abstract ARRTYPE removeCLASSPREFIX();
  public abstract BOXEDTYPE remove();
  
#IFSWITCH ARRTYPE==boolean
  public default byte byteElement(){
    return TypeUtil.castToByte(booleanElement());
  }
  public default char charElement(){
    return TypeUtil.castToChar(booleanElement());
  }
  public default double doubleElement(){
    return TypeUtil.castToDouble(booleanElement());
  }
  public default float floatElement(){
    return TypeUtil.castToFloat(booleanElement());
  }
  public default int intElement(){
    return TypeUtil.castToByte(booleanElement());
  }
  public default long longElement(){
    return TypeUtil.castToLong(booleanElement());
  }
  public default byte removeByte(){
    return TypeUtil.castToByte(removeBoolean());
  }
  public default char removeChar(){
    return TypeUtil.castToChar(removeBoolean());
  }
  public default double removeDouble(){
    return TypeUtil.castToDouble(removeBoolean());
  }
  public default float removeFloat(){
    return TypeUtil.castToFloat(removeBoolean());
  }
  public default int removeInt(){
    return TypeUtil.castToByte(removeBoolean());
  }
  public default long removeLong(){
    return TypeUtil.castToLong(removeBoolean());
  }
  public default short removeShort(){
    return TypeUtil.castToByte(removeBoolean());
  }
  public default short shortElement(){
    return TypeUtil.castToByte(booleanElement());
  }
#ELSEIFNOTSWITCH ARRTYPE==double
  #MACRO ElementMethodImpls<double,Double>()
  #IFNOTSWITCH ARRTYPE==float
  #MACRO ElementMethodImpls<float,Float>()
    #IFNOTSWITCH ARRTYPE==long
  #MACRO ElementMethodImpls<long,Long>()
      #IFNOTSWITCH ARRTYPE==int
  #MACRO ElementMethodImpls<int,Int>()
        #IFNOTSWITCH ARRTYPE==char,short
  #MACRO ElementMethodImpls<short,Short>()
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF
#IFSWITCH ARRTYPE==boolean
  @Override
#ENDIF
  public abstract boolean offer(ARRTYPE val);
  public abstract boolean offer(BOXEDTYPE val);
#IFNOTSWITCH ARRTYPE==boolean
  @Override
  public default boolean offer(boolean val)
  {
    return offer((ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==double
    castToDouble
    #ELSEIFSWITCH ARRTYPE==float
    castToFloat
    #ELSEIFSWITCH ARRTYPE==long
    castToLong
    #ELSEIFSWITCH ARRTYPE==int,short,byte
    castToByte
    #ELSEIFSWITCH ARRTYPE==char
    castToChar
    #ELSE
     ERROR unknown array type ARRTYPE
    #ENDIF
    (val));
  }
  public default boolean offer(Boolean val)
  {
    return offer((ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==double
    castToDouble
    #ELSEIFSWITCH ARRTYPE==float
    castToFloat
    #ELSEIFSWITCH ARRTYPE==long
    castToLong
    #ELSEIFSWITCH ARRTYPE==int,short,byte
    castToByte
    #ELSEIFSWITCH ARRTYPE==char
    castToChar
    #ELSE
     ERROR unknown array type ARRTYPE
    #ENDIF
    (val.booleanValue()));
  }
  #IFNOTSWITCH ARRTYPE==byte,char,short
  #MACRO OfferImpl(char,Character)
  #ENDIF
  #IFNOTSWITCH ARRTYPE==byte,char
  #MACRO OfferImpl(byte,Byte)
    #IFNOTSWITCH ARRTYPE==short
  #MACRO OfferImpl(short,Short)
      #IFNOTSWITCH ARRTYPE==int
  #MACRO OfferImpl(int,Integer)
        #IFNOTSWITCH ARRTYPE==long
  #MACRO OfferImpl(long,Long)
          #IFNOTSWITCH ARRTYPE==float
  #MACRO OfferImpl(float,Float)
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF
}
#ENDDEF
  public abstract interface OfRef<E> extends OmniCollection<E>,OmniQueue<E>,OmniCollection.OfRef<E>,PeekAndPollIfc<E>
  {
    public abstract E element();
    public abstract boolean offer(E val);
    public abstract E remove();
  }
}
#MACRODEF OfferImpl(PRIMITIVEINPUTTYPE,BOXEDINPUTTYPE)
public default boolean offer(PRIMITIVEINPUTTYPE val)
{
  return offer((ARRTYPE)val);
}
public default boolean offer(BOXEDINPUTTYPE val)
{
  return offer((ARRTYPE)val.PRIMITIVEINPUTTYPEValue());
}
#ENDDEF
#MACRODEF ElementMethodImpls<RETTYPE,METHODSUFFIX>()
public default RETTYPE RETTYPEElement()
{
  return ARRTYPEElement();
}
public default RETTYPE removeMETHODSUFFIX()
{
  return removeCLASSPREFIX();
}
#ENDDEF