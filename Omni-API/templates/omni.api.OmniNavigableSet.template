#TYPEDEF OfGeneric
package omni.api;
import java.util.NavigableSet;
public abstract interface OmniNavigableSet<E> extends OmniSortedSet<E>,NavigableSet<E>{
  OmniIterator<E> iterator();
  OmniIterator<E> descendingIterator();
  OmniNavigableSet<E> descendingSet();
  OmniNavigableSet<E> subSet(E fromElement,boolean fromInclusive,E toElement,boolean toInclusive);
  OmniNavigableSet<E> headSet(E toElement,boolean inclusive);
  OmniNavigableSet<E> tailSet(E fromElement,boolean inclusive);
  OmniNavigableSet<E> subSet(E fromElement,E toElement);
  OmniNavigableSet<E> headSet(E toElement);
  OmniNavigableSet<E> tailSet(E fromElement);
  public abstract interface OfRef<E> extends OmniNavigableSet<E>,OmniSortedSet.OfRef<E>{
    OmniIterator.OfRef<E> iterator();
    OmniIterator.OfRef<E> descendingIterator();
    OmniNavigableSet.OfRef<E> descendingSet();
    OmniNavigableSet.OfRef<E> subSet(E fromElement,boolean fromInclusive,E toElement,boolean toInclusive);
    OmniNavigableSet.OfRef<E> headSet(E toElement,boolean inclusive);
    OmniNavigableSet.OfRef<E> tailSet(E fromElement,boolean inclusive);
    OmniNavigableSet.OfRef<E> subSet(E fromElement,E toElement);
    OmniNavigableSet.OfRef<E> headSet(E toElement);
    OmniNavigableSet.OfRef<E> tailSet(E fromElement);
  }
  #MACRO OutputSubInterface<Double>(double,)
  #MACRO OutputSubInterface<Float>(float,Double)
  #MACRO OutputSubInterface<Long>(long,Float)
  #MACRO OutputSubInterface<Int>(int,Long)
  #MACRO OutputSubInterface<Short>(short,Int)
  #MACRO OutputSubInterface<Char>(char,Int)
  #MACRO OutputSubInterface<Byte>(byte,Short)
  #MACRO PrimitiveSubInterface<Boolean>(Boolean,boolean)
  #MACRO PrimitiveSubInterface<Byte>(Byte,byte)
  #MACRO PrimitiveSubInterface<Char>(Character,char)
  #MACRO PrimitiveSubInterface<Short>(Short,short)
  #MACRO PrimitiveSubInterface<Int>(Integer,int)
  #MACRO PrimitiveSubInterface<Long>(Long,long)
  #MACRO PrimitiveSubInterface<Float>(Float,float)
  #MACRO PrimitiveSubInterface<Double>(Double,double)
}
#MACRODEF OutputSubInterface<CLASSPREFIX>(EXPOSEDTYPE,EXTENDS)
#IFSWITCH CLASSPREFIX==Double
public abstract interface CLASSPREFIXOutput<E> extends OmniNavigableSet<E>,OmniSet.CLASSPREFIXOutput<E>{
#ELSE
public abstract interface CLASSPREFIXOutput<E> extends OmniNavigableSet.EXTENDSOutput<E>,OmniSet.CLASSPREFIXOutput<E>{
#ENDIF
  OmniIterator.CLASSPREFIXOutput<E> iterator();
  OmniIterator.CLASSPREFIXOutput<E> descendingIterator();
  OmniNavigableSet.CLASSPREFIXOutput<E> descendingSet();
  OmniNavigableSet.CLASSPREFIXOutput<E> subSet(E fromElement,boolean fromInclusive,E toElement,boolean toInclusive);
  OmniNavigableSet.CLASSPREFIXOutput<E> headSet(E toElement,boolean inclusive);
  OmniNavigableSet.CLASSPREFIXOutput<E> tailSet(E fromElement,boolean inclusive);
  OmniNavigableSet.CLASSPREFIXOutput<E> subSet(E fromElement,E toElement);
  OmniNavigableSet.CLASSPREFIXOutput<E> headSet(E toElement);
  OmniNavigableSet.CLASSPREFIXOutput<E> tailSet(E fromElement);
  EXPOSEDTYPE pollFirstCLASSPREFIX();
  EXPOSEDTYPE pollLastCLASSPREFIX();
  EXPOSEDTYPE lowerCLASSPREFIX(EXPOSEDTYPE val);
  EXPOSEDTYPE higherCLASSPREFIX(EXPOSEDTYPE val);
  EXPOSEDTYPE EXPOSEDTYPECeiling(EXPOSEDTYPE val);
  EXPOSEDTYPE EXPOSEDTYPEFloor(EXPOSEDTYPE val);
}
#ENDDEF
#MACRODEF PrimitiveSubInterface<CLASSPREFIX>(BOXEDTYPE,EXPOSEDTYPE)
public abstract interface OfCLASSPREFIX
#IFSWITCH CLASSPREFIX==Boolean
  extends OmniNavigableSet.ByteOutput<BOXEDTYPE>,OmniNavigableSet.CharOutput<BOXEDTYPE>,OmniSortedSet.OfCLASSPREFIX{
#ELSE
  extends OmniNavigableSet.CLASSPREFIXOutput<BOXEDTYPE>,OmniSortedSet.OfCLASSPREFIX{
#ENDIF
  OmniIterator.OfCLASSPREFIX iterator();
  OmniIterator.OfCLASSPREFIX descendingIterator();
  OmniNavigableSet.OfCLASSPREFIX descendingSet();
  OmniNavigableSet.OfCLASSPREFIX subSet(EXPOSEDTYPE fromElement,boolean fromInclusive,EXPOSEDTYPE toElement,boolean toInclusive);
  OmniNavigableSet.OfCLASSPREFIX headSet(EXPOSEDTYPE toElement,boolean inclusive);
  OmniNavigableSet.OfCLASSPREFIX tailSet(EXPOSEDTYPE fromElement,boolean inclusive);
  OmniNavigableSet.OfCLASSPREFIX subSet(EXPOSEDTYPE fromElement,EXPOSEDTYPE toElement);
  OmniNavigableSet.OfCLASSPREFIX headSet(EXPOSEDTYPE toElement);
  OmniNavigableSet.OfCLASSPREFIX tailSet(EXPOSEDTYPE fromElement);
  EXPOSEDTYPE pollFirstCLASSPREFIX();
  EXPOSEDTYPE pollLastCLASSPREFIX();
  BOXEDTYPE lower(EXPOSEDTYPE val);
  BOXEDTYPE floor(EXPOSEDTYPE val);
  BOXEDTYPE ceiling(EXPOSEDTYPE val);
  BOXEDTYPE higher(EXPOSEDTYPE val);
  EXPOSEDTYPE lowerCLASSPREFIX(EXPOSEDTYPE val);
  EXPOSEDTYPE EXPOSEDTYPEFloor(EXPOSEDTYPE val);
  EXPOSEDTYPE EXPOSEDTYPECeiling(EXPOSEDTYPE val);
  EXPOSEDTYPE higherCLASSPREFIX(EXPOSEDTYPE val);
  default OmniNavigableSet.OfCLASSPREFIX subSet(BOXEDTYPE fromElement,boolean fromInclusive,BOXEDTYPE toElement,boolean toInclusive){
    return this.subSet((EXPOSEDTYPE)fromElement,fromInclusive,(EXPOSEDTYPE)toElement,toInclusive);
  }
  default OmniNavigableSet.OfCLASSPREFIX headSet(BOXEDTYPE toElement,boolean inclusive){
    return this.headSet((EXPOSEDTYPE)toElement,inclusive);
  }
  default OmniNavigableSet.OfCLASSPREFIX tailSet(BOXEDTYPE fromElement,boolean inclusive){
    return this.tailSet((EXPOSEDTYPE)fromElement,inclusive);
  }
  default OmniNavigableSet.OfCLASSPREFIX subSet(BOXEDTYPE fromElement,BOXEDTYPE toElement){
    return this.subSet((EXPOSEDTYPE)fromElement,(EXPOSEDTYPE)toElement);
  }
  default OmniNavigableSet.OfCLASSPREFIX headSet(BOXEDTYPE toElement){
    return this.headSet((EXPOSEDTYPE)toElement);
  }
  default OmniNavigableSet.OfCLASSPREFIX tailSet(BOXEDTYPE fromElement){
    return this.tailSet((EXPOSEDTYPE)fromElement);
  }
  default BOXEDTYPE lower(BOXEDTYPE val){
    return lower((EXPOSEDTYPE)val);
  }
  default BOXEDTYPE higher(BOXEDTYPE val){
    return higher((EXPOSEDTYPE)val);
  }
  default BOXEDTYPE floor(BOXEDTYPE val){
    return floor((EXPOSEDTYPE)val);
  }
  default BOXEDTYPE ceiling(BOXEDTYPE val){
    return ceiling((EXPOSEDTYPE)val);
  }
  
  
}
#ENDDEF