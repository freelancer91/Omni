#TYPEDEF OfGeneric
package omni.api;
import omni.util.PeekAndPollIfc;
import omni.util.TypeUtil;
public abstract interface OmniStack<E> extends OmniCollection<E>,PeekAndPollIfc<E>
{
    public abstract E pop();
    //public abstract Object clone();
    public abstract int search(Object val);
    #MACRO PrimitiveMethods(SearchMethodDecl)
    #MACRO BoxedMethods(SearchMethodDecl)
    public abstract interface OfPrimitive<E> extends OmniCollection<E>,OmniStack<E>,OmniCollection.OfPrimitive<E>
    {
      public abstract void push(boolean val);
      #MACRO BoxedMethods(SearchMethodDefault)
    }
    #MACRO PrimitiveSubInterface<boolean,Boolean,Boolean>()
    #MACRO PrimitiveSubInterface<byte,Byte,Byte>()
    #MACRO PrimitiveSubInterface<char,Char,Character>()
    #MACRO PrimitiveSubInterface<short,Short,Short>()
    #MACRO PrimitiveSubInterface<int,Int,Integer>()
    #MACRO PrimitiveSubInterface<long,Long,Long>()
    #MACRO PrimitiveSubInterface<float,Float,Float>()
    #MACRO PrimitiveSubInterface<double,Double,Double>()
    
    public abstract interface DoubleOutput<E> extends OmniStack<E>,OmniCollection.DoubleOutput<E>
    {
      public abstract double popDouble();
    }
    public abstract interface FloatOutput<E> extends DoubleOutput<E>,OmniCollection.FloatOutput<E>
    {
      public abstract float popFloat();
    }
    public abstract interface LongOutput<E> extends FloatOutput<E>,OmniCollection.LongOutput<E>
    {
      public abstract long popLong();
    }
    public abstract interface IntOutput<E> extends LongOutput<E>,OmniCollection.IntOutput<E>
    {
      public abstract int popInt();
    }
    public abstract interface ShortOutput<E> extends IntOutput<E>,OmniCollection.ShortOutput<E>
    {
      public abstract short popShort();
    }
    public abstract interface CharOutput<E> extends IntOutput<E>,OmniCollection.CharOutput<E>
    {
      public abstract char popChar();
    }
    public abstract interface ByteOutput<E> extends ShortOutput<E>,OmniCollection.ByteOutput<E>
    {
      public abstract byte popByte();
    }
    
    public abstract interface BooleanInput<E> extends OmniStack<E>,OmniCollection.BooleanInput<E>{
      public abstract void push(boolean val);
      public abstract void push(Boolean val);
    }
    public abstract interface ByteInput<E> extends BooleanInput<E>,OmniCollection.ByteInput<E>{
      public abstract void push(byte val);
      public abstract void push(Byte val);
    }
    public abstract interface CharInput<E> extends BooleanInput<E>,OmniCollection.CharInput<E>{
      public abstract void push(char val);
      public abstract void push(Character val);
    }
    public abstract interface ShortInput<E> extends ByteInput<E>,OmniCollection.ShortInput<E>{
      public abstract void push(short val);
      public abstract void push(Short val);
    }
    public abstract interface IntInput<E> extends CharInput<E>,ShortInput<E>,OmniCollection.IntInput<E>{
      public abstract void push(int val);
      public abstract void push(Integer val);
    }
    public abstract interface LongInput<E> extends IntInput<E>,OmniCollection.LongInput<E>{
      public abstract void push(long val);
      public abstract void push(Long val);
    }
    public abstract interface FloatInput<E> extends LongInput<E>,OmniCollection.FloatInput<E>{
      public abstract void push(float val);
      public abstract void push(Float val);
    }
    
    
    
#MACRODEF PrimitiveSubInterface<ARRTYPE,CLASSPREFIX,BOXEDTYPE>()
public abstract interface OfCLASSPREFIX extends OmniCollection<BOXEDTYPE>,OmniStack<BOXEDTYPE>,OmniCollection.OfPrimitive<BOXEDTYPE>,OfPrimitive<BOXEDTYPE>,OmniCollection.OfCLASSPREFIX,PeekAndPollIfc.CLASSPREFIXOutput<BOXEDTYPE>
#IFSWITCH ARRTYPE==boolean
,BooleanInput<BOXEDTYPE>,ByteOutput<BOXEDTYPE>,CharOutput<BOXEDTYPE>
#ELSEIFSWITCH ARRTYPE==double
,FloatInput<BOXEDTYPE>,DoubleOutput<BOXEDTYPE>
#ELSEIFNOTSWITCH ARRTYPE==Object
,CLASSPREFIXInput<BOXEDTYPE>,CLASSPREFIXOutput<BOXEDTYPE>
#ENDIF
{
  public abstract BOXEDTYPE pop();
  public abstract ARRTYPE popCLASSPREFIX();
#IFSWITCH ARRTYPE==boolean
  public default byte popByte()
  {
    return TypeUtil.castToByte(popCLASSPREFIX());
  }
  public default char popChar()
  {
    return TypeUtil.castToChar(popCLASSPREFIX());
  }
  public default short popShort()
  {
    return TypeUtil.castToByte(popCLASSPREFIX());
  }
  public default int popInt()
  {
    return TypeUtil.castToByte(popCLASSPREFIX());
  }
  public default long popLong()
  {
    return TypeUtil.castToLong(popCLASSPREFIX());
  }
  public default float popFloat()
  {
    return TypeUtil.castToFloat(popCLASSPREFIX());
  }
  public default double popDouble()
  {
    return TypeUtil.castToDouble(popCLASSPREFIX());
  }
#ELSEIFNOTSWITCH ARRTYPE==double
  #MACRO PopImpl<double,Double>()
  #IFNOTSWITCH ARRTYPE==float
  #MACRO PopImpl<float,Float>()
    #IFNOTSWITCH ARRTYPE==long
  #MACRO PopImpl<long,Long>()
      #IFNOTSWITCH ARRTYPE==int
  #MACRO PopImpl<int,Int>()
        #IFNOTSWITCH ARRTYPE==char,short
  #MACRO PopImpl<short,Short>()
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF
#IFSWITCH ARRTYPE==boolean
  @Override
#ENDIF
  public abstract void push(ARRTYPE val);
  public abstract void push(BOXEDTYPE val);
#IFNOTSWITCH ARRTYPE==boolean
  @Override
  public default void push(boolean val)
  {
    push((ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==double
    castToDouble
    #ELSEIFSWITCH ARRTYPE==float
    castToFloat
    #ELSEIFSWITCH ARRTYPE==long
    castToLong
    #ELSEIFSWITCH ARRTYPE==int,short,byte
    castToByte
    #ELSEIFSWITCH ARRTYPE==char
    castToChar
    #ELSE
     ERROR unknown array type ARRTYPE
    #ENDIF
    (val));
  }
  public default void push(Boolean val)
  {
    push((ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==double
    castToDouble
    #ELSEIFSWITCH ARRTYPE==float
    castToFloat
    #ELSEIFSWITCH ARRTYPE==long
    castToLong
    #ELSEIFSWITCH ARRTYPE==int,short,byte
    castToByte
    #ELSEIFSWITCH ARRTYPE==char
    castToChar
    #ELSE
     ERROR unknown array type ARRTYPE
    #ENDIF
    (val.booleanValue()));
  }
  #IFNOTSWITCH ARRTYPE==byte,short,char
  #MACRO PushImpl(char,Character)
  #ENDIF
  #IFNOTSWITCH ARRTYPE==byte,char
  #MACRO PushImpl(byte,Byte)
    #IFNOTSWITCH ARRTYPE==short
  #MACRO PushImpl(short,Short)
      #IFNOTSWITCH ARRTYPE==int
  #MACRO PushImpl(int,Integer)
        #IFNOTSWITCH ARRTYPE==long
  #MACRO PushImpl(long,Long)
          #IFNOTSWITCH ARRTYPE==float
  #MACRO PushImpl(float,Float)
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF
#IFSWITCH ARRTYPE==boolean,byte,int,long,double
  @Override
  public default int search(short val)
  {
    return search((int)val);
  }
#ENDIF
#IFSWITCH ARRTYPE==char,short,float
  @Override
  public default int search(byte val)
  {
    return search((short)val);
  }
#ENDIF
#IFSWITCH ARRTYPE==boolean,int,long,double
  @Override
  public default int search(byte val)
  {
    return search((int)val);
  }
  @Override
  public default int search(char val)
  {
    return search((int)val);
  }
#ENDIF  
}
#ENDDEF
  public abstract interface OfRef<E> extends OmniCollection<E>,OmniStack<E>,OmniCollection.OfRef<E>,PeekAndPollIfc<E>
  {
    public abstract E pop();
    public abstract void push(E val);
  }
}

#MACRODEF PushImpl(PRIMITIVEINPUTTYPE,BOXEDINPUTTYPE)
public default void push(PRIMITIVEINPUTTYPE val)
{
  push((ARRTYPE)val);
}
public default void push(BOXEDINPUTTYPE val)
{
  push((ARRTYPE)val.PRIMITIVEINPUTTYPEValue());
}
#ENDDEF

#MACRODEF PopImpl<RETTYPE,METHODSUFFIX>()
public default RETTYPE popMETHODSUFFIX()
{
  return popCLASSPREFIX();
}
#ENDDEF

#MACRODEF SearchMethodDefault<INPUTTYPE>()
@Override
public default int search(INPUTTYPE val)
{
  if(val!=null)
  {
    return search(val.
    #IFSWITCH INPUTTYPE==Boolean
    booleanValue
    #ELSEIFSWITCH INPUTTYPE==Byte
    byteValue
    #ELSEIFSWITCH INPUTTYPE==Character
    charValue
    #ELSEIFSWITCH INPUTTYPE==Short
    shortValue
    #ELSEIFSWITCH INPUTTYPE==Integer
    intValue
    #ELSEIFSWITCH INPUTTYPE==Long
    longValue
    #ELSEIFSWITCH INPUTTYPE==Float
    floatValue
    #ELSEIFSWITCH INPUTTYPE==Double
    doubleValue
    #ELSE
    ERROR unknown inputtype INPUTTYPE
    #ENDIF
    ());
  }
  return -1;
}
#ENDDEF

#MACRODEF SearchMethodDecl<INPUTTYPE>()
public abstract int search(INPUTTYPE val);
#ENDDEF

#MACRODEF BoxedMethods(METHODMACRO)
#MACRO METHODMACRO<Boolean>()
#MACRO METHODMACRO<Byte>()
#MACRO METHODMACRO<Character>()
#MACRO METHODMACRO<Short>()
#MACRO METHODMACRO<Integer>()
#MACRO METHODMACRO<Long>()
#MACRO METHODMACRO<Float>()
#MACRO METHODMACRO<Double>()
#ENDDEF

#MACRODEF PrimitiveMethods(METHODMACRO)
#MACRO METHODMACRO<boolean>()
#MACRO METHODMACRO<byte>()
#MACRO METHODMACRO<char>()
#MACRO METHODMACRO<short>()
#MACRO METHODMACRO<int>()
#MACRO METHODMACRO<long>()
#MACRO METHODMACRO<float>()
#MACRO METHODMACRO<double>()
#ENDDEF