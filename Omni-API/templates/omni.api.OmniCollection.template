#TYPEDEF OfGeneric
package omni.api;

import java.util.function.Consumer;
import java.util.function.DoubleConsumer;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.IntFunction;
import java.util.function.IntPredicate;
import java.util.function.LongConsumer;
import java.util.function.LongPredicate;
import java.util.function.Predicate;
import omni.function.BooleanConsumer;
import omni.function.BooleanPredicate;
import omni.function.ByteConsumer;
import omni.function.BytePredicate;
import omni.function.CharConsumer;
import omni.function.CharPredicate;
import omni.function.FloatConsumer;
import omni.function.FloatPredicate;
import omni.function.ShortConsumer;
import omni.function.ShortPredicate;
import java.util.Collection;
//TODO integration into Java Collection library
public abstract interface OmniCollection<E> extends Collection<E>
{
  /**
   * TODO hopefully they will add pattern-matching switch statements to make this irrelevant
   */
  //public abstract DataType getDataType();

  @SuppressWarnings("unchecked")
  @Override
  default public boolean addAll(Collection<? extends E> that){
    //TODO override in lower classes and remove this
    boolean changed=false;
    for(var thatVal:that.toArray()){
      changed|=this.add((E)thatVal);
    }
    return changed;
  }
  @Override
  default public boolean containsAll(Collection<?> that){
    //TODO override in lower classes and remove this
    for(var thatVal:that){
      if(!this.contains(thatVal)){
        return false;
      }
    }
    return true;
  }
  @Override
  default public boolean removeAll(Collection<?> that){
    //TODO override this in lower classes and remove this
    boolean changed=false;
    for(var thatVal:that){
      changed|=this.remove(thatVal);
    }
    return changed;
  }
  @Override
  default public boolean retainAll(Collection<?> that){
    //TODO override this in lower classes and remove this
    boolean changed=false;
    for(var itr=this.iterator();itr.hasNext();){
      if(!that.contains(itr.next())){
        changed=true;
        itr.remove();
      }
    }
    return changed;
  }

  //TODO add the rest of the methods
  //public abstract boolean add(E val);
  public abstract OmniIterator<E> iterator();
  public abstract void clear();
  #MACRO ContainsMethodDecl<Object>()
  #MACRO PrimitiveMethods(ContainsMethodDecl)
  #MACRO BoxedMethods(ContainsMethodDecl)
  public abstract boolean contains(Byte val);
  public abstract boolean contains(Character val);
  public abstract boolean contains(Short val);
  public abstract boolean removeVal(Byte val);
  public abstract boolean removeVal(Character val);
  public abstract boolean removeVal(Short val);
  public abstract boolean remove(Object val);
  #MACRO PrimitiveMethods(RemoveValMethodDecl)
  #MACRO BoxedMethods(RemoveValMethodDecl)
  public abstract boolean isEmpty();
  public abstract int size();
  public abstract Object[] toArray();
  public abstract <T> T[] toArray(IntFunction<T[]> arrConstructor);
  public abstract <T> T[] toArray(T[] dst);
  public abstract interface OfPrimitive<E> extends OmniCollection<E>
  {
    public abstract boolean addAll(OmniCollection.OfBoolean that);
    public abstract boolean add(boolean val);
    #MACRO BoxedMethods(ContainsMethodDefault)
    #MACRO BoxedMethods(RemoveValMethodDefault)
  }
  #MACRO PrimitiveSubInterface<boolean,Boolean,Boolean>()
  #MACRO PrimitiveSubInterface<byte,Byte,Byte>()
  #MACRO PrimitiveSubInterface<char,Char,Character>()
  #MACRO PrimitiveSubInterface<short,Short,Short>()
  #MACRO PrimitiveSubInterface<int,Int,Integer>()
  #MACRO PrimitiveSubInterface<long,Long,Long>()
  #MACRO PrimitiveSubInterface<float,Float,Float>()
  #MACRO PrimitiveSubInterface<double,Double,Double>()
  


  #MACRO OutputSubInterface<Double>(double,)
  #MACRO OutputSubInterface<Float>(float,Double)
  #MACRO OutputSubInterface<Long>(long,Float)
  #MACRO OutputSubInterface<Int>(int,Long)
  #MACRO OutputSubInterface<Short>(short,Int)
  #MACRO OutputSubInterface<Char>(char,Int)
  #MACRO OutputSubInterface<Byte>(byte,Short)
  
  public abstract interface BooleanInput<E> extends OmniCollection<E>{
    public abstract boolean add(boolean val);
    public abstract boolean add(Boolean val);
    public abstract boolean addAll(OmniCollection.OfBoolean that);
  }
  public abstract interface ByteInput<E> extends BooleanInput<E>{
    public abstract boolean add(byte val);
    public abstract boolean add(Byte val);
    public abstract boolean addAll(OmniCollection.OfByte that);
  }
  public abstract interface CharInput<E> extends BooleanInput<E>{
    public abstract boolean add(char val);
    public abstract boolean add(Character val);
    public abstract boolean addAll(OmniCollection.OfChar that);
  }
  public abstract interface ShortInput<E> extends ByteInput<E>{
    public abstract boolean add(short val);
    public abstract boolean add(Short val);
    public abstract boolean addAll(OmniCollection.OfShort that);
  }
  public abstract interface IntInput<E> extends CharInput<E>,ShortInput<E>{
    public abstract boolean add(int val);
    public abstract boolean add(Integer val);
    public abstract boolean addAll(OmniCollection.OfInt that);
  }
  public abstract interface LongInput<E> extends IntInput<E>{
    public abstract boolean add(long val);
    public abstract boolean add(Long val);
    public abstract boolean addAll(OmniCollection.OfLong that);
  }
  public abstract interface FloatInput<E> extends LongInput<E>{
    public abstract boolean add(float val);
    public abstract boolean add(Float val);
    public abstract boolean addAll(OmniCollection.OfFloat that);
  }

  
  public abstract interface OfRef<E> extends OmniCollection<E>,Iterable<E>
  {
    /*
    @Override
    public default DataType getDataType(){
      return DataType.REF;
    }
    */
    @SuppressWarnings("unchecked")
    public default boolean addAll(OmniCollection.OfRef<? extends E> that){
    //TODO implement in lower classes and remove this
      var changed=false;
      for(var thatVal:that.toArray()){
        changed|=this.add((E)thatVal);
      }
      return changed;
    }
    public abstract boolean add(E val);
    public abstract void forEach(Consumer<? super E> action);
    public abstract OmniIterator.OfRef<E> iterator();
    public abstract boolean removeIf(Predicate<? super E> filter);
  }
}
#MACRODEF OutputSubInterface<CLASSPREFIX>(EXPOSEDTYPE,EXTENDS)
#IFSWITCH CLASSPREFIX==Double
public abstract interface CLASSPREFIXOutput<E> extends OmniCollection<E>{
#ELSE
public abstract interface CLASSPREFIXOutput<E> extends OmniCollection.EXTENDSOutput<E>{
#ENDIF
  EXPOSEDTYPE[] toCLASSPREFIXArray();
  OmniIterator.CLASSPREFIXOutput<E> iterator(); 
}
#ENDDEF  
#MACRODEF PrimitiveSubInterface<ARRTYPE,CLASSPREFIX,BOXEDTYPE>()
public abstract interface OfCLASSPREFIX extends OfPrimitive<BOXEDTYPE>,Iterable<BOXEDTYPE>
#IFSWITCH ARRTYPE==boolean
,BooleanInput<BOXEDTYPE>,ByteOutput<BOXEDTYPE>,CharOutput<BOXEDTYPE>
#ELSEIFSWITCH ARRTYPE==double
,FloatInput<BOXEDTYPE>,DoubleOutput<BOXEDTYPE>
#ELSEIFNOTSWITCH ARRTYPE==Object
,CLASSPREFIXInput<BOXEDTYPE>,CLASSPREFIXOutput<BOXEDTYPE>
#ENDIF
{
  /*
  @Override
  public default DataType getDataType(){
#IFSWITCH CLASSPREFIX==Boolean
    return DataType.BOOLEAN;
#ELSEIFSWITCH CLASSPREFIX==Byte
    return DataType.BYTE;
#ELSEIFSWITCH CLASSPREFIX==Char
    return DataType.CHAR;
#ELSEIFSWITCH CLASSPREFIX==Short
    return DataType.SHORT;
#ELSEIFSWITCH CLASSPREFIX==Int
    return DataType.INT;
#ELSEIFSWITCH CLASSPREFIX==Long
    return DataType.LONG;
#ELSEIFSWITCH CLASSPREFIX==Float
    return DataType.FLOAT;
#ELSEIFSWITCH CLASSPREFIX==Double
    return DataType.DOUBLE;
#ELSE
  ERROR unknown type CLASSPREFIX
#ENDIF
  }
  */
  
  
  

  public default boolean addAll(OmniCollection.OfRef<? extends BOXEDTYPE> that){
    //TODO implement in lower classes and remove this
    var changed=false;
    for(var thatVal:that.toArray(BOXEDTYPE[]::new)){
      changed|=this.add((ARRTYPE)thatVal);
    }
    return changed;
  }
  public default boolean addAll(OmniCollection.OfBoolean that){
    //TODO implement in lower classes and remove this
    var changed=false;
    final ARRTYPE[] thatArr;
    for(int i=0,bound=(thatArr=that.toCLASSPREFIXArray()).length;i<bound;++i){
      changed|=this.add(thatArr[i]);
    }
    return changed;
  }
#IFNOTSWITCH CLASSPREFIX==Boolean
  public default boolean addAll(OmniCollection.CLASSPREFIXOutput<?> that){
    //TODO implement in lower classes and remove this
    var changed=false;
    final ARRTYPE[] thatArr;
    for(int i=0,bound=(thatArr=that.toCLASSPREFIXArray()).length;i<bound;++i){
      changed|=this.add(thatArr[i]);
    }
    return changed;
  }
  #IFNOTSWITCH CLASSPREFIX==Char
  public default boolean addAll(OmniCollection.OfByte that){
    //TODO implement in lower classes and remove this
    return addAll((OmniCollection.CLASSPREFIXOutput<?>)that);
  }
    #IFNOTSWITCH CLASSPREFIX==Byte
  public default boolean addAll(OmniCollection.OfShort that){
    //TODO implement in lower classes and remove this
    return addAll((OmniCollection.CLASSPREFIXOutput<?>)that);
  }
      #IFNOTSWITCH CLASSPREFIX==Short
  public default boolean addAll(OmniCollection.OfInt that){
    //TODO implement in lower classes and remove this
    return addAll((OmniCollection.CLASSPREFIXOutput<?>)that);
  }
        #IFNOTSWITCH CLASSPREFIX==Int
  public default boolean addAll(OmniCollection.OfLong that){
    //TODO implement in lower classes and remove this
    return addAll((OmniCollection.CLASSPREFIXOutput<?>)that);
  }
          #IFNOTSWITCH CLASSPREFIX==Long
  public default boolean addAll(OmniCollection.OfFloat that){
    //TODO implement in lower classes and remove this
    return addAll((OmniCollection.CLASSPREFIXOutput<?>)that);
  }       
            #IFNOTSWITCH CLASSPREFIX==Float
  public default boolean addAll(OmniCollection.OfDouble that){
    //TODO implement in lower classes and remove this
    return addAll((OmniCollection.CLASSPREFIXOutput<?>)that);
  }  
            #ENDIF
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
  #IFNOTSWITCH CLASSPREFIX==Byte,Short
  public default boolean addAll(OmniCollection.OfChar that){
    //TODO implement in lower classes and remove this
    return addAll((OmniCollection.CLASSPREFIXOutput<?>)that);
  }
  #ENDIF
#ENDIF

  #MACRO ContainsMethodDefault<Byte>()
  #MACRO ContainsMethodDefault<Character>()
  #MACRO ContainsMethodDefault<Short>()
  #MACRO RemoveValMethodDefault<Byte>()
  #MACRO RemoveValMethodDefault<Character>()
  #MACRO RemoveValMethodDefault<Short>()
  @Override
  public abstract boolean add(boolean val);
  public abstract boolean add(BOXEDTYPE val);
  public abstract void forEach(CLASSPREFIXConsumer action);
  public abstract void forEach(Consumer<? super BOXEDTYPE> action);
  public abstract boolean removeIf(CLASSPREFIXPredicate filter);
  public abstract boolean removeIf(Predicate<? super BOXEDTYPE> filter);
  public abstract OmniIterator.OfCLASSPREFIX iterator();
  @Override
  public abstract BOXEDTYPE[] toArray();
  public abstract ARRTYPE[] toCLASSPREFIXArray();
  #IFNOTSWITCH ARRTYPE==double
  public abstract double[] toDoubleArray();
    #IFNOTSWITCH ARRTYPE==float
  public abstract float[] toFloatArray();
      #IFNOTSWITCH ARRTYPE==long
  public abstract long[] toLongArray();
        #IFNOTSWITCH ARRTYPE==int
  public abstract int[] toIntArray();
          #IFNOTSWITCH ARRTYPE==short,char
  public abstract short[] toShortArray();
            #IFNOTSWITCH ARRTYPE==byte
  public abstract byte[] toByteArray();
  public abstract char[] toCharArray();
            #ENDIF
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
  #IFSWITCH ARRTYPE==boolean,byte,int,long
  @Override
  public default boolean contains(short val)
  {
    return contains((int)val);
  }
  @Override
  public default boolean removeVal(short val)
  {
    return removeVal((int)val);
  }
    #IFSWITCH ARRTYPE==boolean
  @Override
  public default boolean contains(byte val)
  {
    return contains((int)val);
  }
  @Override
  public default boolean contains(char val)
  {
    return contains((int)val);
  }
  @Override
  public default boolean removeVal(byte val)
  {
    return removeVal((int)val);
  }
  @Override
  public default boolean removeVal(char val)
  {
    return removeVal((int)val);
  }
    #ENDIF
  #ENDIF
  #IFSWITCH ARRTYPE==double
  public abstract boolean add(float val);
  public default boolean add(Float val)
  {
    return add(val.floatValue());
  }
  #ENDIF
  #IFSWITCH ARRTYPE==float
  public default boolean contains(byte val){
    return contains((short)val);
  }
  public default boolean removeVal(byte val){
    return removeVal((short)val);
  }
  #ELSEIFSWITCH ARRTYPE==double
  public default boolean contains(byte val){
    return contains((int)val);
  }
  public default boolean removeVal(byte val){
    return removeVal((int)val);
  }
  public default boolean contains(short val){
    return contains((int)val);
  }
  public default boolean removeVal(short val){
    return removeVal((int)val);
  }
  public default boolean contains(char val){
    return contains((int)val);
  }
  public default boolean removeVal(char val){
    return removeVal((int)val);
  }
  #ENDIF
  #IFSWITCH ARRTYPE==float
  public default boolean add(byte val)
  {
    return add((short)val);
  }
  public default boolean add(Byte val)
  {
    return add((short)val.byteValue());
  }
  public abstract boolean add(char val);
  public default boolean add(Character val)
  {
    return add(val.charValue());
  }
  public abstract boolean add(long val);
  public default boolean add(Long val)
  {
    return add(val.longValue());
  }
  public abstract boolean add(short val);
  public default boolean add(Short val)
  {
    return add(val.shortValue());
  }
  #ENDIF
  #IFSWITCH ARRTYPE==double
  public default boolean add(byte val)
  {
    return add((int)val);
  }
  public default boolean add(Byte val)
  {
    return add(val.intValue());
  }
  public default boolean add(char val){
    return add((int)val);
  }
  public default boolean add(Character val)
  {
    return add((int)val.charValue());
  }
  public abstract boolean add(long val);
  public default boolean add(Long val)
  {
    return add(val.longValue());
  }
  public default boolean add(short val){
    return add((int)val);
  }
  public default boolean add(Short val)
  {
    return add(val.intValue());
  }
  #ENDIF
  #IFSWITCH ARRTYPE==int,long
  public default boolean add(Character val)
  {
    return add((char)val.charValue());
  }
  public default boolean add(short val)
  {
    return add((int)val);
  }
  public default boolean add(Short val)
  {
    return add((int)val.shortValue());
  }
  #ENDIF
  #IFSWITCH ARRTYPE==int,long,short
  public default boolean add(Byte val)
  {
    return add((byte)val.byteValue());
  }
  #ENDIF
  #IFSWITCH ARRTYPE==long,float,double
  public abstract boolean add(int val);
  public default boolean add(Integer val)
  {
    return add(val.intValue());
  }
  #ENDIF
  
  #IFNOTSWITCH ARRTYPE==boolean
  public abstract boolean add(ARRTYPE val);
  public default boolean add(Boolean val)
  {
    return add(val.booleanValue());
  }
  #ENDIF
  
}
#ENDDEF


#MACRODEF ContainsMethodDefault<INPUTTYPE>()
@Override
public default boolean contains(INPUTTYPE val)
{
  return val!=null && contains(
  #IFSWITCH INPUTTYPE==Boolean
    val.booleanValue()
  #ELSEIFSWITCH INPUTTYPE==Byte
    #IFSWITCH CLASSPREFIX==Boolean,Int,Long,Double
    val.intValue()
    #ELSEIFSWITCH CLASSPREFIX==Short,Float
    val.shortValue()
    #ELSE
    val.byteValue()
    #ENDIF
  #ELSEIFSWITCH INPUTTYPE==Character
    #IFSWITCH CLASSPREFIX==Double
    (int)val.charValue()
    #ELSE
    val.charValue()
    #ENDIF
  #ELSEIFSWITCH INPUTTYPE==Short
    #IFSWITCH CLASSPREFIX==Boolean,Byte,Int,Long,Double
    val.intValue()
    #ELSE
    val.shortValue()
    #ENDIF
  #ELSEIFSWITCH INPUTTYPE==Integer
    val.intValue()
  #ELSEIFSWITCH INPUTTYPE==Long
    val.longValue()
  #ELSEIFSWITCH INPUTTYPE==Float
    val.floatValue()
  #ELSEIFSWITCH INPUTTYPE==Double
    val.doubleValue()
  #ELSE
    ERROR unknown input type INPUTTYPE
  #ENDIF  
  );
}
#ENDDEF

#MACRODEF RemoveValMethodDefault<INPUTTYPE>()
@Override
public default boolean removeVal(INPUTTYPE val)
{
  return val!=null && removeVal(
  #IFSWITCH INPUTTYPE==Boolean
    val.booleanValue()
  #ELSEIFSWITCH INPUTTYPE==Byte
    #IFSWITCH CLASSPREFIX==Boolean,Int,Long,Double
    val.intValue()
    #ELSEIFSWITCH CLASSPREFIX==Short,Float
    val.shortValue()
    #ELSE
    val.byteValue()
    #ENDIF
  #ELSEIFSWITCH INPUTTYPE==Character
    #IFSWITCH CLASSPREFIX==Double
    (int)val.charValue()
    #ELSE
    val.charValue()
    #ENDIF
  #ELSEIFSWITCH INPUTTYPE==Short
    #IFSWITCH CLASSPREFIX==Boolean,Byte,Int,Long,Double
    val.intValue()
    #ELSE
    val.shortValue()
    #ENDIF
  #ELSEIFSWITCH INPUTTYPE==Integer
    val.intValue()
  #ELSEIFSWITCH INPUTTYPE==Long
    val.longValue()
  #ELSEIFSWITCH INPUTTYPE==Float
    val.floatValue()
  #ELSEIFSWITCH INPUTTYPE==Double
    val.doubleValue()
  #ELSE
    ERROR unknown input type INPUTTYPE
  #ENDIF  
  );
}
#ENDDEF

#MACRODEF ContainsMethodDecl<INPUTTYPE>()
public abstract boolean contains(INPUTTYPE val);
#ENDDEF
#MACRODEF RemoveValMethodDecl<INPUTTYPE>()
public abstract boolean removeVal(INPUTTYPE val);
#ENDDEF

#MACRODEF BoxedMethods(METHODMACRO)
#MACRO METHODMACRO<Boolean>()
#MACRO METHODMACRO<Integer>()
#MACRO METHODMACRO<Long>()
#MACRO METHODMACRO<Float>()
#MACRO METHODMACRO<Double>()
#ENDDEF

#MACRODEF PrimitiveMethods(METHODMACRO)
#MACRO METHODMACRO<boolean>()
#MACRO METHODMACRO<byte>()
#MACRO METHODMACRO<char>()
#MACRO METHODMACRO<short>()
#MACRO METHODMACRO<int>()
#MACRO METHODMACRO<long>()
#MACRO METHODMACRO<float>()
#MACRO METHODMACRO<double>()
#ENDDEF


