#TYPEDEF OfGeneric
package omni.api;
import java.util.Comparator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.UnaryOperator;
import omni.function.BooleanComparator;
import omni.function.BooleanPredicate;
import omni.function.ByteComparator;
import omni.function.ByteUnaryOperator;
import omni.function.CharComparator;
import omni.function.CharUnaryOperator;
import omni.function.DoubleComparator;
import omni.function.FloatComparator;
import omni.function.FloatUnaryOperator;
import omni.function.LongComparator;
import omni.function.ShortComparator;
import omni.function.ShortUnaryOperator;
import omni.util.TypeUtil;
import java.util.List;
import java.util.Collection;
public abstract interface OmniList<E> extends OmniCollection<E>,List<E>
{
  

  @Override
  default boolean containsAll(Collection<?> that){
    //TODO implement in lower classes and remove this
    return OmniCollection.super.containsAll(that);
  }
  @Override
  default boolean removeAll(Collection<?> that){
    //TODO implement in lower classes and remove this
    return OmniCollection.super.removeAll(that);
  }
  @Override
  default boolean retainAll(Collection<?> that){
    //TODO implement in lower classes and remove this
    return OmniCollection.super.retainAll(that);
  }
  @Override
  default boolean addAll(Collection<? extends E> that){
    //TODO implement in lower classes and remove this
    return OmniCollection.super.addAll(that);
  }
  @Override
  default boolean addAll(int index,Collection<? extends E> that){
    //TODO implement in lower classes and remove this
    var thisItr=this.listIterator(index);
    var thatItr=that.iterator();
    if(thatItr.hasNext()){
      do{
        thisItr.add(thatItr.next());
      }while(thatItr.hasNext());
      return true;
    }
    return false;
  }
  

  public abstract OmniListIterator<E> listIterator();
  public abstract OmniListIterator<E> listIterator(int index);
  public abstract OmniList<E> subList(int fromIndex,int toIndex);
  public abstract int indexOf(Object val);
  #MACRO PrimitiveMethods(IndexOfMethodDecl)
  #MACRO BoxedMethods(IndexOfMethodDecl)
  public abstract int lastIndexOf(Object val);
  #MACRO PrimitiveMethods(LastIndexOfMethodDecl)
  #MACRO BoxedMethods(LastIndexOfMethodDecl)
  public abstract void stableAscendingSort();
  public abstract void stableDescendingSort();
  //TODO add the rest of the methods
  public abstract E get(int index);
  public abstract E remove(int index);
  //public abstract E set(int index,E val);
  //public abstract boolean add(int index,E val);
  //public abstract void put(int index,E val);
  //public abstract Object clone();
  
  
  public abstract interface OfPrimitive<E> extends OmniList<E>,OmniCollection.OfPrimitive<E>
  {
     public abstract void add(int index,boolean val);
     #MACRO BoxedMethods(IndexOfMethodDefault)
     #MACRO BoxedMethods(LastIndexOfMethodDefault)
  }
  
  public abstract interface DoubleOutput<E> extends OmniList<E>,OmniCollection.DoubleOutput<E>
  {
    public abstract OmniListIterator.DoubleOutput<E> listIterator();
    public abstract OmniListIterator.DoubleOutput<E> listIterator(int index);
    public abstract OmniList.DoubleOutput<E> subList(int fromIndex,int toIndex);
    public abstract double getDouble(int index);
    public abstract double removeDoubleAt(int index);
  }
  public abstract interface FloatOutput<E> extends DoubleOutput<E>,OmniCollection.FloatOutput<E>
  {
    public abstract OmniListIterator.FloatOutput<E> listIterator();
    public abstract OmniListIterator.FloatOutput<E> listIterator(int index);
    public abstract OmniList.FloatOutput<E> subList(int fromIndex,int toIndex);
    public abstract float getFloat(int index);
    public abstract float removeFloatAt(int index);
  }
  public abstract interface LongOutput<E> extends FloatOutput<E>,OmniCollection.LongOutput<E>
  {
    public abstract OmniListIterator.LongOutput<E> listIterator();
    public abstract OmniListIterator.LongOutput<E> listIterator(int index);
    public abstract OmniList.LongOutput<E> subList(int fromIndex,int toIndex);
    public abstract long getLong(int index);
    public abstract long removeLongAt(int index);
  }
  public abstract interface IntOutput<E> extends LongOutput<E>,OmniCollection.IntOutput<E>
  {
    public abstract OmniListIterator.IntOutput<E> listIterator();
    public abstract OmniListIterator.IntOutput<E> listIterator(int index);
    public abstract OmniList.IntOutput<E> subList(int fromIndex,int toIndex);
    public abstract int getInt(int index);
    public abstract int removeIntAt(int index);
  }
  public abstract interface ShortOutput<E> extends IntOutput<E>,OmniCollection.ShortOutput<E>
  {
    public abstract OmniListIterator.ShortOutput<E> listIterator();
    public abstract OmniListIterator.ShortOutput<E> listIterator(int index);
    public abstract OmniList.ShortOutput<E> subList(int fromIndex,int toIndex);
    public abstract short getShort(int index);
    public abstract short removeShortAt(int index);
  }
  public abstract interface CharOutput<E> extends IntOutput<E>,OmniCollection.CharOutput<E>
  {
    public abstract OmniListIterator.CharOutput<E> listIterator();
    public abstract OmniListIterator.CharOutput<E> listIterator(int index);
    public abstract OmniList.CharOutput<E> subList(int fromIndex,int toIndex);
    public abstract char getChar(int index);
    public abstract char removeCharAt(int index);
  }
  public abstract interface ByteOutput<E> extends ShortOutput<E>,OmniCollection.ByteOutput<E>
  {
    public abstract OmniListIterator.ByteOutput<E> listIterator();
    public abstract OmniListIterator.ByteOutput<E> listIterator(int index);
    public abstract OmniList.ByteOutput<E> subList(int fromIndex,int toIndex);
    public abstract byte getByte(int index);
    public abstract byte removeByteAt(int index);
  }
  public abstract interface BooleanInput<E> extends OmniList<E>,OmniCollection.BooleanInput<E>
  {
    public abstract void add(int index,boolean val);
    public abstract void add(int index,Boolean val);
    public abstract void put(int index,boolean val);
    public abstract void put(int index,Boolean val);
    public abstract OmniListIterator.BooleanInput<E> listIterator();
    public abstract OmniListIterator.BooleanInput<E> listIterator(int index);
    public abstract OmniList.BooleanInput<E> subList(int fromIndex,int toIndex);
  }
  public abstract interface ByteInput<E> extends BooleanInput<E>,OmniCollection.ByteInput<E>
  {
    public abstract void add(int index,byte val);
    public abstract void add(int index,Byte val);
    public abstract void put(int index,byte val);
    public abstract void put(int index,Byte val);
    public abstract OmniListIterator.ByteInput<E> listIterator();
    public abstract OmniListIterator.ByteInput<E> listIterator(int index);
    public abstract OmniList.ByteInput<E> subList(int fromIndex,int toIndex);
  }
  public abstract interface CharInput<E> extends BooleanInput<E>,OmniCollection.CharInput<E>
  {
    public abstract void add(int index,char val);
    public abstract void add(int index,Character val);
    public abstract void put(int index,char val);
    public abstract void put(int index,Character val);
    public abstract OmniListIterator.CharInput<E> listIterator();
    public abstract OmniListIterator.CharInput<E> listIterator(int index);
    public abstract OmniList.CharInput<E> subList(int fromIndex,int toIndex);
  }
  public abstract interface ShortInput<E> extends ByteInput<E>,OmniCollection.ShortInput<E>
  {
    public abstract void add(int index,short val);
    public abstract void add(int index,Short val);
    public abstract void put(int index,short val);
    public abstract void put(int index,Short val);
    public abstract OmniListIterator.ShortInput<E> listIterator();
    public abstract OmniListIterator.ShortInput<E> listIterator(int index);
    public abstract OmniList.ShortInput<E> subList(int fromIndex,int toIndex);
  }
  public abstract interface IntInput<E> extends ShortInput<E>,CharInput<E>,OmniCollection.IntInput<E>
  {
    public abstract void add(int index,int val);
    public abstract void add(int index,Integer val);
    public abstract void put(int index,int val);
    public abstract void put(int index,Integer val);
    public abstract OmniListIterator.IntInput<E> listIterator();
    public abstract OmniListIterator.IntInput<E> listIterator(int index);
    public abstract OmniList.IntInput<E> subList(int fromIndex,int toIndex);
  }
  public abstract interface LongInput<E> extends IntInput<E>,OmniCollection.LongInput<E>
  {
    public abstract void add(int index,long val);
    public abstract void add(int index,Long val);
    public abstract void put(int index,long val);
    public abstract void put(int index,Long val);
    public abstract OmniListIterator.LongInput<E> listIterator();
    public abstract OmniListIterator.LongInput<E> listIterator(int index);
    public abstract OmniList.LongInput<E> subList(int fromIndex,int toIndex);
  }
  public abstract interface FloatInput<E> extends LongInput<E>,OmniCollection.FloatInput<E>
  {
    public abstract void add(int index,float val);
    public abstract void add(int index,Float val);
    public abstract void put(int index,float val);
    public abstract void put(int index,Float val);
    public abstract OmniListIterator.FloatInput<E> listIterator();
    public abstract OmniListIterator.FloatInput<E> listIterator(int index);
    public abstract OmniList.FloatInput<E> subList(int fromIndex,int toIndex);
  }

    #MACRO PrimitiveSubInterface<boolean,Boolean,Boolean>()
    #MACRO PrimitiveSubInterface<byte,Byte,Byte>()
    #MACRO PrimitiveSubInterface<char,Char,Character>()
    #MACRO PrimitiveSubInterface<short,Short,Short>()
    #MACRO PrimitiveSubInterface<int,Int,Integer>()
    #MACRO PrimitiveSubInterface<long,Long,Long>()
    #MACRO PrimitiveSubInterface<float,Float,Float>()
    #MACRO PrimitiveSubInterface<double,Double,Double>()
    
#MACRODEF PrimitiveSubInterface<ARRTYPE,CLASSPREFIX,BOXEDTYPE>()
public abstract interface OfCLASSPREFIX extends OfPrimitive<BOXEDTYPE>,OmniCollection.OfCLASSPREFIX
#IFSWITCH ARRTYPE==boolean
,BooleanInput<BOXEDTYPE>,ByteOutput<BOXEDTYPE>,CharOutput<BOXEDTYPE>
#ELSEIFSWITCH ARRTYPE==double
,FloatInput<BOXEDTYPE>,DoubleOutput<BOXEDTYPE>
#ELSEIFNOTSWITCH ARRTYPE==Object
,CLASSPREFIXInput<BOXEDTYPE>,CLASSPREFIXOutput<BOXEDTYPE>
#ENDIF
{
  public abstract BOXEDTYPE get(int index);
  public abstract ARRTYPE getCLASSPREFIX(int index);
#IFSWITCH ARRTYPE==boolean
  @Override public abstract void add(int index,boolean val);
#ENDIF
  public abstract void add(int index,BOXEDTYPE val);
  public abstract OmniListIterator.OfCLASSPREFIX listIterator();
  public abstract OmniListIterator.OfCLASSPREFIX listIterator(int index);
  public abstract void put(int index,ARRTYPE val);
  public default void put(int index,BOXEDTYPE val)
  {
    put(index,val.ARRTYPEValue());
  }
  public abstract BOXEDTYPE remove(int index);
  public abstract ARRTYPE removeCLASSPREFIXAt(int index);
  #IFSWITCH ARRTYPE==boolean
  public abstract void replaceAll(CLASSPREFIXPredicate operator);
  #ELSE
  public abstract void add(int index,ARRTYPE val);
  public abstract void replaceAll(CLASSPREFIXUnaryOperator operator);
  #ENDIF
  public abstract void replaceAll(UnaryOperator<BOXEDTYPE> operator);
  public abstract ARRTYPE set(int index,ARRTYPE val);
  public abstract BOXEDTYPE set(int index,BOXEDTYPE val);
  #IFSWITCH ARRTYPE==int
  public abstract void sort(CLASSPREFIXBinaryOperator sorter);
  public abstract void unstableSort(CLASSPREFIXBinaryOperator sorter);
  #ELSE
  public abstract void sort(CLASSPREFIXComparator sorter);
    #IFNOTSWITCH ARRTYPE==boolean
  public abstract void unstableSort(CLASSPREFIXComparator sorter);  
    #ENDIF
  #ENDIF
  public abstract void sort(Comparator<? super BOXEDTYPE> sorter);
  public abstract OmniList.OfCLASSPREFIX subList(int fromIndex,int toIndex);
  
  
#IFSWITCH ARRTYPE==boolean
  public default byte getByte(int index){
    return TypeUtil.castToByte(getCLASSPREFIX(index));
  }
  public default char getChar(int index){
    return TypeUtil.castToChar(getCLASSPREFIX(index));
  }
  public default double getDouble(int index){
    return TypeUtil.castToDouble(getCLASSPREFIX(index));
  }
  public default float getFloat(int index){
    return TypeUtil.castToFloat(getCLASSPREFIX(index));
  }
  public default int getInt(int index){
    return TypeUtil.castToByte(getCLASSPREFIX(index));
  }
  public default long getLong(int index){
    return TypeUtil.castToLong(getCLASSPREFIX(index));
  }
  public default short getShort(int index){
    return TypeUtil.castToByte(getCLASSPREFIX(index));
  }
  public default byte removeByteAt(int index){
    return TypeUtil.castToByte(removeCLASSPREFIXAt(index));
  }
  public default char removeCharAt(int index){
    return TypeUtil.castToChar(removeCLASSPREFIXAt(index));
  }
  public default double removeDoubleAt(int index){
    return TypeUtil.castToDouble(removeCLASSPREFIXAt(index));
  }
  public default float removeFloatAt(int index){
    return TypeUtil.castToFloat(removeCLASSPREFIXAt(index));
  }
  public default int removeIntAt(int index){
    return TypeUtil.castToByte(removeCLASSPREFIXAt(index));
  }
  public default long removeLongAt(int index){
    return TypeUtil.castToLong(removeCLASSPREFIXAt(index));
  }
  public default short removeShortAt(int index){
    return TypeUtil.castToByte(removeCLASSPREFIXAt(index));
  }
#ELSE
  public default void add(int index,boolean val)
  {
    add(index,(ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==byte,short,int
    castToByte
    #ELSEIFSWITCH ARRTYPE==char,long,float,double
    castToCLASSPREFIX
    #ELSE
    ERROR unknown array type ARRTYPE
    #ENDIF
    (val));
  }
  public default void add(int index,Boolean val)
  {
    add(index,(ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==byte,short,int
    castToByte
    #ELSEIFSWITCH ARRTYPE==char,long,float,double
    castToCLASSPREFIX
    #ELSE
    ERROR unknown array type ARRTYPE
    #ENDIF
    (val.booleanValue()));
  }
  public default void put(int index,boolean val)
  {
    put(index,(ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==byte,short,int
    castToByte
    #ELSEIFSWITCH ARRTYPE==char,long,float,double
    castToCLASSPREFIX
    #ELSE
    ERROR unknown array type ARRTYPE
    #ENDIF
    (val));
  }
  public default void put(int index,Boolean val)
  {
    put(index,(ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==byte,short,int
    castToByte
    #ELSEIFSWITCH ARRTYPE==char,long,float,double
    castToCLASSPREFIX
    #ELSE
    ERROR unknown array type ARRTYPE
    #ENDIF
    (val.booleanValue()));
  }
  #IFNOTSWITCH ARRTYPE==double
  #MACRO GetAndRemoveImpl<double,Double>()
    #IFNOTSWITCH ARRTYPE==float
  #MACRO GetAndRemoveImpl<float,Float>()
      #IFNOTSWITCH ARRTYPE==long
  #MACRO GetAndRemoveImpl<long,Long>()
        #IFNOTSWITCH ARRTYPE==int
  #MACRO GetAndRemoveImpl<int,Int>()
          #IFNOTSWITCH ARRTYPE==char,short
  #MACRO GetAndRemoveImpl<short,Short>()
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
  #IFNOTSWITCH ARRTYPE==byte,short,char
  #MACRO AddAndPutImpl<char,Character>()
  #ENDIF
  #IFNOTSWITCH ARRTYPE==byte,char
  #MACRO AddAndPutImpl<byte,Byte>()
    #IFNOTSWITCH ARRTYPE==short
  #MACRO AddAndPutImpl<short,Short>()
      #IFNOTSWITCH ARRTYPE==int
  #MACRO AddAndPutImpl<int,Integer>()
        #IFNOTSWITCH ARRTYPE==long
  #MACRO AddAndPutImpl<long,Long>()
          #IFNOTSWITCH ARRTYPE==float
  #MACRO AddAndPutImpl<float,Float>()
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF

#IFSWITCH ARRTYPE==boolean,int,long,double
  @Override 
  public default int indexOf(byte val){
    return indexOf((int)val);
  }
  @Override  
  public default int lastIndexOf(byte val){
    return lastIndexOf((int)val);
  }
  @Override 
  public default int indexOf(char val){
    return indexOf((int)val);
  }
  @Override  
  public default int lastIndexOf(char val){
    return lastIndexOf((int)val);
  }
#ENDIF
#IFSWITCH ARRTYPE==boolean,byte,int,long,double
  @Override 
  public default int indexOf(short val){
    return indexOf((int)val);
  }
  @Override  
  public default int lastIndexOf(short val){
    return lastIndexOf((int)val);
  }
#ENDIF
#IFSWITCH ARRTYPE==char,short,float
  @Override 
  public default int indexOf(byte val){
    return indexOf((short)val);
  }
  @Override  
  public default int lastIndexOf(byte val){
    return lastIndexOf((short)val);
  }
#ENDIF
}
#ENDDEF
  public abstract interface OfRef<E> extends OmniList<E>,OmniCollection.OfRef<E>{
    public abstract void add(int index,E val);
    public abstract E get(int index);
    public abstract OmniListIterator.OfRef<E> listIterator();
    public abstract OmniListIterator.OfRef<E> listIterator(int index);
    public abstract void put(int index,E val);
    public abstract E remove(int index);
    public abstract void replaceAll(UnaryOperator<E> operator);
    public abstract E set(int index,E val);
    public abstract void sort(Comparator<? super E> sorter);
    public abstract void unstableSort(Comparator<? super E> sorter);
    public abstract void unstableAscendingSort();
    public abstract void unstableDescendingSort();
    public abstract OmniList.OfRef<E> subList(int fromIndex,int toIndex);
  }

}
#MACRODEF AddAndPutImpl<PRIMITIVEINPUTTYPE,BOXEDINPUTTYPE>()
public default void add(int index,PRIMITIVEINPUTTYPE val)
{
  add(index,(ARRTYPE)val);
}
public default void add(int index,BOXEDINPUTTYPE val)
{
  add(index,(ARRTYPE)val.PRIMITIVEINPUTTYPEValue());
}
public default void put(int index,PRIMITIVEINPUTTYPE val)
{
  put(index,(ARRTYPE)val);
}
public default void put(int index,BOXEDINPUTTYPE val)
{
  put(index,(ARRTYPE)val.PRIMITIVEINPUTTYPEValue());
}
#ENDDEF
#MACRODEF GetAndRemoveImpl<RETTYPE,METHODSUFFIX>()
public default RETTYPE getMETHODSUFFIX(int index)
{
  return getCLASSPREFIX(index);
}
public default RETTYPE removeMETHODSUFFIXAt(int index)
{
  return removeCLASSPREFIXAt(index);
}
#ENDDEF
#MACRODEF IndexOfMethodDefault<INPUTTYPE>()
@Override
public default int indexOf(INPUTTYPE val)
{
  if(val!=null)
  {
    return indexOf(val.
    #IFSWITCH INPUTTYPE==Boolean
    booleanValue
    #ELSEIFSWITCH INPUTTYPE==Byte
    byteValue
    #ELSEIFSWITCH INPUTTYPE==Character
    charValue
    #ELSEIFSWITCH INPUTTYPE==Short
    shortValue
    #ELSEIFSWITCH INPUTTYPE==Integer
    intValue
    #ELSEIFSWITCH INPUTTYPE==Long
    longValue
    #ELSEIFSWITCH INPUTTYPE==Float
    floatValue
    #ELSEIFSWITCH INPUTTYPE==Double
    doubleValue
    #ELSE
    ERROR unknown inputtype INPUTTYPE
    #ENDIF
    ());
  }
  return -1;
}
#ENDDEF
#MACRODEF LastIndexOfMethodDefault<INPUTTYPE>()
@Override
public default int lastIndexOf(INPUTTYPE val)
{
  if(val!=null)
  {
    return lastIndexOf(val.
    #IFSWITCH INPUTTYPE==Boolean
    booleanValue
    #ELSEIFSWITCH INPUTTYPE==Byte
    byteValue
    #ELSEIFSWITCH INPUTTYPE==Character
    charValue
    #ELSEIFSWITCH INPUTTYPE==Short
    shortValue
    #ELSEIFSWITCH INPUTTYPE==Integer
    intValue
    #ELSEIFSWITCH INPUTTYPE==Long
    longValue
    #ELSEIFSWITCH INPUTTYPE==Float
    floatValue
    #ELSEIFSWITCH INPUTTYPE==Double
    doubleValue
    #ELSE
    ERROR unknown inputtype INPUTTYPE
    #ENDIF
    ());
  }
  return -1;
}
#ENDDEF

#MACRODEF IndexOfMethodDecl<INPUTTYPE>()
public abstract int indexOf(INPUTTYPE val);
#ENDDEF
#MACRODEF LastIndexOfMethodDecl<INPUTTYPE>()
public abstract int lastIndexOf(INPUTTYPE val);
#ENDDEF

#MACRODEF BoxedMethods(METHODMACRO)
#MACRO METHODMACRO<Boolean>()
#MACRO METHODMACRO<Byte>()
#MACRO METHODMACRO<Character>()
#MACRO METHODMACRO<Short>()
#MACRO METHODMACRO<Integer>()
#MACRO METHODMACRO<Long>()
#MACRO METHODMACRO<Float>()
#MACRO METHODMACRO<Double>()
#ENDDEF

#MACRODEF PrimitiveMethods(METHODMACRO)
#MACRO METHODMACRO<boolean>()
#MACRO METHODMACRO<byte>()
#MACRO METHODMACRO<char>()
#MACRO METHODMACRO<short>()
#MACRO METHODMACRO<int>()
#MACRO METHODMACRO<long>()
#MACRO METHODMACRO<float>()
#MACRO METHODMACRO<double>()
#ENDDEF