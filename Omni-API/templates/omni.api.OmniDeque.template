#TYPEDEF OfGeneric
package omni.api;
import omni.util.PeekAndPollIfc;
import omni.util.TypeUtil;
import java.util.Deque;
//TODO extends java.util.Deque
public interface OmniDeque<E> extends OmniCollection<E>,OmniQueue<E>,OmniStack<E>,PeekAndPollIfc<E>,Deque<E>
{
  //TODO add the rest of the methods
  //public abstract void addFirst(E val);
  //public abstract void addLast(E val);
  //public abstract boolean offerFirst(E val);
  //public abstract boolean offerLast(E val);
  public abstract E peekFirst();
  public abstract E peekLast();
  public abstract E pollFirst();
  public abstract E pollLast();
  public abstract E getFirst();
  public abstract E getLast();
  public abstract E removeFirst();
  public abstract E removeLast();
  //public abstract Object clone();
  
  
  public abstract OmniIterator<E> descendingIterator();
  #MACRO RemoveFirstOccurrenceDefault<boolean>()
  #MACRO RemoveFirstOccurrenceDecl<byte>()
  #MACRO RemoveFirstOccurrenceDecl<char>()
  #MACRO RemoveFirstOccurrenceDecl<short>()
  #MACRO RemoveFirstOccurrenceDefault<int>()
  #MACRO RemoveFirstOccurrenceDefault<long>()
  #MACRO RemoveFirstOccurrenceDefault<float>()
  #MACRO RemoveFirstOccurrenceDefault<double>()
  #MACRO RemoveFirstOccurrenceDecl<Object>()
  #MACRO PrimitiveMethods(RemoveLastOccurrenceDecl)
  #MACRO RemoveLastOccurrenceDecl<Object>()
  #MACRO BoxedMethods(RemoveFirstOccurrenceDecl)
  #MACRO BoxedMethods(RemoveLastOccurrenceDecl)
  public abstract interface OfPrimitive<E> extends OmniCollection<E>,OmniCollection.OfPrimitive<E>,OmniStack<E>,OmniQueue<E>,OmniStack.OfPrimitive<E>,OmniDeque<E>
  {
    public abstract void addFirst(boolean val);
    public abstract void addLast(boolean val);
    public abstract boolean offerFirst(boolean val);
    public abstract boolean offerLast(boolean val);
    #MACRO RemoveOccurrenceBoxed<Boolean,boolean>()
    #MACRO RemoveOccurrenceBoxed<Byte,byte>()
    #MACRO RemoveOccurrenceBoxed<Character,char>()
    #MACRO RemoveOccurrenceBoxed<Short,short>()
    #MACRO RemoveOccurrenceBoxed<Integer,int>()
    #MACRO RemoveOccurrenceBoxed<Long,long>()
    #MACRO RemoveOccurrenceBoxed<Float,float>()
    #MACRO RemoveOccurrenceBoxed<Double,double>()
#MACRODEF RemoveOccurrenceBoxed<INPUTTYPE,PRIMITIVETYPE>()
@Override
public default boolean removeFirstOccurrence(INPUTTYPE val)
{
  return val!=null && removeFirstOccurrence(val.PRIMITIVETYPEValue());
}
@Override
public default boolean removeLastOccurrence(INPUTTYPE val)
{
  return val!=null && removeLastOccurrence(val.PRIMITIVETYPEValue());
}
#ENDDEF
  }
  public abstract interface DoubleOutput<E> extends OmniDeque<E>,OmniQueue.DoubleOutput<E>,OmniStack.DoubleOutput<E>
  {
    public abstract double getFirstDouble();
    public abstract double removeFirstDouble();
    public abstract double getLastDouble();
    public abstract double removeLastDouble();
    public abstract double peekFirstDouble();
    public abstract double peekLastDouble();
    public abstract double pollFirstDouble();
    public abstract double pollLastDouble();
    public abstract OmniIterator.DoubleOutput<E> descendingIterator();
  }
  
  public abstract interface FloatOutput<E> extends DoubleOutput<E>,OmniQueue.FloatOutput<E>,OmniStack.FloatOutput<E>
  {
    public abstract float getFirstFloat();
    public abstract float removeFirstFloat();
    public abstract float getLastFloat();
    public abstract float removeLastFloat();
    public abstract float peekFirstFloat();
    public abstract float peekLastFloat();
    public abstract float pollFirstFloat();
    public abstract float pollLastFloat();
    public abstract OmniIterator.FloatOutput<E> descendingIterator();
  }
  
  public abstract interface LongOutput<E> extends FloatOutput<E>,OmniQueue.LongOutput<E>,OmniStack.LongOutput<E>
  {
    public abstract long getFirstLong();
    public abstract long removeFirstLong();
    public abstract long getLastLong();
    public abstract long removeLastLong();
    public abstract long peekFirstLong();
    public abstract long peekLastLong();
    public abstract long pollFirstLong();
    public abstract long pollLastLong();
    public abstract OmniIterator.LongOutput<E> descendingIterator();
  }
  
  public abstract interface IntOutput<E> extends LongOutput<E>,OmniQueue.IntOutput<E>,OmniStack.IntOutput<E>
  {
    public abstract int getFirstInt();
    public abstract int removeFirstInt();
    public abstract int getLastInt();
    public abstract int removeLastInt();
    public abstract int peekFirstInt();
    public abstract int peekLastInt();
    public abstract int pollFirstInt();
    public abstract int pollLastInt();
    public abstract OmniIterator.IntOutput<E> descendingIterator();
  }
  
  public abstract interface ShortOutput<E> extends IntOutput<E>,OmniQueue.ShortOutput<E>,OmniStack.ShortOutput<E>
  {
    public abstract short getFirstShort();
    public abstract short removeFirstShort();
    public abstract short getLastShort();
    public abstract short removeLastShort();
    public abstract short peekFirstShort();
    public abstract short peekLastShort();
    public abstract short pollFirstShort();
    public abstract short pollLastShort();
    public abstract OmniIterator.ShortOutput<E> descendingIterator();
  }
  
  public abstract interface CharOutput<E> extends IntOutput<E>,OmniQueue.CharOutput<E>,OmniStack.CharOutput<E>
  {
    public abstract char getFirstChar();
    public abstract char removeFirstChar();
    public abstract char getLastChar();
    public abstract char removeLastChar();
    public abstract char peekFirstChar();
    public abstract char peekLastChar();
    public abstract char pollFirstChar();
    public abstract char pollLastChar();
    public abstract OmniIterator.CharOutput<E> descendingIterator();
  }
  
  public abstract interface ByteOutput<E> extends ShortOutput<E>,OmniQueue.ByteOutput<E>,OmniStack.ByteOutput<E>
  {
    public abstract byte getFirstByte();
    public abstract byte removeFirstByte();
    public abstract byte getLastByte();
    public abstract byte removeLastByte();
    public abstract byte peekFirstByte();
    public abstract byte peekLastByte();
    public abstract byte pollFirstByte();
    public abstract byte pollLastByte();
    public abstract OmniIterator.ByteOutput<E> descendingIterator();
  }
  
  public abstract interface BooleanInput<E> extends OmniDeque<E>,OmniQueue.BooleanInput<E>,OmniStack.BooleanInput<E>
  {
    public abstract boolean offerLast(boolean val);
    public abstract boolean offerLast(Boolean val);
    public abstract boolean offerFirst(boolean val);
    public abstract boolean offerFirst(Boolean val);
    public abstract void addLast(boolean val);
    public abstract void addLast(Boolean val);
    public abstract void addFirst(boolean val);
    public abstract void addFirst(Boolean val);
  }
  public abstract interface ByteInput<E> extends BooleanInput<E>,OmniQueue.ByteInput<E>,OmniStack.ByteInput<E>
  {
    public abstract boolean offerLast(byte val);
    public abstract boolean offerLast(Byte val);
    public abstract boolean offerFirst(byte val);
    public abstract boolean offerFirst(Byte val);
    public abstract void addLast(byte val);
    public abstract void addLast(Byte val);
    public abstract void addFirst(byte val);
    public abstract void addFirst(Byte val);
  }
  public abstract interface CharInput<E> extends BooleanInput<E>,OmniQueue.CharInput<E>,OmniStack.CharInput<E>
  {
    public abstract boolean offerLast(char val);
    public abstract boolean offerLast(Character val);
    public abstract boolean offerFirst(char val);
    public abstract boolean offerFirst(Character val);
    public abstract void addLast(char val);
    public abstract void addLast(Character val);
    public abstract void addFirst(char val);
    public abstract void addFirst(Character val);
  }
  public abstract interface ShortInput<E> extends ByteInput<E>,OmniQueue.ShortInput<E>,OmniStack.ShortInput<E>
  {
    public abstract boolean offerLast(short val);
    public abstract boolean offerLast(Short val);
    public abstract boolean offerFirst(short val);
    public abstract boolean offerFirst(Short val);
    public abstract void addLast(short val);
    public abstract void addLast(Short val);
    public abstract void addFirst(short val);
    public abstract void addFirst(Short val);
  }
  public abstract interface IntInput<E> extends CharInput<E>,ShortInput<E>,OmniQueue.IntInput<E>,OmniStack.IntInput<E>
  {
    public abstract boolean offerLast(int val);
    public abstract boolean offerLast(Integer val);
    public abstract boolean offerFirst(int val);
    public abstract boolean offerFirst(Integer val);
    public abstract void addLast(int val);
    public abstract void addLast(Integer val);
    public abstract void addFirst(int val);
    public abstract void addFirst(Integer val);
  }
  public abstract interface LongInput<E> extends IntInput<E>,OmniQueue.LongInput<E>,OmniStack.LongInput<E>
  {
    public abstract boolean offerLast(long val);
    public abstract boolean offerLast(Long val);
    public abstract boolean offerFirst(long val);
    public abstract boolean offerFirst(Long val);
    public abstract void addLast(long val);
    public abstract void addLast(Long val);
    public abstract void addFirst(long val);
    public abstract void addFirst(Long val);
  }
  public abstract interface FloatInput<E> extends LongInput<E>,OmniQueue.FloatInput<E>,OmniStack.FloatInput<E>
  {
    public abstract boolean offerLast(float val);
    public abstract boolean offerLast(Float val);
    public abstract boolean offerFirst(float val);
    public abstract boolean offerFirst(Float val);
    public abstract void addLast(float val);
    public abstract void addLast(Float val);
    public abstract void addFirst(float val);
    public abstract void addFirst(Float val);
  }
  
  
  #MACRO PrimitiveSubInterface<boolean,Boolean,Boolean>()
  #MACRO PrimitiveSubInterface<byte,Byte,Byte>()
  #MACRO PrimitiveSubInterface<char,Char,Character>()
  #MACRO PrimitiveSubInterface<short,Short,Short>()
  #MACRO PrimitiveSubInterface<int,Int,Integer>()
  #MACRO PrimitiveSubInterface<long,Long,Long>()
  #MACRO PrimitiveSubInterface<float,Float,Float>()
  #MACRO PrimitiveSubInterface<double,Double,Double>()
#MACRODEF PrimitiveSubInterface<ARRTYPE,CLASSPREFIX,BOXEDTYPE>()
public abstract interface OfCLASSPREFIX extends OmniCollection<BOXEDTYPE>,OmniCollection.OfPrimitive<BOXEDTYPE>,OmniCollection.OfCLASSPREFIX,PeekAndPollIfc.CLASSPREFIXOutput<BOXEDTYPE>,OmniStack<BOXEDTYPE>,OmniStack.OfPrimitive<BOXEDTYPE>,OmniStack.OfCLASSPREFIX,OmniQueue<BOXEDTYPE>,OmniQueue.OfCLASSPREFIX,OmniDeque<BOXEDTYPE>,OfPrimitive<BOXEDTYPE>
#IFSWITCH ARRTYPE==boolean
,BooleanInput<BOXEDTYPE>,ByteOutput<BOXEDTYPE>,CharOutput<BOXEDTYPE>
#ELSEIFSWITCH ARRTYPE==double
,FloatInput<BOXEDTYPE>,DoubleOutput<BOXEDTYPE>
#ELSEIFNOTSWITCH ARRTYPE==Object
,CLASSPREFIXInput<BOXEDTYPE>,CLASSPREFIXOutput<BOXEDTYPE>
#ENDIF
{
#IFNOTSWITCH ARRTYPE==boolean
  public default void addFirst(ARRTYPE val)
  {
    push(val);
  }
#ENDIF
  public abstract void addFirst(BOXEDTYPE val);
  public abstract void addLast(ARRTYPE val);
  public abstract void addLast(BOXEDTYPE val);
  public abstract boolean offerFirst(ARRTYPE val);
  public abstract boolean offerLast(ARRTYPE val);
  public abstract boolean offerFirst(BOXEDTYPE val);
  public abstract boolean offerLast(BOXEDTYPE val);
  
#IFNOTSWITCH ARRTYPE==boolean
  public default void addFirst(boolean val)
  {
    push((ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==double
    castToDouble
    #ELSEIFSWITCH ARRTYPE==float
    castToFloat
    #ELSEIFSWITCH ARRTYPE==long
    castToLong
    #ELSEIFSWITCH ARRTYPE==int,short,byte
    castToByte
    #ELSEIFSWITCH ARRTYPE==char
    castToChar
    #ELSE
     ERROR unknown array type ARRTYPE
    #ENDIF
    (val));
  }
  public default void addLast(boolean val)
  {
    addLast((ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==double
    castToDouble
    #ELSEIFSWITCH ARRTYPE==float
    castToFloat
    #ELSEIFSWITCH ARRTYPE==long
    castToLong
    #ELSEIFSWITCH ARRTYPE==int,short,byte
    castToByte
    #ELSEIFSWITCH ARRTYPE==char
    castToChar
    #ELSE
     ERROR unknown array type ARRTYPE
    #ENDIF
    (val));
  }
  public default void addFirst(Boolean val)
  {
    push((ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==double
    castToDouble
    #ELSEIFSWITCH ARRTYPE==float
    castToFloat
    #ELSEIFSWITCH ARRTYPE==long
    castToLong
    #ELSEIFSWITCH ARRTYPE==int,short,byte
    castToByte
    #ELSEIFSWITCH ARRTYPE==char
    castToChar
    #ELSE
     ERROR unknown array type ARRTYPE
    #ENDIF
    (val.booleanValue()));
  }
  public default void addLast(Boolean val)
  {
    addLast((ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==double
    castToDouble
    #ELSEIFSWITCH ARRTYPE==float
    castToFloat
    #ELSEIFSWITCH ARRTYPE==long
    castToLong
    #ELSEIFSWITCH ARRTYPE==int,short,byte
    castToByte
    #ELSEIFSWITCH ARRTYPE==char
    castToChar
    #ELSE
     ERROR unknown array type ARRTYPE
    #ENDIF
    (val.booleanValue()));
  }
  public default boolean offerFirst(boolean val)
  {
    return offerFirst((ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==double
    castToDouble
    #ELSEIFSWITCH ARRTYPE==float
    castToFloat
    #ELSEIFSWITCH ARRTYPE==long
    castToLong
    #ELSEIFSWITCH ARRTYPE==int,short,byte
    castToByte
    #ELSEIFSWITCH ARRTYPE==char
    castToChar
    #ELSE
     ERROR unknown array type ARRTYPE
    #ENDIF
    (val));
  }
  public default boolean offerLast(boolean val)
  {
    return offerLast((ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==double
    castToDouble
    #ELSEIFSWITCH ARRTYPE==float
    castToFloat
    #ELSEIFSWITCH ARRTYPE==long
    castToLong
    #ELSEIFSWITCH ARRTYPE==int,short,byte
    castToByte
    #ELSEIFSWITCH ARRTYPE==char
    castToChar
    #ELSE
     ERROR unknown array type ARRTYPE
    #ENDIF
    (val));
  }
  public default boolean offerFirst(Boolean val)
  {
    return offerFirst((ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==double
    castToDouble
    #ELSEIFSWITCH ARRTYPE==float
    castToFloat
    #ELSEIFSWITCH ARRTYPE==long
    castToLong
    #ELSEIFSWITCH ARRTYPE==int,short,byte
    castToByte
    #ELSEIFSWITCH ARRTYPE==char
    castToChar
    #ELSE
     ERROR unknown array type ARRTYPE
    #ENDIF
    (val.booleanValue()));
  }
  public default boolean offerLast(Boolean val)
  {
    return offerLast((ARRTYPE)TypeUtil.
    #IFSWITCH ARRTYPE==double
    castToDouble
    #ELSEIFSWITCH ARRTYPE==float
    castToFloat
    #ELSEIFSWITCH ARRTYPE==long
    castToLong
    #ELSEIFSWITCH ARRTYPE==int,short,byte
    castToByte
    #ELSEIFSWITCH ARRTYPE==char
    castToChar
    #ELSE
     ERROR unknown array type ARRTYPE
    #ENDIF
    (val.booleanValue()));
  }
  #IFNOTSWITCH ARRTYPE==byte,char,short
  #MACRO AddAndOfferImpls<char,Character>()
  #ENDIF
  #IFNOTSWITCH ARRTYPE==byte,char
  #MACRO AddAndOfferImpls<byte,Byte>()
    #IFNOTSWITCH ARRTYPE==short
  #MACRO AddAndOfferImpls<short,Short>()
      #IFNOTSWITCH ARRTYPE==int
  #MACRO AddAndOfferImpls<int,Integer>()
        #IFNOTSWITCH ARRTYPE==long
  #MACRO AddAndOfferImpls<long,Long>()
          #IFNOTSWITCH ARRTYPE==float
  #MACRO AddAndOfferImpls<float,Float>()
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF
  public abstract BOXEDTYPE getFirst();
  public abstract BOXEDTYPE getLast();
  public abstract BOXEDTYPE removeFirst();
  public abstract BOXEDTYPE removeLast();
  public default ARRTYPE getFirstCLASSPREFIX()
  {
    return ARRTYPEElement();
  }
  public abstract ARRTYPE getLastCLASSPREFIX();
  public default ARRTYPE removeFirstCLASSPREFIX()
  {
    return popCLASSPREFIX();
  }
  public abstract ARRTYPE removeLastCLASSPREFIX();
  @Override
  public default ARRTYPE removeCLASSPREFIX()
  {
    return popCLASSPREFIX();
  }
  
   
  //TODO get methods
  //TODO remove
#IFSWITCH ARRTYPE==boolean
  
  //TODO getAndRemoveImpls
  public default byte getFirstByte()
  {
    return TypeUtil.castToByte(ARRTYPEElement());
  }
  public default char getFirstChar()
  {
    return TypeUtil.castToChar(ARRTYPEElement());
  }
  public default short getFirstShort()
  {
    return TypeUtil.castToByte(ARRTYPEElement());
  }
  public default int getFirstInt()
  {
    return TypeUtil.castToByte(ARRTYPEElement());
  }
  public default long getFirstLong()
  {
    return TypeUtil.castToLong(ARRTYPEElement());
  }
  public default float getFirstFloat()
  {
    return TypeUtil.castToFloat(ARRTYPEElement());
  }
  public default double getFirstDouble()
  {
    return TypeUtil.castToDouble(ARRTYPEElement());
  }
  public default byte getLastByte()
  {
    return TypeUtil.castToByte(getLastCLASSPREFIX());
  }
  public default char getLastChar()
  {
    return TypeUtil.castToChar(getLastCLASSPREFIX());
  }
  public default short getLastShort()
  {
    return TypeUtil.castToByte(getLastCLASSPREFIX());
  }
  public default int getLastInt()
  {
    return TypeUtil.castToByte(getLastCLASSPREFIX());
  }
  public default long getLastLong()
  {
    return TypeUtil.castToLong(getLastCLASSPREFIX());
  }
  public default float getLastFloat()
  {
    return TypeUtil.castToFloat(getLastCLASSPREFIX());
  }
  public default double getLastDouble()
  {
    return TypeUtil.castToDouble(getLastCLASSPREFIX());
  }
  public default byte removeFirstByte()
  {
    return TypeUtil.castToByte(popCLASSPREFIX());
  }
  public default char removeFirstChar()
  {
    return TypeUtil.castToChar(popCLASSPREFIX());
  }
  public default short removeFirstShort()
  {
    return TypeUtil.castToByte(popCLASSPREFIX());
  }
  public default int removeFirstInt()
  {
    return TypeUtil.castToByte(popCLASSPREFIX());
  }
  public default long removeFirstLong()
  {
    return TypeUtil.castToLong(popCLASSPREFIX());
  }
  public default float removeFirstFloat()
  {
    return TypeUtil.castToFloat(popCLASSPREFIX());
  }
  public default double removeFirstDouble()
  {
    return TypeUtil.castToDouble(popCLASSPREFIX());
  }
  public default byte removeLastByte()
  {
    return TypeUtil.castToByte(removeLastCLASSPREFIX());
  }
  public default char removeLastChar()
  {
    return TypeUtil.castToChar(removeLastCLASSPREFIX());
  }
  public default short removeLastShort()
  {
    return TypeUtil.castToByte(removeLastCLASSPREFIX());
  }
  public default int removeLastInt()
  {
    return TypeUtil.castToByte(removeLastCLASSPREFIX());
  }
  public default long removeLastLong()
  {
    return TypeUtil.castToLong(removeLastCLASSPREFIX());
  }
  public default float removeLastFloat()
  {
    return TypeUtil.castToFloat(removeLastCLASSPREFIX());
  }
  public default double removeLastDouble()
  {
    return TypeUtil.castToDouble(removeLastCLASSPREFIX());
  }
#ELSEIFNOTSWITCH ARRTYPE==double
  #MACRO GetAndRemoveImpls<double,Double>()
  #IFNOTSWITCH ARRTYPE==float
  #MACRO GetAndRemoveImpls<float,Float>()
    #IFNOTSWITCH ARRTYPE==long
  #MACRO GetAndRemoveImpls<long,Long>()
      #IFNOTSWITCH ARRTYPE==int
  #MACRO GetAndRemoveImpls<int,Int>()
        #IFNOTSWITCH ARRTYPE==char,short
  #MACRO GetAndRemoveImpls<short,Short>()
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF
  
  
  
  
  public abstract BOXEDTYPE peekFirst();
  public abstract BOXEDTYPE peekLast();
  public abstract BOXEDTYPE pollFirst();
  public abstract BOXEDTYPE pollLast();
  #MACRO PeekAndPollImpls<ARRTYPE,CLASSPREFIX>()
#IFNOTSWITCH ARRTYPE==double
  #MACRO PeekAndPollImpls<double,Double>()
  #IFNOTSWITCH ARRTYPE==float
  #MACRO PeekAndPollImpls<float,Float>()
    #IFNOTSWITCH ARRTYPE==long
  #MACRO PeekAndPollImpls<long,Long>()
      #IFNOTSWITCH ARRTYPE==int
  #MACRO PeekAndPollImpls<int,Int>()
        #IFNOTSWITCH ARRTYPE==char,short
  #MACRO PeekAndPollImpls<short,Short>()
          #IFNOTSWITCH ARRTYPE==byte
  #MACRO PeekAndPollImpls<byte,Byte>()
  #MACRO PeekAndPollImpls<char,Char>()
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDIF
#IFSWITCH ARRTYPE==boolean,int,long,double
 
  @Override
  public default boolean removeLastOccurrence(byte val)
  {
    return removeLastOccurrence((int)val);
  }
  
  @Override
  public default boolean removeLastOccurrence(char val)
  {
    return removeLastOccurrence((int)val);
  }
  
  
#ENDIF
#IFSWITCH ARRTYPE==boolean,byte,int,long,double
  @Override
  public default boolean removeFirstOccurrence(byte val)
  {
    return removeVal((int)val);
  }
  @Override
  public default boolean removeFirstOccurrence(char val)
  {
    return removeVal((int)val);
  }
  @Override
  public default boolean removeFirstOccurrence(short val)
  {
    return removeVal((int)val);
  }
  @Override
  public default boolean removeLastOccurrence(short val)
  {
    return removeLastOccurrence((int)val);
  }
#ENDIF

#IFSWITCH ARRTYPE==char,short,float
  @Override
  public default boolean removeFirstOccurrence(byte val){
    return removeVal((short)val);
  }
  @Override
  public default boolean removeFirstOccurrence(char val){
    return removeVal(val);
  }
  @Override
  public default boolean removeFirstOccurrence(short val){
    return removeVal(val);
  }
  @Override
  public default boolean removeLastOccurrence(byte val){
    return removeLastOccurrence((short)val);
  }
#ENDIF
 
  //TODO removeFirstOccurrence defaults
  //TODO removeLastOccurrence defaults
  public abstract OmniIterator.OfCLASSPREFIX descendingIterator();
}
#ENDDEF
  public abstract interface OfRef<E> extends OmniCollection<E>,OmniCollection.OfRef<E>,PeekAndPollIfc<E>,OmniStack<E>,OmniStack.OfRef<E>,OmniQueue<E>,OmniQueue.OfRef<E>,OmniDeque<E>
  {
    public abstract void addFirst(E val);
    public abstract void addLast(E val);
    OmniIterator.OfRef<E> descendingIterator();
    public abstract E getFirst();
    public abstract E getLast();
    public abstract boolean offerFirst(E val);
    public abstract boolean offerLast(E val);
    public abstract E peekFirst();
    public abstract E peekLast();
    public abstract E pollFirst();
    public abstract E pollLast();
    public abstract E removeFirst();
    public abstract E removeLast();
    #MACRO BoxedMethods(RemoveFirstOccurrenceDefault)
    #MACRO RemoveFirstOccurrenceDefault<byte>()
    #MACRO RemoveFirstOccurrenceDefault<char>()
    #MACRO RemoveFirstOccurrenceDefault<short>()
  }
}
#MACRODEF PeekAndPollImpls<RETTYPE,METHODSUFFIX>()
public default RETTYPE peekFirstMETHODSUFFIX()
{
  return peekMETHODSUFFIX();
}
public abstract RETTYPE peekLastMETHODSUFFIX();
public default RETTYPE pollFirstMETHODSUFFIX()
{
  return pollMETHODSUFFIX();
}
public abstract RETTYPE pollLastMETHODSUFFIX();
#ENDDEF
#MACRODEF GetAndRemoveImpls<RETTYPE,METHODSUFFIX>()
public default RETTYPE getFirstMETHODSUFFIX()
{
  return ARRTYPEElement();
}
public default RETTYPE getLastMETHODSUFFIX()
{
  return getLastCLASSPREFIX();
}
public default RETTYPE removeFirstMETHODSUFFIX()
{
  return popCLASSPREFIX();
}
public default RETTYPE removeLastMETHODSUFFIX()
{
  return removeLastCLASSPREFIX();
}
#ENDDEF
#MACRODEF AddAndOfferImpls<PRIMITIVEINPUTTYPE,BOXEDINPUTTYPE>()
public default void addFirst(PRIMITIVEINPUTTYPE val)
{
  push((ARRTYPE)val);
}
public default void addLast(PRIMITIVEINPUTTYPE val)
{
  addLast((ARRTYPE)val);
}
public default boolean offerFirst(PRIMITIVEINPUTTYPE val)
{
  return offerFirst((ARRTYPE)val);
}
public default boolean offerLast(PRIMITIVEINPUTTYPE val)
{
  return offerLast((ARRTYPE)val);
}
public default void addFirst(BOXEDINPUTTYPE val)
{
  push((ARRTYPE)val.PRIMITIVEINPUTTYPEValue());
}
public default void addLast(BOXEDINPUTTYPE val)
{
  addLast((ARRTYPE)val.PRIMITIVEINPUTTYPEValue());
}
public default boolean offerFirst(BOXEDINPUTTYPE val)
{
  return offerFirst((ARRTYPE)val.PRIMITIVEINPUTTYPEValue());
}
public default boolean offerLast(BOXEDINPUTTYPE val)
{
  return offerLast((ARRTYPE)val.PRIMITIVEINPUTTYPEValue());
}
#ENDDEF

#MACRODEF RemoveFirstOccurrenceDecl<INPUTTYPE>()
public abstract boolean removeFirstOccurrence(INPUTTYPE val);
#ENDDEF
#MACRODEF RemoveLastOccurrenceDecl<INPUTTYPE>()
public abstract boolean removeLastOccurrence(INPUTTYPE val);
#ENDDEF

#MACRODEF RemoveFirstOccurrenceDefault<INPUTTYPE>()
public default boolean removeFirstOccurrence(INPUTTYPE val)
{
  return removeVal(val);
}
#ENDDEF

#MACRODEF PrimitiveMethods(MACRONAME)
#MACRO MACRONAME<boolean>()
#MACRO MACRONAME<byte>()
#MACRO MACRONAME<char>()
#MACRO MACRONAME<short>()
#MACRO MACRONAME<int>()
#MACRO MACRONAME<long>()
#MACRO MACRONAME<float>()
#MACRO MACRONAME<double>()
#ENDDEF

#MACRODEF BoxedMethods(MACRONAME)
#MACRO MACRONAME<Boolean>()
#MACRO MACRONAME<Byte>()
#MACRO MACRONAME<Character>()
#MACRO MACRONAME<Short>()
#MACRO MACRONAME<Integer>()
#MACRO MACRONAME<Long>()
#MACRO MACRONAME<Float>()
#MACRO MACRONAME<Double>()
#ENDDEF